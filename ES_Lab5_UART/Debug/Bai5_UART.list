
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000812c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003128  080082bc  080082bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3e4  0800b3e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3e4  0800b3e4  0001b3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3ec  0800b3ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3ec  0800b3ec  0001b3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3f0  0800b3f0  0001b3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b3f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000002ec  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000364  20000364  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c843  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d24  00000000  00000000  0003c8eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  00040610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  00041bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002460d  00000000  00000000  00042fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c82a  00000000  00000000  000675cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d36a8  00000000  00000000  00083df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015749f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d40  00000000  00000000  001574f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082a4 	.word	0x080082a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080082a4 	.word	0x080082a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	2108      	movs	r1, #8
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <button_init+0x14>)
 80005a2:	f003 f99d 	bl	80038e0 <HAL_GPIO_WritePin>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40020c00 	.word	0x40020c00

080005b0 <button_Scan>:

void button_Scan(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2108      	movs	r1, #8
 80005ba:	482f      	ldr	r0, [pc, #188]	; (8000678 <button_Scan+0xc8>)
 80005bc:	f003 f990 	bl	80038e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2108      	movs	r1, #8
 80005c4:	482c      	ldr	r0, [pc, #176]	; (8000678 <button_Scan+0xc8>)
 80005c6:	f003 f98b 	bl	80038e0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005ca:	230a      	movs	r3, #10
 80005cc:	2202      	movs	r2, #2
 80005ce:	492b      	ldr	r1, [pc, #172]	; (800067c <button_Scan+0xcc>)
 80005d0:	482b      	ldr	r0, [pc, #172]	; (8000680 <button_Scan+0xd0>)
 80005d2:	f005 f8c6 	bl	8005762 <HAL_SPI_Receive>
	  int button_index = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005de:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	e03f      	b.n	8000666 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db06      	blt.n	80005fa <button_Scan+0x4a>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	dc03      	bgt.n	80005fa <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3304      	adds	r3, #4
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	e018      	b.n	800062c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	dd07      	ble.n	8000610 <button_Scan+0x60>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b07      	cmp	r3, #7
 8000604:	dc04      	bgt.n	8000610 <button_Scan+0x60>
			  button_index = 7 - i;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f1c3 0307 	rsb	r3, r3, #7
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e00d      	b.n	800062c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b07      	cmp	r3, #7
 8000614:	dd06      	ble.n	8000624 <button_Scan+0x74>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b0b      	cmp	r3, #11
 800061a:	dc03      	bgt.n	8000624 <button_Scan+0x74>
			  button_index = i + 4;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3304      	adds	r3, #4
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	e003      	b.n	800062c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f1c3 0317 	rsb	r3, r3, #23
 800062a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <button_Scan+0xcc>)
 800062e:	881a      	ldrh	r2, [r3, #0]
 8000630:	897b      	ldrh	r3, [r7, #10]
 8000632:	4013      	ands	r3, r2
 8000634:	b29b      	uxth	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d005      	beq.n	8000646 <button_Scan+0x96>
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <button_Scan+0xd4>)
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2100      	movs	r1, #0
 8000640:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000644:	e009      	b.n	800065a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <button_Scan+0xd4>)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064e:	3301      	adds	r3, #1
 8000650:	b299      	uxth	r1, r3
 8000652:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <button_Scan+0xd4>)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800065a:	897b      	ldrh	r3, [r7, #10]
 800065c:	085b      	lsrs	r3, r3, #1
 800065e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	ddbc      	ble.n	80005e6 <button_Scan+0x36>
	  }
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40020c00 	.word	0x40020c00
 800067c:	20000094 	.word	0x20000094
 8000680:	20000208 	.word	0x20000208
 8000684:	200000c4 	.word	0x200000c4

08000688 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 800068c:	201e      	movs	r0, #30
 800068e:	f002 fd03 	bl	8003098 <DEC2BCD>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <ds3231_init+0x80>)
 8000698:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 800069a:	2016      	movs	r0, #22
 800069c:	f002 fcfc 	bl	8003098 <DEC2BCD>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <ds3231_init+0x80>)
 80006a6:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80006a8:	2015      	movs	r0, #21
 80006aa:	f002 fcf5 	bl	8003098 <DEC2BCD>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <ds3231_init+0x80>)
 80006b4:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80006b6:	2006      	movs	r0, #6
 80006b8:	f002 fcee 	bl	8003098 <DEC2BCD>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <ds3231_init+0x80>)
 80006c2:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80006c4:	200f      	movs	r0, #15
 80006c6:	f002 fce7 	bl	8003098 <DEC2BCD>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <ds3231_init+0x80>)
 80006d0:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80006d2:	2009      	movs	r0, #9
 80006d4:	f002 fce0 	bl	8003098 <DEC2BCD>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <ds3231_init+0x80>)
 80006de:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80006e0:	2017      	movs	r0, #23
 80006e2:	f002 fcd9 	bl	8003098 <DEC2BCD>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <ds3231_init+0x80>)
 80006ec:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80006ee:	2332      	movs	r3, #50	; 0x32
 80006f0:	2203      	movs	r2, #3
 80006f2:	21d0      	movs	r1, #208	; 0xd0
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <ds3231_init+0x84>)
 80006f6:	f003 fd71 	bl	80041dc <HAL_I2C_IsDeviceReady>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d000      	beq.n	8000702 <ds3231_init+0x7a>
		while(1);
 8000700:	e7fe      	b.n	8000700 <ds3231_init+0x78>
	};
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000ec 	.word	0x200000ec
 800070c:	20000144 	.word	0x20000144

08000710 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af04      	add	r7, sp, #16
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000720:	79bb      	ldrb	r3, [r7, #6]
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fcb8 	bl	8003098 <DEC2BCD>
 8000728:	4603      	mov	r3, r0
 800072a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	b29a      	uxth	r2, r3
 8000730:	230a      	movs	r3, #10
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2301      	movs	r3, #1
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	f107 030f 	add.w	r3, r7, #15
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2301      	movs	r3, #1
 8000740:	21d0      	movs	r1, #208	; 0xd0
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <ds3231_Write+0x40>)
 8000744:	f003 fa2a 	bl	8003b9c <HAL_I2C_Mem_Write>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000144 	.word	0x20000144

08000754 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800075a:	230a      	movs	r3, #10
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	2307      	movs	r3, #7
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <ds3231_ReadTime+0xa4>)
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2301      	movs	r3, #1
 8000768:	2200      	movs	r2, #0
 800076a:	21d0      	movs	r1, #208	; 0xd0
 800076c:	4823      	ldr	r0, [pc, #140]	; (80007fc <ds3231_ReadTime+0xa8>)
 800076e:	f003 fb0f 	bl	8003d90 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <ds3231_ReadTime+0xa4>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fc74 	bl	8003064 <BCD2DEC>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <ds3231_ReadTime+0xac>)
 8000782:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <ds3231_ReadTime+0xa4>)
 8000786:	785b      	ldrb	r3, [r3, #1]
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fc6b 	bl	8003064 <BCD2DEC>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <ds3231_ReadTime+0xb0>)
 8000794:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <ds3231_ReadTime+0xa4>)
 8000798:	789b      	ldrb	r3, [r3, #2]
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fc62 	bl	8003064 <BCD2DEC>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <ds3231_ReadTime+0xb4>)
 80007a6:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <ds3231_ReadTime+0xa4>)
 80007aa:	78db      	ldrb	r3, [r3, #3]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 fc59 	bl	8003064 <BCD2DEC>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <ds3231_ReadTime+0xb8>)
 80007b8:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <ds3231_ReadTime+0xa4>)
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 fc50 	bl	8003064 <BCD2DEC>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <ds3231_ReadTime+0xbc>)
 80007ca:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <ds3231_ReadTime+0xa4>)
 80007ce:	795b      	ldrb	r3, [r3, #5]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fc47 	bl	8003064 <BCD2DEC>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <ds3231_ReadTime+0xc0>)
 80007dc:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <ds3231_ReadTime+0xa4>)
 80007e0:	799b      	ldrb	r3, [r3, #6]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fc3e 	bl	8003064 <BCD2DEC>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <ds3231_ReadTime+0xc4>)
 80007ee:	701a      	strb	r2, [r3, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000ec 	.word	0x200000ec
 80007fc:	20000144 	.word	0x20000144
 8000800:	200000e4 	.word	0x200000e4
 8000804:	200000e6 	.word	0x200000e6
 8000808:	200000e9 	.word	0x200000e9
 800080c:	200000e8 	.word	0x200000e8
 8000810:	200000e7 	.word	0x200000e7
 8000814:	200000ea 	.word	0x200000ea
 8000818:	200000e5 	.word	0x200000e5

0800081c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
 8000844:	615a      	str	r2, [r3, #20]
 8000846:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000848:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <MX_FSMC_Init+0xec>)
 800084a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800084e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <MX_FSMC_Init+0xec>)
 8000852:	4a2e      	ldr	r2, [pc, #184]	; (800090c <MX_FSMC_Init+0xf0>)
 8000854:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <MX_FSMC_Init+0xec>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800085c:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <MX_FSMC_Init+0xec>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_FSMC_Init+0xec>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <MX_FSMC_Init+0xec>)
 800086a:	2210      	movs	r2, #16
 800086c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_FSMC_Init+0xec>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <MX_FSMC_Init+0xec>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MX_FSMC_Init+0xec>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_FSMC_Init+0xec>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <MX_FSMC_Init+0xec>)
 8000888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MX_FSMC_Init+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_FSMC_Init+0xec>)
 8000896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800089a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_FSMC_Init+0xec>)
 800089e:	2200      	movs	r2, #0
 80008a0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_FSMC_Init+0xec>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_FSMC_Init+0xec>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80008ae:	230f      	movs	r3, #15
 80008b0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80008b2:	230f      	movs	r3, #15
 80008b4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80008b6:	233c      	movs	r3, #60	; 0x3c
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80008be:	2310      	movs	r3, #16
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80008c2:	2311      	movs	r3, #17
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80008c6:	2300      	movs	r3, #0
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80008ca:	2308      	movs	r3, #8
 80008cc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80008ce:	230f      	movs	r3, #15
 80008d0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80008d2:	2309      	movs	r3, #9
 80008d4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008da:	2310      	movs	r3, #16
 80008dc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008de:	2311      	movs	r3, #17
 80008e0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008e6:	463a      	mov	r2, r7
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_FSMC_Init+0xec>)
 80008f0:	f005 fb1a 	bl	8005f28 <HAL_SRAM_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008fa:	f002 f8ff 	bl	8002afc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008fe:	bf00      	nop
 8000900:	3738      	adds	r7, #56	; 0x38
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000f4 	.word	0x200000f4
 800090c:	a0000104 	.word	0xa0000104

08000910 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <HAL_FSMC_MspInit+0x88>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d131      	bne.n	8000990 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <HAL_FSMC_MspInit+0x88>)
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_FSMC_MspInit+0x8c>)
 8000938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <HAL_FSMC_MspInit+0x8c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6393      	str	r3, [r2, #56]	; 0x38
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_FSMC_MspInit+0x8c>)
 8000944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800094e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000952:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000960:	230c      	movs	r3, #12
 8000962:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	4619      	mov	r1, r3
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <HAL_FSMC_MspInit+0x90>)
 800096a:	f002 fe1d 	bl	80035a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800096e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000972:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000980:	230c      	movs	r3, #12
 8000982:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4619      	mov	r1, r3
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <HAL_FSMC_MspInit+0x94>)
 800098a:	f002 fe0d 	bl	80035a8 <HAL_GPIO_Init>
 800098e:	e000      	b.n	8000992 <HAL_FSMC_MspInit+0x82>
    return;
 8000990:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000098 	.word	0x20000098
 800099c:	40023800 	.word	0x40023800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40020c00 	.word	0x40020c00

080009a8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80009b0:	f7ff ffae 	bl	8000910 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	4b6f      	ldr	r3, [pc, #444]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a6e      	ldr	r2, [pc, #440]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b6c      	ldr	r3, [pc, #432]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	4b68      	ldr	r3, [pc, #416]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a67      	ldr	r2, [pc, #412]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b65      	ldr	r3, [pc, #404]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b61      	ldr	r3, [pc, #388]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a60      	ldr	r2, [pc, #384]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b5e      	ldr	r3, [pc, #376]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b5a      	ldr	r3, [pc, #360]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a59      	ldr	r2, [pc, #356]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b57      	ldr	r3, [pc, #348]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b53      	ldr	r3, [pc, #332]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a52      	ldr	r2, [pc, #328]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b50      	ldr	r3, [pc, #320]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b4c      	ldr	r3, [pc, #304]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a4b      	ldr	r2, [pc, #300]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b49      	ldr	r3, [pc, #292]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a44      	ldr	r2, [pc, #272]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b42      	ldr	r3, [pc, #264]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2170      	movs	r1, #112	; 0x70
 8000a9a:	483f      	ldr	r0, [pc, #252]	; (8000b98 <MX_GPIO_Init+0x1dc>)
 8000a9c:	f002 ff20 	bl	80038e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa6:	483d      	ldr	r0, [pc, #244]	; (8000b9c <MX_GPIO_Init+0x1e0>)
 8000aa8:	f002 ff1a 	bl	80038e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2140      	movs	r1, #64	; 0x40
 8000ab0:	483b      	ldr	r0, [pc, #236]	; (8000ba0 <MX_GPIO_Init+0x1e4>)
 8000ab2:	f002 ff15 	bl	80038e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abc:	4839      	ldr	r0, [pc, #228]	; (8000ba4 <MX_GPIO_Init+0x1e8>)
 8000abe:	f002 ff0f 	bl	80038e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	4838      	ldr	r0, [pc, #224]	; (8000ba8 <MX_GPIO_Init+0x1ec>)
 8000ac8:	f002 ff0a 	bl	80038e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000acc:	2370      	movs	r3, #112	; 0x70
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	482d      	ldr	r0, [pc, #180]	; (8000b98 <MX_GPIO_Init+0x1dc>)
 8000ae4:	f002 fd60 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4826      	ldr	r0, [pc, #152]	; (8000b9c <MX_GPIO_Init+0x1e0>)
 8000b02:	f002 fd51 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000b06:	23c0      	movs	r3, #192	; 0xc0
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4822      	ldr	r0, [pc, #136]	; (8000ba4 <MX_GPIO_Init+0x1e8>)
 8000b1a:	f002 fd45 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000b1e:	2330      	movs	r3, #48	; 0x30
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481a      	ldr	r0, [pc, #104]	; (8000b9c <MX_GPIO_Init+0x1e0>)
 8000b32:	f002 fd39 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <MX_GPIO_Init+0x1e4>)
 8000b4e:	f002 fd2b 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <MX_GPIO_Init+0x1e8>)
 8000b6c:	f002 fd1c 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b70:	2308      	movs	r3, #8
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <MX_GPIO_Init+0x1ec>)
 8000b88:	f002 fd0e 	bl	80035a8 <HAL_GPIO_Init>

}
 8000b8c:	bf00      	nop
 8000b8e:	3730      	adds	r7, #48	; 0x30
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020c00 	.word	0x40020c00

08000bac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bb2:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <MX_I2C1_Init+0x54>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bb8:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_I2C1_Init+0x58>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bea:	f002 fe93 	bl	8003914 <HAL_I2C_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bf4:	f001 ff82 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000144 	.word	0x20000144
 8000c00:	40005400 	.word	0x40005400
 8000c04:	000186a0 	.word	0x000186a0

08000c08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12b      	bne.n	8000c82 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23c0      	movs	r3, #192	; 0xc0
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4a:	2312      	movs	r3, #18
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c56:	2304      	movs	r3, #4
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <HAL_I2C_MspInit+0x8c>)
 8000c62:	f002 fca1 	bl	80035a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400

08000c98 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <LCD_WR_REG+0x1c>)
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	8013      	strh	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	600ffffe 	.word	0x600ffffe

08000cb8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <LCD_WR_DATA+0x1c>)
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	8053      	strh	r3, [r2, #2]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	600ffffe 	.word	0x600ffffe

08000cd8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <LCD_RD_DATA+0x20>)
 8000ce0:	885b      	ldrh	r3, [r3, #2]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	b29b      	uxth	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	600ffffe 	.word	0x600ffffe

08000cfc <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4604      	mov	r4, r0
 8000d04:	4608      	mov	r0, r1
 8000d06:	4611      	mov	r1, r2
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	80fb      	strh	r3, [r7, #6]
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80bb      	strh	r3, [r7, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	807b      	strh	r3, [r7, #2]
 8000d16:	4613      	mov	r3, r2
 8000d18:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000d1a:	202a      	movs	r0, #42	; 0x2a
 8000d1c:	f7ff ffbc 	bl	8000c98 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ffc6 	bl	8000cb8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ffc0 	bl	8000cb8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ffba 	bl	8000cb8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ffb4 	bl	8000cb8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000d50:	202b      	movs	r0, #43	; 0x2b
 8000d52:	f7ff ffa1 	bl	8000c98 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000d56:	88bb      	ldrh	r3, [r7, #4]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ffab 	bl	8000cb8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d62:	88bb      	ldrh	r3, [r7, #4]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ffa5 	bl	8000cb8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d6e:	883b      	ldrh	r3, [r7, #0]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff9f 	bl	8000cb8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d7a:	883b      	ldrh	r3, [r7, #0]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff99 	bl	8000cb8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d86:	202c      	movs	r0, #44	; 0x2c
 8000d88:	f7ff ff86 	bl	8000c98 <LCD_WR_REG>
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}

08000d94 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <lcd_Clear+0x70>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <lcd_Clear+0x70>)
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff ff9b 	bl	8000cfc <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	81fb      	strh	r3, [r7, #14]
 8000dca:	e011      	b.n	8000df0 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	81bb      	strh	r3, [r7, #12]
 8000dd0:	e006      	b.n	8000de0 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff6f 	bl	8000cb8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000dda:	89bb      	ldrh	r3, [r7, #12]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	81bb      	strh	r3, [r7, #12]
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <lcd_Clear+0x70>)
 8000de2:	885b      	ldrh	r3, [r3, #2]
 8000de4:	89ba      	ldrh	r2, [r7, #12]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d3f3      	bcc.n	8000dd2 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000dea:	89fb      	ldrh	r3, [r7, #14]
 8000dec:	3301      	adds	r3, #1
 8000dee:	81fb      	strh	r3, [r7, #14]
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <lcd_Clear+0x70>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	89fa      	ldrh	r2, [r7, #14]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d3e8      	bcc.n	8000dcc <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000198 	.word	0x20000198

08000e08 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4604      	mov	r4, r0
 8000e10:	4608      	mov	r0, r1
 8000e12:	4611      	mov	r1, r2
 8000e14:	461a      	mov	r2, r3
 8000e16:	4623      	mov	r3, r4
 8000e18:	80fb      	strh	r3, [r7, #6]
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80bb      	strh	r3, [r7, #4]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	807b      	strh	r3, [r7, #2]
 8000e22:	4613      	mov	r3, r2
 8000e24:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	883b      	ldrh	r3, [r7, #0]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	88b9      	ldrh	r1, [r7, #4]
 8000e34:	88f8      	ldrh	r0, [r7, #6]
 8000e36:	f7ff ff61 	bl	8000cfc <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	81fb      	strh	r3, [r7, #14]
 8000e3e:	e010      	b.n	8000e62 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	81bb      	strh	r3, [r7, #12]
 8000e44:	e006      	b.n	8000e54 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000e46:	8c3b      	ldrh	r3, [r7, #32]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff35 	bl	8000cb8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000e4e:	89bb      	ldrh	r3, [r7, #12]
 8000e50:	3301      	adds	r3, #1
 8000e52:	81bb      	strh	r3, [r7, #12]
 8000e54:	89ba      	ldrh	r2, [r7, #12]
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d3f4      	bcc.n	8000e46 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000e5c:	89fb      	ldrh	r3, [r7, #14]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	81fb      	strh	r3, [r7, #14]
 8000e62:	89fa      	ldrh	r2, [r7, #14]
 8000e64:	883b      	ldrh	r3, [r7, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d3ea      	bcc.n	8000e40 <lcd_Fill+0x38>
		}
	}
}
 8000e6a:	bf00      	nop
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd90      	pop	{r4, r7, pc}

08000e74 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	80bb      	strh	r3, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	88fa      	ldrh	r2, [r7, #6]
 8000e8a:	88b9      	ldrh	r1, [r7, #4]
 8000e8c:	88f8      	ldrh	r0, [r7, #6]
 8000e8e:	f7ff ff35 	bl	8000cfc <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff0f 	bl	8000cb8 <LCD_WR_DATA>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4604      	mov	r4, r0
 8000eac:	4608      	mov	r0, r1
 8000eae:	4611      	mov	r1, r2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4623      	mov	r3, r4
 8000eb4:	80fb      	strh	r3, [r7, #6]
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80bb      	strh	r3, [r7, #4]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	70fb      	strb	r3, [r7, #3]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000eca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ece:	085b      	lsrs	r3, r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	bf14      	ite	ne
 8000ee6:	2301      	movne	r3, #1
 8000ee8:	2300      	moveq	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	fb12 f303 	smulbb	r3, r2, r3
 8000efa:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	3b20      	subs	r3, #32
 8000f00:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	4413      	add	r3, r2
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	b29c      	uxth	r4, r3
 8000f10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	88bb      	ldrh	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	88b9      	ldrh	r1, [r7, #4]
 8000f22:	88f8      	ldrh	r0, [r7, #6]
 8000f24:	4622      	mov	r2, r4
 8000f26:	f7ff fee9 	bl	8000cfc <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	827b      	strh	r3, [r7, #18]
 8000f2e:	e07a      	b.n	8001026 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000f30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f34:	2b0c      	cmp	r3, #12
 8000f36:	d028      	beq.n	8000f8a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000f38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f3c:	2b10      	cmp	r3, #16
 8000f3e:	d108      	bne.n	8000f52 <lcd_ShowChar+0xae>
 8000f40:	78fa      	ldrb	r2, [r7, #3]
 8000f42:	8a7b      	ldrh	r3, [r7, #18]
 8000f44:	493c      	ldr	r1, [pc, #240]	; (8001038 <lcd_ShowChar+0x194>)
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	440a      	add	r2, r1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	75fb      	strb	r3, [r7, #23]
 8000f50:	e01b      	b.n	8000f8a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000f52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f56:	2b18      	cmp	r3, #24
 8000f58:	d10b      	bne.n	8000f72 <lcd_ShowChar+0xce>
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	8a79      	ldrh	r1, [r7, #18]
 8000f5e:	4837      	ldr	r0, [pc, #220]	; (800103c <lcd_ShowChar+0x198>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4403      	add	r3, r0
 8000f6a:	440b      	add	r3, r1
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	75fb      	strb	r3, [r7, #23]
 8000f70:	e00b      	b.n	8000f8a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000f72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f76:	2b20      	cmp	r3, #32
 8000f78:	d15a      	bne.n	8001030 <lcd_ShowChar+0x18c>
 8000f7a:	78fa      	ldrb	r2, [r7, #3]
 8000f7c:	8a7b      	ldrh	r3, [r7, #18]
 8000f7e:	4930      	ldr	r1, [pc, #192]	; (8001040 <lcd_ShowChar+0x19c>)
 8000f80:	0192      	lsls	r2, r2, #6
 8000f82:	440a      	add	r2, r1
 8000f84:	4413      	add	r3, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75bb      	strb	r3, [r7, #22]
 8000f8e:	e044      	b.n	800101a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000f90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d120      	bne.n	8000fda <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000f98:	7dfa      	ldrb	r2, [r7, #23]
 8000f9a:	7dbb      	ldrb	r3, [r7, #22]
 8000f9c:	fa42 f303 	asr.w	r3, r2, r3
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <lcd_ShowChar+0x10e>
 8000fa8:	883b      	ldrh	r3, [r7, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fe84 	bl	8000cb8 <LCD_WR_DATA>
 8000fb0:	e003      	b.n	8000fba <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000fb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe7f 	bl	8000cb8 <LCD_WR_DATA>
				m++;
 8000fba:	7d7b      	ldrb	r3, [r7, #21]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000fc0:	7d7b      	ldrb	r3, [r7, #21]
 8000fc2:	7bfa      	ldrb	r2, [r7, #15]
 8000fc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fc8:	fb02 f201 	mul.w	r2, r2, r1
 8000fcc:	1a9b      	subs	r3, r3, r2
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11f      	bne.n	8001014 <lcd_ShowChar+0x170>
				{
					m=0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	757b      	strb	r3, [r7, #21]
					break;
 8000fd8:	e022      	b.n	8001020 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000fda:	7dfa      	ldrb	r2, [r7, #23]
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	fa42 f303 	asr.w	r3, r2, r3
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <lcd_ShowChar+0x152>
 8000fea:	883a      	ldrh	r2, [r7, #0]
 8000fec:	88b9      	ldrh	r1, [r7, #4]
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff3f 	bl	8000e74 <lcd_DrawPoint>
				x++;
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000ffc:	88fa      	ldrh	r2, [r7, #6]
 8000ffe:	8a3b      	ldrh	r3, [r7, #16]
 8001000:	1ad2      	subs	r2, r2, r3
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	429a      	cmp	r2, r3
 8001006:	d105      	bne.n	8001014 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001008:	8a3b      	ldrh	r3, [r7, #16]
 800100a:	80fb      	strh	r3, [r7, #6]
					y++;
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	3301      	adds	r3, #1
 8001010:	80bb      	strh	r3, [r7, #4]
					break;
 8001012:	e005      	b.n	8001020 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001014:	7dbb      	ldrb	r3, [r7, #22]
 8001016:	3301      	adds	r3, #1
 8001018:	75bb      	strb	r3, [r7, #22]
 800101a:	7dbb      	ldrb	r3, [r7, #22]
 800101c:	2b07      	cmp	r3, #7
 800101e:	d9b7      	bls.n	8000f90 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001020:	8a7b      	ldrh	r3, [r7, #18]
 8001022:	3301      	adds	r3, #1
 8001024:	827b      	strh	r3, [r7, #18]
 8001026:	8a7a      	ldrh	r2, [r7, #18]
 8001028:	89bb      	ldrh	r3, [r7, #12]
 800102a:	429a      	cmp	r2, r3
 800102c:	d380      	bcc.n	8000f30 <lcd_ShowChar+0x8c>
 800102e:	e000      	b.n	8001032 <lcd_ShowChar+0x18e>
		else return;
 8001030:	bf00      	nop
				}
			}
		}
	}
}
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	08008418 	.word	0x08008418
 800103c:	08008a08 	.word	0x08008a08
 8001040:	08009bd8 	.word	0x08009bd8

08001044 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001054:	2301      	movs	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001058:	e004      	b.n	8001064 <mypow+0x20>
 800105a:	79fa      	ldrb	r2, [r7, #7]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	1e5a      	subs	r2, r3, #1
 8001068:	71ba      	strb	r2, [r7, #6]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f5      	bne.n	800105a <mypow+0x16>
	return result;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af04      	add	r7, sp, #16
 8001082:	4604      	mov	r4, r0
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4623      	mov	r3, r4
 800108c:	80fb      	strh	r3, [r7, #6]
 800108e:	4603      	mov	r3, r0
 8001090:	80bb      	strh	r3, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800109a:	2300      	movs	r3, #0
 800109c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800109e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010a2:	085b      	lsrs	r3, r3, #1
 80010a4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e059      	b.n	8001160 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80010ac:	887c      	ldrh	r4, [r7, #2]
 80010ae:	787a      	ldrb	r2, [r7, #1]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	3b01      	subs	r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4619      	mov	r1, r3
 80010bc:	200a      	movs	r0, #10
 80010be:	f7ff ffc1 	bl	8001044 <mypow>
 80010c2:	4603      	mov	r3, r0
 80010c4:	fbb4 f1f3 	udiv	r1, r4, r3
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <lcd_ShowIntNum+0xf8>)
 80010ca:	fba3 2301 	umull	r2, r3, r3, r1
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	1aca      	subs	r2, r1, r3
 80010da:	4613      	mov	r3, r2
 80010dc:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80010de:	7bbb      	ldrb	r3, [r7, #14]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d121      	bne.n	8001128 <lcd_ShowIntNum+0xac>
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	787b      	ldrb	r3, [r7, #1]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	429a      	cmp	r2, r3
 80010ec:	da1c      	bge.n	8001128 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80010ee:	7b3b      	ldrb	r3, [r7, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d117      	bne.n	8001124 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	fb12 f303 	smulbb	r3, r2, r3
 8001100:	b29a      	uxth	r2, r3
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	4413      	add	r3, r2
 8001106:	b298      	uxth	r0, r3
 8001108:	8c3a      	ldrh	r2, [r7, #32]
 800110a:	88b9      	ldrh	r1, [r7, #4]
 800110c:	2300      	movs	r3, #0
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	4613      	mov	r3, r2
 800111c:	2220      	movs	r2, #32
 800111e:	f7ff fec1 	bl	8000ea4 <lcd_ShowChar>
				continue;
 8001122:	e01a      	b.n	800115a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001124:	2301      	movs	r3, #1
 8001126:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	b29a      	uxth	r2, r3
 800112c:	7b7b      	ldrb	r3, [r7, #13]
 800112e:	b29b      	uxth	r3, r3
 8001130:	fb12 f303 	smulbb	r3, r2, r3
 8001134:	b29a      	uxth	r2, r3
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	4413      	add	r3, r2
 800113a:	b298      	uxth	r0, r3
 800113c:	7b3b      	ldrb	r3, [r7, #12]
 800113e:	3330      	adds	r3, #48	; 0x30
 8001140:	b2da      	uxtb	r2, r3
 8001142:	8c3c      	ldrh	r4, [r7, #32]
 8001144:	88b9      	ldrh	r1, [r7, #4]
 8001146:	2300      	movs	r3, #0
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	4623      	mov	r3, r4
 8001156:	f7ff fea5 	bl	8000ea4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	3301      	adds	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	787b      	ldrb	r3, [r7, #1]
 8001164:	429a      	cmp	r2, r3
 8001166:	d3a1      	bcc.n	80010ac <lcd_ShowIntNum+0x30>
	}
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	bf00      	nop
 8001174:	cccccccd 	.word	0xcccccccd

08001178 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <lcd_SetDir+0x44>)
 8001194:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001198:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <lcd_SetDir+0x44>)
 800119c:	22f0      	movs	r2, #240	; 0xf0
 800119e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80011a0:	e006      	b.n	80011b0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <lcd_SetDir+0x44>)
 80011a4:	22f0      	movs	r2, #240	; 0xf0
 80011a6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <lcd_SetDir+0x44>)
 80011aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011ae:	805a      	strh	r2, [r3, #2]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000198 	.word	0x20000198

080011c0 <lcd_init>:


void lcd_init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ca:	48aa      	ldr	r0, [pc, #680]	; (8001474 <lcd_init+0x2b4>)
 80011cc:	f002 fb88 	bl	80038e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d4:	f002 f820 	bl	8003218 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011de:	48a5      	ldr	r0, [pc, #660]	; (8001474 <lcd_init+0x2b4>)
 80011e0:	f002 fb7e 	bl	80038e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e8:	f002 f816 	bl	8003218 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff ffc3 	bl	8001178 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80011f2:	20d3      	movs	r0, #211	; 0xd3
 80011f4:	f7ff fd50 	bl	8000c98 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80011f8:	f7ff fd6e 	bl	8000cd8 <LCD_RD_DATA>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b9d      	ldr	r3, [pc, #628]	; (8001478 <lcd_init+0x2b8>)
 8001202:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001204:	f7ff fd68 	bl	8000cd8 <LCD_RD_DATA>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b9a      	ldr	r3, [pc, #616]	; (8001478 <lcd_init+0x2b8>)
 800120e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001210:	f7ff fd62 	bl	8000cd8 <LCD_RD_DATA>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b97      	ldr	r3, [pc, #604]	; (8001478 <lcd_init+0x2b8>)
 800121a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800121c:	4b96      	ldr	r3, [pc, #600]	; (8001478 <lcd_init+0x2b8>)
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b94      	ldr	r3, [pc, #592]	; (8001478 <lcd_init+0x2b8>)
 8001226:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001228:	f7ff fd56 	bl	8000cd8 <LCD_RD_DATA>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b91      	ldr	r3, [pc, #580]	; (8001478 <lcd_init+0x2b8>)
 8001232:	889b      	ldrh	r3, [r3, #4]
 8001234:	4313      	orrs	r3, r2
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b8f      	ldr	r3, [pc, #572]	; (8001478 <lcd_init+0x2b8>)
 800123a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800123c:	20cf      	movs	r0, #207	; 0xcf
 800123e:	f7ff fd2b 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff fd38 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001248:	20c1      	movs	r0, #193	; 0xc1
 800124a:	f7ff fd35 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800124e:	2030      	movs	r0, #48	; 0x30
 8001250:	f7ff fd32 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001254:	20ed      	movs	r0, #237	; 0xed
 8001256:	f7ff fd1f 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800125a:	2064      	movs	r0, #100	; 0x64
 800125c:	f7ff fd2c 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001260:	2003      	movs	r0, #3
 8001262:	f7ff fd29 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001266:	2012      	movs	r0, #18
 8001268:	f7ff fd26 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800126c:	2081      	movs	r0, #129	; 0x81
 800126e:	f7ff fd23 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001272:	20e8      	movs	r0, #232	; 0xe8
 8001274:	f7ff fd10 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001278:	2085      	movs	r0, #133	; 0x85
 800127a:	f7ff fd1d 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800127e:	2010      	movs	r0, #16
 8001280:	f7ff fd1a 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001284:	207a      	movs	r0, #122	; 0x7a
 8001286:	f7ff fd17 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800128a:	20cb      	movs	r0, #203	; 0xcb
 800128c:	f7ff fd04 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001290:	2039      	movs	r0, #57	; 0x39
 8001292:	f7ff fd11 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001296:	202c      	movs	r0, #44	; 0x2c
 8001298:	f7ff fd0e 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fd0b 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80012a2:	2034      	movs	r0, #52	; 0x34
 80012a4:	f7ff fd08 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80012a8:	2002      	movs	r0, #2
 80012aa:	f7ff fd05 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80012ae:	20f7      	movs	r0, #247	; 0xf7
 80012b0:	f7ff fcf2 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80012b4:	2020      	movs	r0, #32
 80012b6:	f7ff fcff 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80012ba:	20ea      	movs	r0, #234	; 0xea
 80012bc:	f7ff fcec 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fcf9 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff fcf6 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80012cc:	20c0      	movs	r0, #192	; 0xc0
 80012ce:	f7ff fce3 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80012d2:	201b      	movs	r0, #27
 80012d4:	f7ff fcf0 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80012d8:	20c1      	movs	r0, #193	; 0xc1
 80012da:	f7ff fcdd 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff fcea 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80012e4:	20c5      	movs	r0, #197	; 0xc5
 80012e6:	f7ff fcd7 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80012ea:	2030      	movs	r0, #48	; 0x30
 80012ec:	f7ff fce4 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80012f0:	2030      	movs	r0, #48	; 0x30
 80012f2:	f7ff fce1 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80012f6:	20c7      	movs	r0, #199	; 0xc7
 80012f8:	f7ff fcce 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80012fc:	20b7      	movs	r0, #183	; 0xb7
 80012fe:	f7ff fcdb 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001302:	2036      	movs	r0, #54	; 0x36
 8001304:	f7ff fcc8 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001308:	2008      	movs	r0, #8
 800130a:	f7ff fcd5 	bl	8000cb8 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800130e:	203a      	movs	r0, #58	; 0x3a
 8001310:	f7ff fcc2 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001314:	2055      	movs	r0, #85	; 0x55
 8001316:	f7ff fccf 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800131a:	20b1      	movs	r0, #177	; 0xb1
 800131c:	f7ff fcbc 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001320:	2000      	movs	r0, #0
 8001322:	f7ff fcc9 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001326:	201a      	movs	r0, #26
 8001328:	f7ff fcc6 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800132c:	20b6      	movs	r0, #182	; 0xb6
 800132e:	f7ff fcb3 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001332:	200a      	movs	r0, #10
 8001334:	f7ff fcc0 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001338:	20a2      	movs	r0, #162	; 0xa2
 800133a:	f7ff fcbd 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800133e:	20f2      	movs	r0, #242	; 0xf2
 8001340:	f7ff fcaa 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fcb7 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800134a:	2026      	movs	r0, #38	; 0x26
 800134c:	f7ff fca4 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff fcb1 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001356:	20e0      	movs	r0, #224	; 0xe0
 8001358:	f7ff fc9e 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800135c:	200f      	movs	r0, #15
 800135e:	f7ff fcab 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001362:	202a      	movs	r0, #42	; 0x2a
 8001364:	f7ff fca8 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001368:	2028      	movs	r0, #40	; 0x28
 800136a:	f7ff fca5 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800136e:	2008      	movs	r0, #8
 8001370:	f7ff fca2 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001374:	200e      	movs	r0, #14
 8001376:	f7ff fc9f 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800137a:	2008      	movs	r0, #8
 800137c:	f7ff fc9c 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001380:	2054      	movs	r0, #84	; 0x54
 8001382:	f7ff fc99 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001386:	20a9      	movs	r0, #169	; 0xa9
 8001388:	f7ff fc96 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800138c:	2043      	movs	r0, #67	; 0x43
 800138e:	f7ff fc93 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001392:	200a      	movs	r0, #10
 8001394:	f7ff fc90 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001398:	200f      	movs	r0, #15
 800139a:	f7ff fc8d 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fc8a 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fc87 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fc84 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fc81 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80013b6:	20e1      	movs	r0, #225	; 0xe1
 80013b8:	f7ff fc6e 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fc7b 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80013c2:	2015      	movs	r0, #21
 80013c4:	f7ff fc78 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80013c8:	2017      	movs	r0, #23
 80013ca:	f7ff fc75 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80013ce:	2007      	movs	r0, #7
 80013d0:	f7ff fc72 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80013d4:	2011      	movs	r0, #17
 80013d6:	f7ff fc6f 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80013da:	2006      	movs	r0, #6
 80013dc:	f7ff fc6c 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80013e0:	202b      	movs	r0, #43	; 0x2b
 80013e2:	f7ff fc69 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80013e6:	2056      	movs	r0, #86	; 0x56
 80013e8:	f7ff fc66 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80013ec:	203c      	movs	r0, #60	; 0x3c
 80013ee:	f7ff fc63 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80013f2:	2005      	movs	r0, #5
 80013f4:	f7ff fc60 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013f8:	2010      	movs	r0, #16
 80013fa:	f7ff fc5d 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013fe:	200f      	movs	r0, #15
 8001400:	f7ff fc5a 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001404:	203f      	movs	r0, #63	; 0x3f
 8001406:	f7ff fc57 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800140a:	203f      	movs	r0, #63	; 0x3f
 800140c:	f7ff fc54 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001410:	200f      	movs	r0, #15
 8001412:	f7ff fc51 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001416:	202b      	movs	r0, #43	; 0x2b
 8001418:	f7ff fc3e 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fc4b 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff fc48 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fc45 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800142e:	203f      	movs	r0, #63	; 0x3f
 8001430:	f7ff fc42 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001434:	202a      	movs	r0, #42	; 0x2a
 8001436:	f7ff fc2f 	bl	8000c98 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff fc3c 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff fc39 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff fc36 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800144c:	20ef      	movs	r0, #239	; 0xef
 800144e:	f7ff fc33 	bl	8000cb8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001452:	2011      	movs	r0, #17
 8001454:	f7ff fc20 	bl	8000c98 <LCD_WR_REG>
	HAL_Delay(120);
 8001458:	2078      	movs	r0, #120	; 0x78
 800145a:	f001 fedd 	bl	8003218 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800145e:	2029      	movs	r0, #41	; 0x29
 8001460:	f7ff fc1a 	bl	8000c98 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146a:	4804      	ldr	r0, [pc, #16]	; (800147c <lcd_init+0x2bc>)
 800146c:	f002 fa38 	bl	80038e0 <HAL_GPIO_WritePin>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40020800 	.word	0x40020800
 8001478:	20000198 	.word	0x20000198
 800147c:	40020000 	.word	0x40020000

08001480 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b08b      	sub	sp, #44	; 0x2c
 8001484:	af04      	add	r7, sp, #16
 8001486:	60ba      	str	r2, [r7, #8]
 8001488:	461a      	mov	r2, r3
 800148a:	4603      	mov	r3, r0
 800148c:	81fb      	strh	r3, [r7, #14]
 800148e:	460b      	mov	r3, r1
 8001490:	81bb      	strh	r3, [r7, #12]
 8001492:	4613      	mov	r3, r2
 8001494:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800149e:	e048      	b.n	8001532 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d145      	bne.n	8001532 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014a6:	89fa      	ldrh	r2, [r7, #14]
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <lcd_ShowStr+0xc4>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	1acb      	subs	r3, r1, r3
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dc3f      	bgt.n	800153c <lcd_ShowStr+0xbc>
 80014bc:	89ba      	ldrh	r2, [r7, #12]
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <lcd_ShowStr+0xc4>)
 80014c0:	885b      	ldrh	r3, [r3, #2]
 80014c2:	4619      	mov	r1, r3
 80014c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014c8:	1acb      	subs	r3, r1, r3
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dc36      	bgt.n	800153c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b80      	cmp	r3, #128	; 0x80
 80014d4:	d902      	bls.n	80014dc <lcd_ShowStr+0x5c>
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
 80014da:	e02a      	b.n	8001532 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b0d      	cmp	r3, #13
 80014e2:	d10b      	bne.n	80014fc <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80014e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	89bb      	ldrh	r3, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80014f0:	8abb      	ldrh	r3, [r7, #20]
 80014f2:	81fb      	strh	r3, [r7, #14]
					str++;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	e017      	b.n	800152c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	88fc      	ldrh	r4, [r7, #6]
 8001502:	89b9      	ldrh	r1, [r7, #12]
 8001504:	89f8      	ldrh	r0, [r7, #14]
 8001506:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	4623      	mov	r3, r4
 8001518:	f7ff fcc4 	bl	8000ea4 <lcd_ShowChar>
					x+=sizey/2;
 800151c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001520:	085b      	lsrs	r3, r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	b29a      	uxth	r2, r3
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	4413      	add	r3, r2
 800152a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1b2      	bne.n	80014a0 <lcd_ShowStr+0x20>
 800153a:	e000      	b.n	800153e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800153c:	bf00      	nop
			}
		}
	}
}
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	20000198 	.word	0x20000198

08001548 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af04      	add	r7, sp, #16
 800154e:	60ba      	str	r2, [r7, #8]
 8001550:	461a      	mov	r2, r3
 8001552:	4603      	mov	r3, r0
 8001554:	81fb      	strh	r3, [r7, #14]
 8001556:	460b      	mov	r3, r1
 8001558:	81bb      	strh	r3, [r7, #12]
 800155a:	4613      	mov	r3, r2
 800155c:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f7fe fe40 	bl	80001e4 <strlen>
 8001564:	4603      	mov	r3, r0
 8001566:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <lcd_StrCenter+0x60>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	8afb      	ldrh	r3, [r7, #22]
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	0fda      	lsrs	r2, r3, #31
 8001576:	4413      	add	r3, r2
 8001578:	105b      	asrs	r3, r3, #1
 800157a:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 800157c:	89fa      	ldrh	r2, [r7, #14]
 800157e:	8abb      	ldrh	r3, [r7, #20]
 8001580:	4413      	add	r3, r2
 8001582:	b298      	uxth	r0, r3
 8001584:	88fa      	ldrh	r2, [r7, #6]
 8001586:	89b9      	ldrh	r1, [r7, #12]
 8001588:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	8c3b      	ldrh	r3, [r7, #32]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4613      	mov	r3, r2
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f7ff ff70 	bl	8001480 <lcd_ShowStr>
}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000198 	.word	0x20000198

080015ac <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <led7_init+0x14>)
 80015b6:	f002 f993 	bl	80038e0 <HAL_GPIO_WritePin>
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021800 	.word	0x40021800

080015c4 <led7_Scan>:

void led7_Scan(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80015c8:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <led7_Scan+0x104>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b3d      	ldr	r3, [pc, #244]	; (80016c8 <led7_Scan+0x104>)
 80015d2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80015d4:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <led7_Scan+0x108>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a3d      	ldr	r2, [pc, #244]	; (80016d0 <led7_Scan+0x10c>)
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <led7_Scan+0x104>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <led7_Scan+0x104>)
 80015ee:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <led7_Scan+0x108>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d847      	bhi.n	8001688 <led7_Scan+0xc4>
 80015f8:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <led7_Scan+0x3c>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	08001611 	.word	0x08001611
 8001604:	0800162f 	.word	0x0800162f
 8001608:	0800164d 	.word	0x0800164d
 800160c:	0800166b 	.word	0x0800166b
	case 0:
		spi_buffer |= 0x00b0;
 8001610:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <led7_Scan+0x104>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001618:	b29a      	uxth	r2, r3
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <led7_Scan+0x104>)
 800161c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <led7_Scan+0x104>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <led7_Scan+0x104>)
 800162a:	801a      	strh	r2, [r3, #0]
		break;
 800162c:	e02d      	b.n	800168a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800162e:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <led7_Scan+0x104>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <led7_Scan+0x104>)
 800163a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <led7_Scan+0x104>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	f023 0320 	bic.w	r3, r3, #32
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <led7_Scan+0x104>)
 8001648:	801a      	strh	r2, [r3, #0]
		break;
 800164a:	e01e      	b.n	800168a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <led7_Scan+0x104>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <led7_Scan+0x104>)
 8001658:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <led7_Scan+0x104>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	f023 0310 	bic.w	r3, r3, #16
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <led7_Scan+0x104>)
 8001666:	801a      	strh	r2, [r3, #0]
		break;
 8001668:	e00f      	b.n	800168a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <led7_Scan+0x104>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <led7_Scan+0x104>)
 8001676:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <led7_Scan+0x104>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <led7_Scan+0x104>)
 8001684:	801a      	strh	r2, [r3, #0]
		break;
 8001686:	e000      	b.n	800168a <led7_Scan+0xc6>
	default:
		break;
 8001688:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <led7_Scan+0x108>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	425a      	negs	r2, r3
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	f002 0203 	and.w	r2, r2, #3
 800169a:	bf58      	it	pl
 800169c:	4253      	negpl	r3, r2
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <led7_Scan+0x108>)
 80016a0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	480b      	ldr	r0, [pc, #44]	; (80016d4 <led7_Scan+0x110>)
 80016a8:	f002 f91a 	bl	80038e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80016ac:	2301      	movs	r3, #1
 80016ae:	2202      	movs	r2, #2
 80016b0:	4905      	ldr	r1, [pc, #20]	; (80016c8 <led7_Scan+0x104>)
 80016b2:	4809      	ldr	r0, [pc, #36]	; (80016d8 <led7_Scan+0x114>)
 80016b4:	f003 ff19 	bl	80054ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2140      	movs	r1, #64	; 0x40
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <led7_Scan+0x110>)
 80016be:	f002 f90f 	bl	80038e0 <HAL_GPIO_WritePin>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000004 	.word	0x20000004
 80016cc:	2000009c 	.word	0x2000009c
 80016d0:	20000000 	.word	0x20000000
 80016d4:	40021800 	.word	0x40021800
 80016d8:	20000208 	.word	0x20000208

080016dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e0:	f001 fd28 	bl	8003134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e4:	f000 f824 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e8:	f7ff f968 	bl	80009bc <MX_GPIO_Init>
  MX_TIM2_Init();
 80016ec:	f001 fb88 	bl	8002e00 <MX_TIM2_Init>
  MX_SPI1_Init();
 80016f0:	f001 fa5a 	bl	8002ba8 <MX_SPI1_Init>
  MX_FSMC_Init();
 80016f4:	f7ff f892 	bl	800081c <MX_FSMC_Init>
  MX_I2C1_Init();
 80016f8:	f7ff fa58 	bl	8000bac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016fc:	f001 fc38 	bl	8002f70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001700:	f000 f880 	bl	8001804 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fb45 	bl	8000d94 <lcd_Clear>
  updateTime();
 800170a:	f000 f947 	bl	800199c <updateTime>
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 800170e:	bf00      	nop
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <main+0x50>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0fb      	beq.n	8001710 <main+0x34>
	  flag_timer2 = 0;
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <main+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800171e:	f7fe ff47 	bl	80005b0 <button_Scan>
//	   test_LedDebug();
	  ds3231_ReadTime();
 8001722:	f7ff f817 	bl	8000754 <ds3231_ReadTime>
//	   test_Uart();
    clock_mode();
 8001726:	f000 ff07 	bl	8002538 <clock_mode>
	  while(!flag_timer2);
 800172a:	e7f0      	b.n	800170e <main+0x32>
 800172c:	200000ac 	.word	0x200000ac

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2230      	movs	r2, #48	; 0x30
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f006 f988 	bl	8007a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <SystemClock_Config+0xcc>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a27      	ldr	r2, [pc, #156]	; (80017fc <SystemClock_Config+0xcc>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <SystemClock_Config+0xcc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <SystemClock_Config+0xd0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a21      	ldr	r2, [pc, #132]	; (8001800 <SystemClock_Config+0xd0>)
 800177a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <SystemClock_Config+0xd0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800178c:	2302      	movs	r3, #2
 800178e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001790:	2301      	movs	r3, #1
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001794:	2310      	movs	r3, #16
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001798:	2302      	movs	r3, #2
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800179c:	2300      	movs	r3, #0
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017a0:	2308      	movs	r3, #8
 80017a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017a4:	23a8      	movs	r3, #168	; 0xa8
 80017a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017ac:	2304      	movs	r3, #4
 80017ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b0:	f107 0320 	add.w	r3, r7, #32
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 f99b 	bl	8004af0 <HAL_RCC_OscConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017c0:	f001 f99c 	bl	8002afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c4:	230f      	movs	r3, #15
 80017c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c8:	2302      	movs	r3, #2
 80017ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80017d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2105      	movs	r1, #5
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fbfc 	bl	8004fe0 <HAL_RCC_ClockConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ee:	f001 f985 	bl	8002afc <Error_Handler>
  }
}
 80017f2:	bf00      	nop
 80017f4:	3750      	adds	r7, #80	; 0x50
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40007000 	.word	0x40007000

08001804 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2120      	movs	r1, #32
 800180c:	480e      	ldr	r0, [pc, #56]	; (8001848 <system_init+0x44>)
 800180e:	f002 f867 	bl	80038e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2140      	movs	r1, #64	; 0x40
 8001816:	480c      	ldr	r0, [pc, #48]	; (8001848 <system_init+0x44>)
 8001818:	f002 f862 	bl	80038e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2110      	movs	r1, #16
 8001820:	4809      	ldr	r0, [pc, #36]	; (8001848 <system_init+0x44>)
 8001822:	f002 f85d 	bl	80038e0 <HAL_GPIO_WritePin>
	  timer_init();
 8001826:	f001 f96f 	bl	8002b08 <timer_init>
	  led7_init();
 800182a:	f7ff febf 	bl	80015ac <led7_init>
	  button_init();
 800182e:	f7fe feb3 	bl	8000598 <button_init>
	  lcd_init();
 8001832:	f7ff fcc5 	bl	80011c0 <lcd_init>
	  ds3231_init();
 8001836:	f7fe ff27 	bl	8000688 <ds3231_init>
	  uart_init_rs232();
 800183a:	f001 fb53 	bl	8002ee4 <uart_init_rs232>
	  setTimer2(50);
 800183e:	2032      	movs	r0, #50	; 0x32
 8001840:	f001 f96c 	bl	8002b1c <setTimer2>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000

0800184c <isButtonUp>:
		uart_Rs232SendNum(ds3231_sec);
		uart_Rs232SendString("\n");
	}
}

uint8_t isButtonUp() {
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
    return (button_count[3] % 10 == 1) ? 1 : 0;
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <isButtonUp+0x30>)
 8001852:	88da      	ldrh	r2, [r3, #6]
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <isButtonUp+0x34>)
 8001856:	fba3 1302 	umull	r1, r3, r3, r2
 800185a:	08d9      	lsrs	r1, r3, #3
 800185c:	460b      	mov	r3, r1
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b29b      	uxth	r3, r3
 8001868:	2b01      	cmp	r3, #1
 800186a:	bf0c      	ite	eq
 800186c:	2301      	moveq	r3, #1
 800186e:	2300      	movne	r3, #0
 8001870:	b2db      	uxtb	r3, r3
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	200000c4 	.word	0x200000c4
 8001880:	cccccccd 	.word	0xcccccccd

08001884 <display_lcd>:
uint8_t idx = 0;
uint8_t update_arr[7];
char time_features[7][10] = {"Seconds", "Minutes", "Hours", "Days", "Dates", "Months", "Years"};
char message[30];

void display_lcd() {
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af04      	add	r7, sp, #16
    switch (currentMode) {
 800188a:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <display_lcd+0xfc>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d872      	bhi.n	8001978 <display_lcd+0xf4>
 8001892:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <display_lcd+0x14>)
 8001894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001898:	080018a9 	.word	0x080018a9
 800189c:	080018e9 	.word	0x080018e9
 80018a0:	08001919 	.word	0x08001919
 80018a4:	08001949 	.word	0x08001949
        case TIME_DISPLAY:
            lcd_Fill(0, 0, 240, 20, BLUE);
 80018a8:	231f      	movs	r3, #31
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2314      	movs	r3, #20
 80018ae:	22f0      	movs	r2, #240	; 0xf0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff faa8 	bl	8000e08 <lcd_Fill>
            lcd_StrCenter(0, 2, (uint8_t *)"This is now", RED, BLUE, 16, 1);
 80018b8:	2301      	movs	r3, #1
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	2310      	movs	r3, #16
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	231f      	movs	r3, #31
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018c8:	4a2e      	ldr	r2, [pc, #184]	; (8001984 <display_lcd+0x100>)
 80018ca:	2102      	movs	r1, #2
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fe3b 	bl	8001548 <lcd_StrCenter>
            displayTime();  // Displays the current time
 80018d2:	f000 fab3 	bl	8001e3c <displayTime>
            timerMode = 0;
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <display_lcd+0x104>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
            adjustMode = 0;
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <display_lcd+0x108>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
            checkAlarm();
 80018e2:	f000 fed7 	bl	8002694 <checkAlarm>
            break;
 80018e6:	e047      	b.n	8001978 <display_lcd+0xf4>

        case TIME_ADJUST:
            lcd_Fill(0, 0, 240, 20, BLUE);
 80018e8:	231f      	movs	r3, #31
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2314      	movs	r3, #20
 80018ee:	22f0      	movs	r2, #240	; 0xf0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fa88 	bl	8000e08 <lcd_Fill>
            lcd_StrCenter(0, 2, (uint8_t *)"Please edit the time", RED, BLUE, 16, 1);
 80018f8:	2301      	movs	r3, #1
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	2310      	movs	r3, #16
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	231f      	movs	r3, #31
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001908:	4a21      	ldr	r2, [pc, #132]	; (8001990 <display_lcd+0x10c>)
 800190a:	2102      	movs	r1, #2
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff fe1b 	bl	8001548 <lcd_StrCenter>
            adjustTime();  // Allows time adjustment
 8001912:	f000 fb11 	bl	8001f38 <adjustTime>
            break;
 8001916:	e02f      	b.n	8001978 <display_lcd+0xf4>

        case TIMER_MODE:
            lcd_Fill(0, 0, 240, 20, BLUE);
 8001918:	231f      	movs	r3, #31
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2314      	movs	r3, #20
 800191e:	22f0      	movs	r2, #240	; 0xf0
 8001920:	2100      	movs	r1, #0
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fa70 	bl	8000e08 <lcd_Fill>
            lcd_StrCenter(0, 2, (uint8_t *)"Please set timer", RED, BLUE, 16, 1);
 8001928:	2301      	movs	r3, #1
 800192a:	9302      	str	r3, [sp, #8]
 800192c:	2310      	movs	r3, #16
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	231f      	movs	r3, #31
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001938:	4a16      	ldr	r2, [pc, #88]	; (8001994 <display_lcd+0x110>)
 800193a:	2102      	movs	r1, #2
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff fe03 	bl	8001548 <lcd_StrCenter>
            setTimer();  // Sets the timer
 8001942:	f000 fc9b 	bl	800227c <setTimer>
            break;
 8001946:	e017      	b.n	8001978 <display_lcd+0xf4>
        case TIME_UPDATE:
        	lcd_Fill(0, 0, 240, 20, BLUE);
 8001948:	231f      	movs	r3, #31
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2314      	movs	r3, #20
 800194e:	22f0      	movs	r2, #240	; 0xf0
 8001950:	2100      	movs	r1, #0
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fa58 	bl	8000e08 <lcd_Fill>
			lcd_StrCenter(0, 2, (uint8_t *)"Please update the time", RED, BLUE, 16, 1);
 8001958:	2301      	movs	r3, #1
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	2310      	movs	r3, #16
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	231f      	movs	r3, #31
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001968:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <display_lcd+0x114>)
 800196a:	2102      	movs	r1, #2
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff fdeb 	bl	8001548 <lcd_StrCenter>
			update_time();  // Time_update
 8001972:	f000 fef9 	bl	8002768 <update_time>
			break;
 8001976:	bf00      	nop
    }
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200000a0 	.word	0x200000a0
 8001984:	080082e4 	.word	0x080082e4
 8001988:	200000a1 	.word	0x200000a1
 800198c:	200000a2 	.word	0x200000a2
 8001990:	080082f0 	.word	0x080082f0
 8001994:	08008308 	.word	0x08008308
 8001998:	0800831c 	.word	0x0800831c

0800199c <updateTime>:

void updateTime(){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 80019a0:	2117      	movs	r1, #23
 80019a2:	2006      	movs	r0, #6
 80019a4:	f7fe feb4 	bl	8000710 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 80019a8:	210a      	movs	r1, #10
 80019aa:	2005      	movs	r0, #5
 80019ac:	f7fe feb0 	bl	8000710 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 80019b0:	2114      	movs	r1, #20
 80019b2:	2004      	movs	r0, #4
 80019b4:	f7fe feac 	bl	8000710 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 80019b8:	2106      	movs	r1, #6
 80019ba:	2003      	movs	r0, #3
 80019bc:	f7fe fea8 	bl	8000710 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 20);
 80019c0:	2114      	movs	r1, #20
 80019c2:	2002      	movs	r0, #2
 80019c4:	f7fe fea4 	bl	8000710 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 11);
 80019c8:	210b      	movs	r1, #11
 80019ca:	2001      	movs	r0, #1
 80019cc:	f7fe fea0 	bl	8000710 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 80019d0:	2117      	movs	r1, #23
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7fe fe9c 	bl	8000710 <ds3231_Write>
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <displaySec>:
uint8_t day;
uint8_t date;
uint8_t month;
uint8_t year;

void displaySec(int num, int isBlink) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af04      	add	r7, sp, #16
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d031      	beq.n	8001a50 <displaySec+0x74>
	    counter = (counter + 1)%10;
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <displaySec+0x98>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <displaySec+0x9c>)
 80019f4:	fb83 1302 	smull	r1, r3, r3, r2
 80019f8:	1099      	asrs	r1, r3, #2
 80019fa:	17d3      	asrs	r3, r2, #31
 80019fc:	1ac9      	subs	r1, r1, r3
 80019fe:	460b      	mov	r3, r1
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	1ad1      	subs	r1, r2, r3
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <displaySec+0x98>)
 8001a0c:	701a      	strb	r2, [r3, #0]
	    if(counter < 5) {
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <displaySec+0x98>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d80d      	bhi.n	8001a32 <displaySec+0x56>
	    	lcd_ShowIntNum(150, 100, num, 2, BLACK, BLACK, 24);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	2318      	movs	r3, #24
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	2300      	movs	r3, #0
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2302      	movs	r3, #2
 8001a28:	2164      	movs	r1, #100	; 0x64
 8001a2a:	2096      	movs	r0, #150	; 0x96
 8001a2c:	f7ff fb26 	bl	800107c <lcd_ShowIntNum>
	    }
	}
	else {
		lcd_ShowIntNum(150, 100, num, 2, GREEN, BLACK, 24);
	}
}
 8001a30:	e01c      	b.n	8001a6c <displaySec+0x90>
	    	lcd_ShowIntNum(150, 100, num, 2, GREEN, BLACK, 24);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	2318      	movs	r3, #24
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2302      	movs	r3, #2
 8001a46:	2164      	movs	r1, #100	; 0x64
 8001a48:	2096      	movs	r0, #150	; 0x96
 8001a4a:	f7ff fb17 	bl	800107c <lcd_ShowIntNum>
}
 8001a4e:	e00d      	b.n	8001a6c <displaySec+0x90>
		lcd_ShowIntNum(150, 100, num, 2, GREEN, BLACK, 24);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	2318      	movs	r3, #24
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2302      	movs	r3, #2
 8001a64:	2164      	movs	r1, #100	; 0x64
 8001a66:	2096      	movs	r0, #150	; 0x96
 8001a68:	f7ff fb08 	bl	800107c <lcd_ShowIntNum>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200000a3 	.word	0x200000a3
 8001a78:	66666667 	.word	0x66666667

08001a7c <displayMin>:

void displayMin(int num, int isBlink) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af04      	add	r7, sp, #16
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d031      	beq.n	8001af0 <displayMin+0x74>
		counter = (counter + 1)%10;
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <displayMin+0x98>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <displayMin+0x9c>)
 8001a94:	fb83 1302 	smull	r1, r3, r3, r2
 8001a98:	1099      	asrs	r1, r3, #2
 8001a9a:	17d3      	asrs	r3, r2, #31
 8001a9c:	1ac9      	subs	r1, r1, r3
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	1ad1      	subs	r1, r2, r3
 8001aa8:	b2ca      	uxtb	r2, r1
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <displayMin+0x98>)
 8001aac:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <displayMin+0x98>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d80d      	bhi.n	8001ad2 <displayMin+0x56>
			lcd_ShowIntNum(110, 100, num, 2, BLACK, BLACK, 24);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	2318      	movs	r3, #24
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	2164      	movs	r1, #100	; 0x64
 8001aca:	206e      	movs	r0, #110	; 0x6e
 8001acc:	f7ff fad6 	bl	800107c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(110, 100, num, 2, GREEN, BLACK, 24);
	}
}
 8001ad0:	e01c      	b.n	8001b0c <displayMin+0x90>
			lcd_ShowIntNum(110, 100, num, 2, GREEN, BLACK, 24);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	2318      	movs	r3, #24
 8001ad8:	9302      	str	r3, [sp, #8]
 8001ada:	2300      	movs	r3, #0
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	2164      	movs	r1, #100	; 0x64
 8001ae8:	206e      	movs	r0, #110	; 0x6e
 8001aea:	f7ff fac7 	bl	800107c <lcd_ShowIntNum>
}
 8001aee:	e00d      	b.n	8001b0c <displayMin+0x90>
		lcd_ShowIntNum(110, 100, num, 2, GREEN, BLACK, 24);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	2318      	movs	r3, #24
 8001af6:	9302      	str	r3, [sp, #8]
 8001af8:	2300      	movs	r3, #0
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2302      	movs	r3, #2
 8001b04:	2164      	movs	r1, #100	; 0x64
 8001b06:	206e      	movs	r0, #110	; 0x6e
 8001b08:	f7ff fab8 	bl	800107c <lcd_ShowIntNum>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200000a3 	.word	0x200000a3
 8001b18:	66666667 	.word	0x66666667

08001b1c <displayHour>:

void displayHour(int num, int isBlink) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af04      	add	r7, sp, #16
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d031      	beq.n	8001b90 <displayHour+0x74>
		counter = (counter + 1)%10;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <displayHour+0x98>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <displayHour+0x9c>)
 8001b34:	fb83 1302 	smull	r1, r3, r3, r2
 8001b38:	1099      	asrs	r1, r3, #2
 8001b3a:	17d3      	asrs	r3, r2, #31
 8001b3c:	1ac9      	subs	r1, r1, r3
 8001b3e:	460b      	mov	r3, r1
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	1ad1      	subs	r1, r2, r3
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <displayHour+0x98>)
 8001b4c:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <displayHour+0x98>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d80d      	bhi.n	8001b72 <displayHour+0x56>
			lcd_ShowIntNum(70, 100, num, 2, BLACK, BLACK, 24);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	2318      	movs	r3, #24
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	2300      	movs	r3, #0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2302      	movs	r3, #2
 8001b68:	2164      	movs	r1, #100	; 0x64
 8001b6a:	2046      	movs	r0, #70	; 0x46
 8001b6c:	f7ff fa86 	bl	800107c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(70, 100, num, 2, GREEN, BLACK, 24);
	}
}
 8001b70:	e01c      	b.n	8001bac <displayHour+0x90>
			lcd_ShowIntNum(70, 100, num, 2, GREEN, BLACK, 24);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	2318      	movs	r3, #24
 8001b78:	9302      	str	r3, [sp, #8]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9301      	str	r3, [sp, #4]
 8001b7e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2302      	movs	r3, #2
 8001b86:	2164      	movs	r1, #100	; 0x64
 8001b88:	2046      	movs	r0, #70	; 0x46
 8001b8a:	f7ff fa77 	bl	800107c <lcd_ShowIntNum>
}
 8001b8e:	e00d      	b.n	8001bac <displayHour+0x90>
		lcd_ShowIntNum(70, 100, num, 2, GREEN, BLACK, 24);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	2318      	movs	r3, #24
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	2164      	movs	r1, #100	; 0x64
 8001ba6:	2046      	movs	r0, #70	; 0x46
 8001ba8:	f7ff fa68 	bl	800107c <lcd_ShowIntNum>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200000a3 	.word	0x200000a3
 8001bb8:	66666667 	.word	0x66666667

08001bbc <displayDay>:


void displayDay(int num, int isBlink) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af04      	add	r7, sp, #16
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d031      	beq.n	8001c30 <displayDay+0x74>
		counter = (counter + 1)%10;
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <displayDay+0x98>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <displayDay+0x9c>)
 8001bd4:	fb83 1302 	smull	r1, r3, r3, r2
 8001bd8:	1099      	asrs	r1, r3, #2
 8001bda:	17d3      	asrs	r3, r2, #31
 8001bdc:	1ac9      	subs	r1, r1, r3
 8001bde:	460b      	mov	r3, r1
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	1ad1      	subs	r1, r2, r3
 8001be8:	b2ca      	uxtb	r2, r1
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <displayDay+0x98>)
 8001bec:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <displayDay+0x98>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d80d      	bhi.n	8001c12 <displayDay+0x56>
			lcd_ShowIntNum(20, 130, num, 2, BLACK, BLACK, 24);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	2318      	movs	r3, #24
 8001bfc:	9302      	str	r3, [sp, #8]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2300      	movs	r3, #0
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2302      	movs	r3, #2
 8001c08:	2182      	movs	r1, #130	; 0x82
 8001c0a:	2014      	movs	r0, #20
 8001c0c:	f7ff fa36 	bl	800107c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(20, 130, num, 2, YELLOW, BLACK, 24);
	}
}
 8001c10:	e01c      	b.n	8001c4c <displayDay+0x90>
			lcd_ShowIntNum(20, 130, num, 2, YELLOW, BLACK, 24);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	2318      	movs	r3, #24
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2302      	movs	r3, #2
 8001c26:	2182      	movs	r1, #130	; 0x82
 8001c28:	2014      	movs	r0, #20
 8001c2a:	f7ff fa27 	bl	800107c <lcd_ShowIntNum>
}
 8001c2e:	e00d      	b.n	8001c4c <displayDay+0x90>
		lcd_ShowIntNum(20, 130, num, 2, YELLOW, BLACK, 24);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	2318      	movs	r3, #24
 8001c36:	9302      	str	r3, [sp, #8]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2302      	movs	r3, #2
 8001c44:	2182      	movs	r1, #130	; 0x82
 8001c46:	2014      	movs	r0, #20
 8001c48:	f7ff fa18 	bl	800107c <lcd_ShowIntNum>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200000a3 	.word	0x200000a3
 8001c58:	66666667 	.word	0x66666667

08001c5c <displayDate>:

void displayDate(int num, int isBlink) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af04      	add	r7, sp, #16
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d031      	beq.n	8001cd0 <displayDate+0x74>
		counter = (counter + 1)%10;
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <displayDate+0x98>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <displayDate+0x9c>)
 8001c74:	fb83 1302 	smull	r1, r3, r3, r2
 8001c78:	1099      	asrs	r1, r3, #2
 8001c7a:	17d3      	asrs	r3, r2, #31
 8001c7c:	1ac9      	subs	r1, r1, r3
 8001c7e:	460b      	mov	r3, r1
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	1ad1      	subs	r1, r2, r3
 8001c88:	b2ca      	uxtb	r2, r1
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <displayDate+0x98>)
 8001c8c:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <displayDate+0x98>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d80d      	bhi.n	8001cb2 <displayDate+0x56>
			lcd_ShowIntNum(70, 130, num, 2, BLACK, BLACK, 24);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	2318      	movs	r3, #24
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	2182      	movs	r1, #130	; 0x82
 8001caa:	2046      	movs	r0, #70	; 0x46
 8001cac:	f7ff f9e6 	bl	800107c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
	}
}
 8001cb0:	e01c      	b.n	8001cec <displayDate+0x90>
			lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	2318      	movs	r3, #24
 8001cb8:	9302      	str	r3, [sp, #8]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	2182      	movs	r1, #130	; 0x82
 8001cc8:	2046      	movs	r0, #70	; 0x46
 8001cca:	f7ff f9d7 	bl	800107c <lcd_ShowIntNum>
}
 8001cce:	e00d      	b.n	8001cec <displayDate+0x90>
		lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	2318      	movs	r3, #24
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	2182      	movs	r1, #130	; 0x82
 8001ce6:	2046      	movs	r0, #70	; 0x46
 8001ce8:	f7ff f9c8 	bl	800107c <lcd_ShowIntNum>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200000a3 	.word	0x200000a3
 8001cf8:	66666667 	.word	0x66666667

08001cfc <displayMonth>:

void displayMonth(int num, int isBlink) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af04      	add	r7, sp, #16
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d031      	beq.n	8001d70 <displayMonth+0x74>
		counter = (counter + 1)%10;
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <displayMonth+0x98>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <displayMonth+0x9c>)
 8001d14:	fb83 1302 	smull	r1, r3, r3, r2
 8001d18:	1099      	asrs	r1, r3, #2
 8001d1a:	17d3      	asrs	r3, r2, #31
 8001d1c:	1ac9      	subs	r1, r1, r3
 8001d1e:	460b      	mov	r3, r1
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	1ad1      	subs	r1, r2, r3
 8001d28:	b2ca      	uxtb	r2, r1
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <displayMonth+0x98>)
 8001d2c:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <displayMonth+0x98>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d80d      	bhi.n	8001d52 <displayMonth+0x56>
			lcd_ShowIntNum(110, 130, num, 2, BLACK, BLACK, 24);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	2318      	movs	r3, #24
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	2300      	movs	r3, #0
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2302      	movs	r3, #2
 8001d48:	2182      	movs	r1, #130	; 0x82
 8001d4a:	206e      	movs	r0, #110	; 0x6e
 8001d4c:	f7ff f996 	bl	800107c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(110, 130, num, 2, YELLOW, BLACK, 24);
	}
}
 8001d50:	e01c      	b.n	8001d8c <displayMonth+0x90>
			lcd_ShowIntNum(110, 130, num, 2, YELLOW, BLACK, 24);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	2318      	movs	r3, #24
 8001d58:	9302      	str	r3, [sp, #8]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2302      	movs	r3, #2
 8001d66:	2182      	movs	r1, #130	; 0x82
 8001d68:	206e      	movs	r0, #110	; 0x6e
 8001d6a:	f7ff f987 	bl	800107c <lcd_ShowIntNum>
}
 8001d6e:	e00d      	b.n	8001d8c <displayMonth+0x90>
		lcd_ShowIntNum(110, 130, num, 2, YELLOW, BLACK, 24);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	2318      	movs	r3, #24
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2302      	movs	r3, #2
 8001d84:	2182      	movs	r1, #130	; 0x82
 8001d86:	206e      	movs	r0, #110	; 0x6e
 8001d88:	f7ff f978 	bl	800107c <lcd_ShowIntNum>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200000a3 	.word	0x200000a3
 8001d98:	66666667 	.word	0x66666667

08001d9c <displayYear>:

void displayYear(int num, int isBlink) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af04      	add	r7, sp, #16
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d031      	beq.n	8001e10 <displayYear+0x74>
		counter = (counter + 1)%10;
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <displayYear+0x98>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <displayYear+0x9c>)
 8001db4:	fb83 1302 	smull	r1, r3, r3, r2
 8001db8:	1099      	asrs	r1, r3, #2
 8001dba:	17d3      	asrs	r3, r2, #31
 8001dbc:	1ac9      	subs	r1, r1, r3
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	1ad1      	subs	r1, r2, r3
 8001dc8:	b2ca      	uxtb	r2, r1
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <displayYear+0x98>)
 8001dcc:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <displayYear+0x98>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d80d      	bhi.n	8001df2 <displayYear+0x56>
			lcd_ShowIntNum(150, 130, num, 2, BLACK, BLACK, 24);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	2318      	movs	r3, #24
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	2300      	movs	r3, #0
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	2300      	movs	r3, #0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2302      	movs	r3, #2
 8001de8:	2182      	movs	r1, #130	; 0x82
 8001dea:	2096      	movs	r0, #150	; 0x96
 8001dec:	f7ff f946 	bl	800107c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(150, 130, num, 2, YELLOW, BLACK, 24);
	}
}
 8001df0:	e01c      	b.n	8001e2c <displayYear+0x90>
			lcd_ShowIntNum(150, 130, num, 2, YELLOW, BLACK, 24);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	2318      	movs	r3, #24
 8001df8:	9302      	str	r3, [sp, #8]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2302      	movs	r3, #2
 8001e06:	2182      	movs	r1, #130	; 0x82
 8001e08:	2096      	movs	r0, #150	; 0x96
 8001e0a:	f7ff f937 	bl	800107c <lcd_ShowIntNum>
}
 8001e0e:	e00d      	b.n	8001e2c <displayYear+0x90>
		lcd_ShowIntNum(150, 130, num, 2, YELLOW, BLACK, 24);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	2318      	movs	r3, #24
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2302      	movs	r3, #2
 8001e24:	2182      	movs	r1, #130	; 0x82
 8001e26:	2096      	movs	r0, #150	; 0x96
 8001e28:	f7ff f928 	bl	800107c <lcd_ShowIntNum>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200000a3 	.word	0x200000a3
 8001e38:	66666667 	.word	0x66666667

08001e3c <displayTime>:
	lcd_ShowIntNum(110, 130, month, 2, YELLOW, BLACK, 24);
	lcd_ShowIntNum(150, 130, year, 2, YELLOW, BLACK, 24);
}


void displayTime(){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001e42:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <displayTime+0xe0>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	2318      	movs	r3, #24
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2302      	movs	r3, #2
 8001e58:	2164      	movs	r1, #100	; 0x64
 8001e5a:	2046      	movs	r0, #70	; 0x46
 8001e5c:	f7ff f90e 	bl	800107c <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001e60:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <displayTime+0xe4>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	2318      	movs	r3, #24
 8001e68:	9302      	str	r3, [sp, #8]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2302      	movs	r3, #2
 8001e76:	2164      	movs	r1, #100	; 0x64
 8001e78:	206e      	movs	r0, #110	; 0x6e
 8001e7a:	f7ff f8ff 	bl	800107c <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <displayTime+0xe8>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	2318      	movs	r3, #24
 8001e86:	9302      	str	r3, [sp, #8]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2302      	movs	r3, #2
 8001e94:	2164      	movs	r1, #100	; 0x64
 8001e96:	2096      	movs	r0, #150	; 0x96
 8001e98:	f7ff f8f0 	bl	800107c <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <displayTime+0xec>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	2318      	movs	r3, #24
 8001ea4:	9302      	str	r3, [sp, #8]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	2182      	movs	r1, #130	; 0x82
 8001eb4:	2014      	movs	r0, #20
 8001eb6:	f7ff f8e1 	bl	800107c <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <displayTime+0xf0>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	2318      	movs	r3, #24
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2302      	movs	r3, #2
 8001ed0:	2182      	movs	r1, #130	; 0x82
 8001ed2:	2046      	movs	r0, #70	; 0x46
 8001ed4:	f7ff f8d2 	bl	800107c <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <displayTime+0xf4>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	2318      	movs	r3, #24
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2302      	movs	r3, #2
 8001eee:	2182      	movs	r1, #130	; 0x82
 8001ef0:	206e      	movs	r0, #110	; 0x6e
 8001ef2:	f7ff f8c3 	bl	800107c <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <displayTime+0xf8>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	2318      	movs	r3, #24
 8001efe:	9302      	str	r3, [sp, #8]
 8001f00:	2300      	movs	r3, #0
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	2182      	movs	r1, #130	; 0x82
 8001f0e:	2096      	movs	r0, #150	; 0x96
 8001f10:	f7ff f8b4 	bl	800107c <lcd_ShowIntNum>
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200000e9 	.word	0x200000e9
 8001f20:	200000e6 	.word	0x200000e6
 8001f24:	200000e4 	.word	0x200000e4
 8001f28:	200000e8 	.word	0x200000e8
 8001f2c:	200000e7 	.word	0x200000e7
 8001f30:	200000ea 	.word	0x200000ea
 8001f34:	200000e5 	.word	0x200000e5

08001f38 <adjustTime>:

void adjustTime() {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	if (flag_timer2) {
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <adjustTime+0x16c>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <adjustTime+0x18>
		counter++;
 8001f44:	4b58      	ldr	r3, [pc, #352]	; (80020a8 <adjustTime+0x170>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <adjustTime+0x170>)
 8001f4e:	701a      	strb	r2, [r3, #0]
	}
    if (isButtonUp() && flag == 0) {
 8001f50:	f7ff fc7c 	bl	800184c <isButtonUp>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80d2 	beq.w	8002100 <adjustTime+0x1c8>
 8001f5c:	4b53      	ldr	r3, [pc, #332]	; (80020ac <adjustTime+0x174>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f040 80cd 	bne.w	8002100 <adjustTime+0x1c8>
    	if (adjustMode == 0) {
 8001f66:	4b52      	ldr	r3, [pc, #328]	; (80020b0 <adjustTime+0x178>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d112      	bne.n	8001f94 <adjustTime+0x5c>
			sec = (sec + 1) % 60;
 8001f6e:	4b51      	ldr	r3, [pc, #324]	; (80020b4 <adjustTime+0x17c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <adjustTime+0x180>)
 8001f76:	fb83 1302 	smull	r1, r3, r3, r2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	1159      	asrs	r1, r3, #5
 8001f7e:	17d3      	asrs	r3, r2, #31
 8001f80:	1ac9      	subs	r1, r1, r3
 8001f82:	460b      	mov	r3, r1
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	1a5b      	subs	r3, r3, r1
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	1ad1      	subs	r1, r2, r3
 8001f8c:	b2ca      	uxtb	r2, r1
 8001f8e:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <adjustTime+0x17c>)
 8001f90:	701a      	strb	r2, [r3, #0]
 8001f92:	e0b5      	b.n	8002100 <adjustTime+0x1c8>
        } else if (adjustMode == 1) {
 8001f94:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <adjustTime+0x178>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d112      	bne.n	8001fc2 <adjustTime+0x8a>
            min = (min + 1) % 60;
 8001f9c:	4b47      	ldr	r3, [pc, #284]	; (80020bc <adjustTime+0x184>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	4b45      	ldr	r3, [pc, #276]	; (80020b8 <adjustTime+0x180>)
 8001fa4:	fb83 1302 	smull	r1, r3, r3, r2
 8001fa8:	4413      	add	r3, r2
 8001faa:	1159      	asrs	r1, r3, #5
 8001fac:	17d3      	asrs	r3, r2, #31
 8001fae:	1ac9      	subs	r1, r1, r3
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a5b      	subs	r3, r3, r1
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	1ad1      	subs	r1, r2, r3
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <adjustTime+0x184>)
 8001fbe:	701a      	strb	r2, [r3, #0]
 8001fc0:	e09e      	b.n	8002100 <adjustTime+0x1c8>
        } else if (adjustMode == 2) {
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <adjustTime+0x178>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d111      	bne.n	8001fee <adjustTime+0xb6>
            hours = (hours + 1) % 24;
 8001fca:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <adjustTime+0x188>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <adjustTime+0x18c>)
 8001fd2:	fb83 1302 	smull	r1, r3, r3, r2
 8001fd6:	1099      	asrs	r1, r3, #2
 8001fd8:	17d3      	asrs	r3, r2, #31
 8001fda:	1ac9      	subs	r1, r1, r3
 8001fdc:	460b      	mov	r3, r1
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	440b      	add	r3, r1
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	1ad1      	subs	r1, r2, r3
 8001fe6:	b2ca      	uxtb	r2, r1
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <adjustTime+0x188>)
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	e088      	b.n	8002100 <adjustTime+0x1c8>
        } else if (adjustMode == 3) {
 8001fee:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <adjustTime+0x178>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d139      	bne.n	800206a <adjustTime+0x132>
        	date = (date + 1) % 30;
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <adjustTime+0x190>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <adjustTime+0x180>)
 8001ffe:	fb83 1302 	smull	r1, r3, r3, r2
 8002002:	4413      	add	r3, r2
 8002004:	1119      	asrs	r1, r3, #4
 8002006:	17d3      	asrs	r3, r2, #31
 8002008:	1ac9      	subs	r1, r1, r3
 800200a:	460b      	mov	r3, r1
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a5b      	subs	r3, r3, r1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	1ad1      	subs	r1, r2, r3
 8002014:	b2ca      	uxtb	r2, r1
 8002016:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <adjustTime+0x190>)
 8002018:	701a      	strb	r2, [r3, #0]
			if (!date) {
 800201a:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <adjustTime+0x190>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <adjustTime+0xf0>
				date = 30;}
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <adjustTime+0x190>)
 8002024:	221e      	movs	r2, #30
 8002026:	701a      	strb	r2, [r3, #0]
			day = (day + 1) % 7;
 8002028:	4b28      	ldr	r3, [pc, #160]	; (80020cc <adjustTime+0x194>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <adjustTime+0x198>)
 8002030:	fb83 1302 	smull	r1, r3, r3, r2
 8002034:	4413      	add	r3, r2
 8002036:	1099      	asrs	r1, r3, #2
 8002038:	17d3      	asrs	r3, r2, #31
 800203a:	1ac9      	subs	r1, r1, r3
 800203c:	460b      	mov	r3, r1
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	1a5b      	subs	r3, r3, r1
 8002042:	1ad1      	subs	r1, r2, r3
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	4b21      	ldr	r3, [pc, #132]	; (80020cc <adjustTime+0x194>)
 8002048:	701a      	strb	r2, [r3, #0]
			if (day == 0) {
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <adjustTime+0x194>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <adjustTime+0x122>
				day = 7;}
 8002052:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <adjustTime+0x194>)
 8002054:	2207      	movs	r2, #7
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e052      	b.n	8002100 <adjustTime+0x1c8>
			else if (day == 1) {
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <adjustTime+0x194>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d14e      	bne.n	8002100 <adjustTime+0x1c8>
				day = 8;}
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <adjustTime+0x194>)
 8002064:	2208      	movs	r2, #8
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	e04a      	b.n	8002100 <adjustTime+0x1c8>
        } else if (adjustMode == 4) {
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <adjustTime+0x178>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d132      	bne.n	80020d8 <adjustTime+0x1a0>
        	month = (month + 1) % 12;
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <adjustTime+0x19c>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <adjustTime+0x18c>)
 800207a:	fb83 1302 	smull	r1, r3, r3, r2
 800207e:	1059      	asrs	r1, r3, #1
 8002080:	17d3      	asrs	r3, r2, #31
 8002082:	1ac9      	subs	r1, r1, r3
 8002084:	460b      	mov	r3, r1
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	440b      	add	r3, r1
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	1ad1      	subs	r1, r2, r3
 800208e:	b2ca      	uxtb	r2, r1
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <adjustTime+0x19c>)
 8002092:	701a      	strb	r2, [r3, #0]
        	if (!month) {
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <adjustTime+0x19c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d131      	bne.n	8002100 <adjustTime+0x1c8>
        		month = 12;
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <adjustTime+0x19c>)
 800209e:	220c      	movs	r2, #12
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e02d      	b.n	8002100 <adjustTime+0x1c8>
 80020a4:	200000ac 	.word	0x200000ac
 80020a8:	200000a3 	.word	0x200000a3
 80020ac:	200001d6 	.word	0x200001d6
 80020b0:	200000a2 	.word	0x200000a2
 80020b4:	20000202 	.word	0x20000202
 80020b8:	88888889 	.word	0x88888889
 80020bc:	20000200 	.word	0x20000200
 80020c0:	20000206 	.word	0x20000206
 80020c4:	2aaaaaab 	.word	0x2aaaaaab
 80020c8:	20000205 	.word	0x20000205
 80020cc:	20000204 	.word	0x20000204
 80020d0:	92492493 	.word	0x92492493
 80020d4:	200001d7 	.word	0x200001d7
        	}
        }else if (adjustMode == 5) {
 80020d8:	4b5c      	ldr	r3, [pc, #368]	; (800224c <adjustTime+0x314>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d10f      	bne.n	8002100 <adjustTime+0x1c8>
        	year = (year + 1) % 100;
 80020e0:	4b5b      	ldr	r3, [pc, #364]	; (8002250 <adjustTime+0x318>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a5b      	ldr	r2, [pc, #364]	; (8002254 <adjustTime+0x31c>)
 80020e8:	fb82 1203 	smull	r1, r2, r2, r3
 80020ec:	1151      	asrs	r1, r2, #5
 80020ee:	17da      	asrs	r2, r3, #31
 80020f0:	1a8a      	subs	r2, r1, r2
 80020f2:	2164      	movs	r1, #100	; 0x64
 80020f4:	fb01 f202 	mul.w	r2, r1, r2
 80020f8:	1a9a      	subs	r2, r3, r2
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	4b54      	ldr	r3, [pc, #336]	; (8002250 <adjustTime+0x318>)
 80020fe:	701a      	strb	r2, [r3, #0]
        }

    }


    if (button_count[12] == 1) {  // Button to cycle fields
 8002100:	4b55      	ldr	r3, [pc, #340]	; (8002258 <adjustTime+0x320>)
 8002102:	8b1b      	ldrh	r3, [r3, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d13c      	bne.n	8002182 <adjustTime+0x24a>
		adjustMode = (adjustMode + 1) % 6;  // Cycle through hours, minutes, seconds
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <adjustTime+0x314>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	4b53      	ldr	r3, [pc, #332]	; (800225c <adjustTime+0x324>)
 8002110:	fb83 3102 	smull	r3, r1, r3, r2
 8002114:	17d3      	asrs	r3, r2, #31
 8002116:	1ac9      	subs	r1, r1, r3
 8002118:	460b      	mov	r3, r1
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	440b      	add	r3, r1
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	1ad1      	subs	r1, r2, r3
 8002122:	b2ca      	uxtb	r2, r1
 8002124:	4b49      	ldr	r3, [pc, #292]	; (800224c <adjustTime+0x314>)
 8002126:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8002128:	4b4d      	ldr	r3, [pc, #308]	; (8002260 <adjustTime+0x328>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
		ds3231_Write(ADDRESS_YEAR, year);
 800212e:	4b48      	ldr	r3, [pc, #288]	; (8002250 <adjustTime+0x318>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	2006      	movs	r0, #6
 8002136:	f7fe faeb 	bl	8000710 <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, month);
 800213a:	4b4a      	ldr	r3, [pc, #296]	; (8002264 <adjustTime+0x32c>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	2005      	movs	r0, #5
 8002142:	f7fe fae5 	bl	8000710 <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, date);
 8002146:	4b48      	ldr	r3, [pc, #288]	; (8002268 <adjustTime+0x330>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	4619      	mov	r1, r3
 800214c:	2004      	movs	r0, #4
 800214e:	f7fe fadf 	bl	8000710 <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, day);
 8002152:	4b46      	ldr	r3, [pc, #280]	; (800226c <adjustTime+0x334>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	2003      	movs	r0, #3
 800215a:	f7fe fad9 	bl	8000710 <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, hours);
 800215e:	4b44      	ldr	r3, [pc, #272]	; (8002270 <adjustTime+0x338>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4619      	mov	r1, r3
 8002164:	2002      	movs	r0, #2
 8002166:	f7fe fad3 	bl	8000710 <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, min);
 800216a:	4b42      	ldr	r3, [pc, #264]	; (8002274 <adjustTime+0x33c>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4619      	mov	r1, r3
 8002170:	2001      	movs	r0, #1
 8002172:	f7fe facd 	bl	8000710 <ds3231_Write>
		ds3231_Write(ADDRESS_SEC, sec);
 8002176:	4b40      	ldr	r3, [pc, #256]	; (8002278 <adjustTime+0x340>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	4619      	mov	r1, r3
 800217c:	2000      	movs	r0, #0
 800217e:	f7fe fac7 	bl	8000710 <ds3231_Write>

	}
	displaySec(sec, adjustMode == 0);
 8002182:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <adjustTime+0x340>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	4b30      	ldr	r3, [pc, #192]	; (800224c <adjustTime+0x314>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	4619      	mov	r1, r3
 8002198:	4610      	mov	r0, r2
 800219a:	f7ff fc1f 	bl	80019dc <displaySec>
	displayMin(min, adjustMode == 1);
 800219e:	4b35      	ldr	r3, [pc, #212]	; (8002274 <adjustTime+0x33c>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b29      	ldr	r3, [pc, #164]	; (800224c <adjustTime+0x314>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4619      	mov	r1, r3
 80021b4:	4610      	mov	r0, r2
 80021b6:	f7ff fc61 	bl	8001a7c <displayMin>
	displayHour(hours, adjustMode == 2);
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <adjustTime+0x338>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <adjustTime+0x314>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f7ff fca3 	bl	8001b1c <displayHour>
	displayDay(day, adjustMode == 3);
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <adjustTime+0x334>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <adjustTime+0x314>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4619      	mov	r1, r3
 80021ec:	4610      	mov	r0, r2
 80021ee:	f7ff fce5 	bl	8001bbc <displayDay>
	displayDate(date, adjustMode == 3);
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <adjustTime+0x330>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <adjustTime+0x314>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	4619      	mov	r1, r3
 8002208:	4610      	mov	r0, r2
 800220a:	f7ff fd27 	bl	8001c5c <displayDate>
	displayMonth(month, adjustMode == 4);
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <adjustTime+0x32c>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <adjustTime+0x314>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b04      	cmp	r3, #4
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4619      	mov	r1, r3
 8002224:	4610      	mov	r0, r2
 8002226:	f7ff fd69 	bl	8001cfc <displayMonth>
	displayYear(year, adjustMode == 5);
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <adjustTime+0x318>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <adjustTime+0x314>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b05      	cmp	r3, #5
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	4619      	mov	r1, r3
 8002240:	4610      	mov	r0, r2
 8002242:	f7ff fdab 	bl	8001d9c <displayYear>

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200000a2 	.word	0x200000a2
 8002250:	20000201 	.word	0x20000201
 8002254:	51eb851f 	.word	0x51eb851f
 8002258:	200000c4 	.word	0x200000c4
 800225c:	2aaaaaab 	.word	0x2aaaaaab
 8002260:	200000a3 	.word	0x200000a3
 8002264:	200001d7 	.word	0x200001d7
 8002268:	20000205 	.word	0x20000205
 800226c:	20000204 	.word	0x20000204
 8002270:	20000206 	.word	0x20000206
 8002274:	20000200 	.word	0x20000200
 8002278:	20000202 	.word	0x20000202

0800227c <setTimer>:
uint8_t timer_day = 0;
uint8_t timer_date = 0;
uint8_t timer_month = 0;
uint8_t timer_year = 0;

void setTimer() {
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	if (flag_timer2){
 8002280:	4b9e      	ldr	r3, [pc, #632]	; (80024fc <setTimer+0x280>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <setTimer+0x18>
		counter++;
 8002288:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <setTimer+0x284>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b9b      	ldr	r3, [pc, #620]	; (8002500 <setTimer+0x284>)
 8002292:	701a      	strb	r2, [r3, #0]
	}
    if (isButtonUp()) {
 8002294:	f7ff fada 	bl	800184c <isButtonUp>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80b3 	beq.w	8002406 <setTimer+0x18a>
    	if (timerMode == 0) {
 80022a0:	4b98      	ldr	r3, [pc, #608]	; (8002504 <setTimer+0x288>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d112      	bne.n	80022ce <setTimer+0x52>
    		timer_seconds = (timer_seconds + 1) % 60;
 80022a8:	4b97      	ldr	r3, [pc, #604]	; (8002508 <setTimer+0x28c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	4b97      	ldr	r3, [pc, #604]	; (800250c <setTimer+0x290>)
 80022b0:	fb83 1302 	smull	r1, r3, r3, r2
 80022b4:	4413      	add	r3, r2
 80022b6:	1159      	asrs	r1, r3, #5
 80022b8:	17d3      	asrs	r3, r2, #31
 80022ba:	1ac9      	subs	r1, r1, r3
 80022bc:	460b      	mov	r3, r1
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	1a5b      	subs	r3, r3, r1
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	1ad1      	subs	r1, r2, r3
 80022c6:	b2ca      	uxtb	r2, r1
 80022c8:	4b8f      	ldr	r3, [pc, #572]	; (8002508 <setTimer+0x28c>)
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e09b      	b.n	8002406 <setTimer+0x18a>
		} else if (timerMode == 1) {
 80022ce:	4b8d      	ldr	r3, [pc, #564]	; (8002504 <setTimer+0x288>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d112      	bne.n	80022fc <setTimer+0x80>
			timer_minutes = (timer_minutes + 1) % 60;
 80022d6:	4b8e      	ldr	r3, [pc, #568]	; (8002510 <setTimer+0x294>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	4b8b      	ldr	r3, [pc, #556]	; (800250c <setTimer+0x290>)
 80022de:	fb83 1302 	smull	r1, r3, r3, r2
 80022e2:	4413      	add	r3, r2
 80022e4:	1159      	asrs	r1, r3, #5
 80022e6:	17d3      	asrs	r3, r2, #31
 80022e8:	1ac9      	subs	r1, r1, r3
 80022ea:	460b      	mov	r3, r1
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a5b      	subs	r3, r3, r1
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	1ad1      	subs	r1, r2, r3
 80022f4:	b2ca      	uxtb	r2, r1
 80022f6:	4b86      	ldr	r3, [pc, #536]	; (8002510 <setTimer+0x294>)
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e084      	b.n	8002406 <setTimer+0x18a>
		} else if (timerMode == 2) {
 80022fc:	4b81      	ldr	r3, [pc, #516]	; (8002504 <setTimer+0x288>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d111      	bne.n	8002328 <setTimer+0xac>
			timer_hours = (timer_hours + 1) % 24;
 8002304:	4b83      	ldr	r3, [pc, #524]	; (8002514 <setTimer+0x298>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	4b83      	ldr	r3, [pc, #524]	; (8002518 <setTimer+0x29c>)
 800230c:	fb83 1302 	smull	r1, r3, r3, r2
 8002310:	1099      	asrs	r1, r3, #2
 8002312:	17d3      	asrs	r3, r2, #31
 8002314:	1ac9      	subs	r1, r1, r3
 8002316:	460b      	mov	r3, r1
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	440b      	add	r3, r1
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	1ad1      	subs	r1, r2, r3
 8002320:	b2ca      	uxtb	r2, r1
 8002322:	4b7c      	ldr	r3, [pc, #496]	; (8002514 <setTimer+0x298>)
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e06e      	b.n	8002406 <setTimer+0x18a>
		} else if (timerMode == 3) {
 8002328:	4b76      	ldr	r3, [pc, #472]	; (8002504 <setTimer+0x288>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d139      	bne.n	80023a4 <setTimer+0x128>
			timer_date = (timer_date + 1) % 30;
 8002330:	4b7a      	ldr	r3, [pc, #488]	; (800251c <setTimer+0x2a0>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	4b75      	ldr	r3, [pc, #468]	; (800250c <setTimer+0x290>)
 8002338:	fb83 1302 	smull	r1, r3, r3, r2
 800233c:	4413      	add	r3, r2
 800233e:	1119      	asrs	r1, r3, #4
 8002340:	17d3      	asrs	r3, r2, #31
 8002342:	1ac9      	subs	r1, r1, r3
 8002344:	460b      	mov	r3, r1
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a5b      	subs	r3, r3, r1
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	1ad1      	subs	r1, r2, r3
 800234e:	b2ca      	uxtb	r2, r1
 8002350:	4b72      	ldr	r3, [pc, #456]	; (800251c <setTimer+0x2a0>)
 8002352:	701a      	strb	r2, [r3, #0]
			if (!timer_date) {
 8002354:	4b71      	ldr	r3, [pc, #452]	; (800251c <setTimer+0x2a0>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <setTimer+0xe6>
				timer_date = 30;}
 800235c:	4b6f      	ldr	r3, [pc, #444]	; (800251c <setTimer+0x2a0>)
 800235e:	221e      	movs	r2, #30
 8002360:	701a      	strb	r2, [r3, #0]
			timer_day = (timer_day + 1) % 7;
 8002362:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <setTimer+0x2a4>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	4b6e      	ldr	r3, [pc, #440]	; (8002524 <setTimer+0x2a8>)
 800236a:	fb83 1302 	smull	r1, r3, r3, r2
 800236e:	4413      	add	r3, r2
 8002370:	1099      	asrs	r1, r3, #2
 8002372:	17d3      	asrs	r3, r2, #31
 8002374:	1ac9      	subs	r1, r1, r3
 8002376:	460b      	mov	r3, r1
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a5b      	subs	r3, r3, r1
 800237c:	1ad1      	subs	r1, r2, r3
 800237e:	b2ca      	uxtb	r2, r1
 8002380:	4b67      	ldr	r3, [pc, #412]	; (8002520 <setTimer+0x2a4>)
 8002382:	701a      	strb	r2, [r3, #0]
			if (timer_day == 0) {
 8002384:	4b66      	ldr	r3, [pc, #408]	; (8002520 <setTimer+0x2a4>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d103      	bne.n	8002394 <setTimer+0x118>
				timer_day = 7;}
 800238c:	4b64      	ldr	r3, [pc, #400]	; (8002520 <setTimer+0x2a4>)
 800238e:	2207      	movs	r2, #7
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e038      	b.n	8002406 <setTimer+0x18a>
			else if (timer_day == 1) {
 8002394:	4b62      	ldr	r3, [pc, #392]	; (8002520 <setTimer+0x2a4>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d134      	bne.n	8002406 <setTimer+0x18a>
				timer_day = 8;}
 800239c:	4b60      	ldr	r3, [pc, #384]	; (8002520 <setTimer+0x2a4>)
 800239e:	2208      	movs	r2, #8
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	e030      	b.n	8002406 <setTimer+0x18a>
		} else if (timerMode == 4) {
 80023a4:	4b57      	ldr	r3, [pc, #348]	; (8002504 <setTimer+0x288>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d118      	bne.n	80023de <setTimer+0x162>
			timer_month = (timer_month + 1) % 12;
 80023ac:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <setTimer+0x2ac>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	4b59      	ldr	r3, [pc, #356]	; (8002518 <setTimer+0x29c>)
 80023b4:	fb83 1302 	smull	r1, r3, r3, r2
 80023b8:	1059      	asrs	r1, r3, #1
 80023ba:	17d3      	asrs	r3, r2, #31
 80023bc:	1ac9      	subs	r1, r1, r3
 80023be:	460b      	mov	r3, r1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	440b      	add	r3, r1
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	1ad1      	subs	r1, r2, r3
 80023c8:	b2ca      	uxtb	r2, r1
 80023ca:	4b57      	ldr	r3, [pc, #348]	; (8002528 <setTimer+0x2ac>)
 80023cc:	701a      	strb	r2, [r3, #0]
			if (!timer_month) {
 80023ce:	4b56      	ldr	r3, [pc, #344]	; (8002528 <setTimer+0x2ac>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d117      	bne.n	8002406 <setTimer+0x18a>
				timer_month = 12;}
 80023d6:	4b54      	ldr	r3, [pc, #336]	; (8002528 <setTimer+0x2ac>)
 80023d8:	220c      	movs	r2, #12
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e013      	b.n	8002406 <setTimer+0x18a>
		}else if (timerMode == 5) {
 80023de:	4b49      	ldr	r3, [pc, #292]	; (8002504 <setTimer+0x288>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d10f      	bne.n	8002406 <setTimer+0x18a>
			timer_year = (timer_year + 1) % 100;
 80023e6:	4b51      	ldr	r3, [pc, #324]	; (800252c <setTimer+0x2b0>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	3301      	adds	r3, #1
 80023ec:	4a50      	ldr	r2, [pc, #320]	; (8002530 <setTimer+0x2b4>)
 80023ee:	fb82 1203 	smull	r1, r2, r2, r3
 80023f2:	1151      	asrs	r1, r2, #5
 80023f4:	17da      	asrs	r2, r3, #31
 80023f6:	1a8a      	subs	r2, r1, r2
 80023f8:	2164      	movs	r1, #100	; 0x64
 80023fa:	fb01 f202 	mul.w	r2, r1, r2
 80023fe:	1a9a      	subs	r2, r3, r2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <setTimer+0x2b0>)
 8002404:	701a      	strb	r2, [r3, #0]
    }
    }


    if (button_count[12] == 1) {  // Button to cycle fields
 8002406:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <setTimer+0x2b8>)
 8002408:	8b1b      	ldrh	r3, [r3, #24]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d112      	bne.n	8002434 <setTimer+0x1b8>
    	timerMode = (timerMode + 1) % 6;  // Cycle through hours, minutes, seconds
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <setTimer+0x288>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	4b40      	ldr	r3, [pc, #256]	; (8002518 <setTimer+0x29c>)
 8002416:	fb83 3102 	smull	r3, r1, r3, r2
 800241a:	17d3      	asrs	r3, r2, #31
 800241c:	1ac9      	subs	r1, r1, r3
 800241e:	460b      	mov	r3, r1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	440b      	add	r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	1ad1      	subs	r1, r2, r3
 8002428:	b2ca      	uxtb	r2, r1
 800242a:	4b36      	ldr	r3, [pc, #216]	; (8002504 <setTimer+0x288>)
 800242c:	701a      	strb	r2, [r3, #0]
    	counter = 0;
 800242e:	4b34      	ldr	r3, [pc, #208]	; (8002500 <setTimer+0x284>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]

	}

    displaySec(timer_seconds, timerMode == 0);
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <setTimer+0x28c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b32      	ldr	r3, [pc, #200]	; (8002504 <setTimer+0x288>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4619      	mov	r1, r3
 800244a:	4610      	mov	r0, r2
 800244c:	f7ff fac6 	bl	80019dc <displaySec>
	displayMin(timer_minutes, timerMode == 1);
 8002450:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <setTimer+0x294>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <setTimer+0x288>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	bf0c      	ite	eq
 800245e:	2301      	moveq	r3, #1
 8002460:	2300      	movne	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f7ff fb08 	bl	8001a7c <displayMin>
	displayHour(timer_hours, timerMode == 2);
 800246c:	4b29      	ldr	r3, [pc, #164]	; (8002514 <setTimer+0x298>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <setTimer+0x288>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b02      	cmp	r3, #2
 8002478:	bf0c      	ite	eq
 800247a:	2301      	moveq	r3, #1
 800247c:	2300      	movne	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f7ff fb4a 	bl	8001b1c <displayHour>
	displayDay(timer_day, timerMode == 3);
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <setTimer+0x2a4>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <setTimer+0x288>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b03      	cmp	r3, #3
 8002494:	bf0c      	ite	eq
 8002496:	2301      	moveq	r3, #1
 8002498:	2300      	movne	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f7ff fb8c 	bl	8001bbc <displayDay>
	displayDate(timer_date, timerMode == 3);
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <setTimer+0x2a0>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <setTimer+0x288>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f7ff fbce 	bl	8001c5c <displayDate>
	displayMonth(timer_month, timerMode == 4);
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <setTimer+0x2ac>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <setTimer+0x288>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf0c      	ite	eq
 80024ce:	2301      	moveq	r3, #1
 80024d0:	2300      	movne	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f7ff fc10 	bl	8001cfc <displayMonth>
	displayYear(timer_year, timerMode == 5);
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <setTimer+0x2b0>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <setTimer+0x288>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	bf0c      	ite	eq
 80024ea:	2301      	moveq	r3, #1
 80024ec:	2300      	movne	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f7ff fc52 	bl	8001d9c <displayYear>
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200000ac 	.word	0x200000ac
 8002500:	200000a3 	.word	0x200000a3
 8002504:	200000a1 	.word	0x200000a1
 8002508:	200000a7 	.word	0x200000a7
 800250c:	88888889 	.word	0x88888889
 8002510:	200000a6 	.word	0x200000a6
 8002514:	200000a5 	.word	0x200000a5
 8002518:	2aaaaaab 	.word	0x2aaaaaab
 800251c:	200000a9 	.word	0x200000a9
 8002520:	200000a8 	.word	0x200000a8
 8002524:	92492493 	.word	0x92492493
 8002528:	200000aa 	.word	0x200000aa
 800252c:	200000ab 	.word	0x200000ab
 8002530:	51eb851f 	.word	0x51eb851f
 8002534:	200000c4 	.word	0x200000c4

08002538 <clock_mode>:

uint8_t UART_flag, cnt_uart;
void clock_mode(uint32_t currentMillis) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    if (button_count[0] == 1 ) {
 8002540:	4b38      	ldr	r3, [pc, #224]	; (8002624 <clock_mode+0xec>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d167      	bne.n	8002618 <clock_mode+0xe0>
    	currentMode = (currentMode + 1) % 4;
 8002548:	4b37      	ldr	r3, [pc, #220]	; (8002628 <clock_mode+0xf0>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	425a      	negs	r2, r3
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	f002 0203 	and.w	r2, r2, #3
 8002558:	bf58      	it	pl
 800255a:	4253      	negpl	r3, r2
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b32      	ldr	r3, [pc, #200]	; (8002628 <clock_mode+0xf0>)
 8002560:	701a      	strb	r2, [r3, #0]
    	if (currentMode == TIME_ADJUST){
 8002562:	4b31      	ldr	r3, [pc, #196]	; (8002628 <clock_mode+0xf0>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d13d      	bne.n	80025e6 <clock_mode+0xae>
        counter = 0;
 800256a:	4b30      	ldr	r3, [pc, #192]	; (800262c <clock_mode+0xf4>)
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
    		ds3231_ReadTime();
 8002570:	f7fe f8f0 	bl	8000754 <ds3231_ReadTime>
    		hours = ds3231_hours;
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <clock_mode+0xf8>)
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <clock_mode+0xfc>)
 800257a:	701a      	strb	r2, [r3, #0]
			min = ds3231_min;
 800257c:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <clock_mode+0x100>)
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	4b2e      	ldr	r3, [pc, #184]	; (800263c <clock_mode+0x104>)
 8002582:	701a      	strb	r2, [r3, #0]
			sec = ds3231_sec;
 8002584:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <clock_mode+0x108>)
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <clock_mode+0x10c>)
 800258a:	701a      	strb	r2, [r3, #0]
			day = ds3231_day;
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <clock_mode+0x110>)
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	4b2e      	ldr	r3, [pc, #184]	; (800264c <clock_mode+0x114>)
 8002592:	701a      	strb	r2, [r3, #0]
			date = ds3231_date;
 8002594:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <clock_mode+0x118>)
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <clock_mode+0x11c>)
 800259a:	701a      	strb	r2, [r3, #0]
			month = ds3231_month;
 800259c:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <clock_mode+0x120>)
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <clock_mode+0x124>)
 80025a2:	701a      	strb	r2, [r3, #0]
			year = ds3231_year;
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <clock_mode+0x128>)
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <clock_mode+0x12c>)
 80025aa:	701a      	strb	r2, [r3, #0]
			timer_hours = ds3231_hours;
 80025ac:	4b20      	ldr	r3, [pc, #128]	; (8002630 <clock_mode+0xf8>)
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <clock_mode+0x130>)
 80025b2:	701a      	strb	r2, [r3, #0]
			timer_minutes = ds3231_min;
 80025b4:	4b20      	ldr	r3, [pc, #128]	; (8002638 <clock_mode+0x100>)
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	4b2c      	ldr	r3, [pc, #176]	; (800266c <clock_mode+0x134>)
 80025ba:	701a      	strb	r2, [r3, #0]
			timer_seconds = ds3231_sec;
 80025bc:	4b20      	ldr	r3, [pc, #128]	; (8002640 <clock_mode+0x108>)
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <clock_mode+0x138>)
 80025c2:	701a      	strb	r2, [r3, #0]
			timer_day = ds3231_day;
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <clock_mode+0x110>)
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <clock_mode+0x13c>)
 80025ca:	701a      	strb	r2, [r3, #0]
			timer_date = ds3231_date;
 80025cc:	4b20      	ldr	r3, [pc, #128]	; (8002650 <clock_mode+0x118>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	4b29      	ldr	r3, [pc, #164]	; (8002678 <clock_mode+0x140>)
 80025d2:	701a      	strb	r2, [r3, #0]
			timer_month = ds3231_month;
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <clock_mode+0x120>)
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <clock_mode+0x144>)
 80025da:	701a      	strb	r2, [r3, #0]
			timer_year = ds3231_year;
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <clock_mode+0x128>)
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <clock_mode+0x148>)
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e018      	b.n	8002618 <clock_mode+0xe0>

    	}
    	else if (currentMode == TIMER_MODE){
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <clock_mode+0xf0>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d103      	bne.n	80025f6 <clock_mode+0xbe>
    		counter = 0;
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <clock_mode+0xf4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	e010      	b.n	8002618 <clock_mode+0xe0>
    	}
      else if (currentMode == TIME_UPDATE){
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <clock_mode+0xf0>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d10c      	bne.n	8002618 <clock_mode+0xe0>
    	UART_flag = 0;
 80025fe:	4b21      	ldr	r3, [pc, #132]	; (8002684 <clock_mode+0x14c>)
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
    	cnt_uart = 0;
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <clock_mode+0x150>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
        cnt = 3 * 200;
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <clock_mode+0x154>)
 800260c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002610:	801a      	strh	r2, [r3, #0]
        idx = 0;
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <clock_mode+0x158>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
      }
    }
    display_lcd();
 8002618:	f7ff f934 	bl	8001884 <display_lcd>

}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200000c4 	.word	0x200000c4
 8002628:	200000a0 	.word	0x200000a0
 800262c:	200000a3 	.word	0x200000a3
 8002630:	200000e9 	.word	0x200000e9
 8002634:	20000206 	.word	0x20000206
 8002638:	200000e6 	.word	0x200000e6
 800263c:	20000200 	.word	0x20000200
 8002640:	200000e4 	.word	0x200000e4
 8002644:	20000202 	.word	0x20000202
 8002648:	200000e8 	.word	0x200000e8
 800264c:	20000204 	.word	0x20000204
 8002650:	200000e7 	.word	0x200000e7
 8002654:	20000205 	.word	0x20000205
 8002658:	200000ea 	.word	0x200000ea
 800265c:	200001d7 	.word	0x200001d7
 8002660:	200000e5 	.word	0x200000e5
 8002664:	20000201 	.word	0x20000201
 8002668:	200000a5 	.word	0x200000a5
 800266c:	200000a6 	.word	0x200000a6
 8002670:	200000a7 	.word	0x200000a7
 8002674:	200000a8 	.word	0x200000a8
 8002678:	200000a9 	.word	0x200000a9
 800267c:	200000aa 	.word	0x200000aa
 8002680:	200000ab 	.word	0x200000ab
 8002684:	20000203 	.word	0x20000203
 8002688:	200001ff 	.word	0x200001ff
 800268c:	200001d4 	.word	0x200001d4
 8002690:	200000a4 	.word	0x200000a4

08002694 <checkAlarm>:

// Alarm checking function for Timer Mode
void checkAlarm() {
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af04      	add	r7, sp, #16
    if(ds3231_year == timer_year &&
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <checkAlarm+0x98>)
 800269c:	781a      	ldrb	r2, [r3, #0]
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <checkAlarm+0x9c>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d13f      	bne.n	8002726 <checkAlarm+0x92>
       ds3231_month == timer_month &&
 80026a6:	4b23      	ldr	r3, [pc, #140]	; (8002734 <checkAlarm+0xa0>)
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <checkAlarm+0xa4>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
    if(ds3231_year == timer_year &&
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d139      	bne.n	8002726 <checkAlarm+0x92>
	   ds3231_date == timer_date &&
 80026b2:	4b22      	ldr	r3, [pc, #136]	; (800273c <checkAlarm+0xa8>)
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <checkAlarm+0xac>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
       ds3231_month == timer_month &&
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d133      	bne.n	8002726 <checkAlarm+0x92>
	   ds3231_day == timer_day &&
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <checkAlarm+0xb0>)
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	4b21      	ldr	r3, [pc, #132]	; (8002748 <checkAlarm+0xb4>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
	   ds3231_date == timer_date &&
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d12d      	bne.n	8002726 <checkAlarm+0x92>
       ds3231_hours == timer_hours &&
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <checkAlarm+0xb8>)
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <checkAlarm+0xbc>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
	   ds3231_day == timer_day &&
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d127      	bne.n	8002726 <checkAlarm+0x92>
	   ds3231_min == timer_minutes &&
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <checkAlarm+0xc0>)
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <checkAlarm+0xc4>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
       ds3231_hours == timer_hours &&
 80026de:	429a      	cmp	r2, r3
 80026e0:	d121      	bne.n	8002726 <checkAlarm+0x92>
	   ds3231_sec >= timer_seconds &&
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <checkAlarm+0xc8>)
 80026e4:	781a      	ldrb	r2, [r3, #0]
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <checkAlarm+0xcc>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
	   ds3231_min == timer_minutes &&
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d31b      	bcc.n	8002726 <checkAlarm+0x92>
	   ds3231_sec < timer_seconds+5){
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <checkAlarm+0xcc>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4a19      	ldr	r2, [pc, #100]	; (800275c <checkAlarm+0xc8>)
 80026f6:	7812      	ldrb	r2, [r2, #0]
	   ds3231_sec >= timer_seconds &&
 80026f8:	4293      	cmp	r3, r2
 80026fa:	db14      	blt.n	8002726 <checkAlarm+0x92>
    	lcd_Fill(0, 0, 240, 20, BLUE);
 80026fc:	231f      	movs	r3, #31
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2314      	movs	r3, #20
 8002702:	22f0      	movs	r2, #240	; 0xf0
 8002704:	2100      	movs	r1, #0
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe fb7e 	bl	8000e08 <lcd_Fill>
		lcd_StrCenter(0, 2, (uint8_t *)"Alarm !!!!!!!!!!! ", RED, BLUE, 16, 1);
 800270c:	2301      	movs	r3, #1
 800270e:	9302      	str	r3, [sp, #8]
 8002710:	2310      	movs	r3, #16
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	231f      	movs	r3, #31
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800271c:	4a11      	ldr	r2, [pc, #68]	; (8002764 <checkAlarm+0xd0>)
 800271e:	2102      	movs	r1, #2
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe ff11 	bl	8001548 <lcd_StrCenter>
    }
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200000e5 	.word	0x200000e5
 8002730:	200000ab 	.word	0x200000ab
 8002734:	200000ea 	.word	0x200000ea
 8002738:	200000aa 	.word	0x200000aa
 800273c:	200000e7 	.word	0x200000e7
 8002740:	200000a9 	.word	0x200000a9
 8002744:	200000e8 	.word	0x200000e8
 8002748:	200000a8 	.word	0x200000a8
 800274c:	200000e9 	.word	0x200000e9
 8002750:	200000a5 	.word	0x200000a5
 8002754:	200000e6 	.word	0x200000e6
 8002758:	200000a6 	.word	0x200000a6
 800275c:	200000e4 	.word	0x200000e4
 8002760:	200000a7 	.word	0x200000a7
 8002764:	08008334 	.word	0x08008334

08002768 <update_time>:

//uint8_t str2dec(uint8_t)

void update_time() {
 8002768:	b5b0      	push	{r4, r5, r7, lr}
 800276a:	b0a0      	sub	sp, #128	; 0x80
 800276c:	af04      	add	r7, sp, #16
uint8_t update_arr[7];
uint8_t val;
char time_features[7][10] = {"Seconds", "Minutes", "Hours", "Days", "Dates", "Months", "Years"};
 800276e:	4a9a      	ldr	r2, [pc, #616]	; (80029d8 <update_time+0x270>)
 8002770:	f107 0320 	add.w	r3, r7, #32
 8002774:	4611      	mov	r1, r2
 8002776:	2246      	movs	r2, #70	; 0x46
 8002778:	4618      	mov	r0, r3
 800277a:	f005 f95d 	bl	8007a38 <memcpy>
char message[30];

	while (1) {
        if (flag_timer2) {
 800277e:	4b97      	ldr	r3, [pc, #604]	; (80029dc <update_time+0x274>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d062      	beq.n	800284c <update_time+0xe4>
             flag_timer2 = 0;
 8002786:	4b95      	ldr	r3, [pc, #596]	; (80029dc <update_time+0x274>)
 8002788:	2200      	movs	r2, #0
 800278a:	801a      	strh	r2, [r3, #0]
            if (cnt % 200 == 0) {
 800278c:	4b94      	ldr	r3, [pc, #592]	; (80029e0 <update_time+0x278>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	4a94      	ldr	r2, [pc, #592]	; (80029e4 <update_time+0x27c>)
 8002792:	fba2 1203 	umull	r1, r2, r2, r3
 8002796:	0992      	lsrs	r2, r2, #6
 8002798:	21c8      	movs	r1, #200	; 0xc8
 800279a:	fb01 f202 	mul.w	r2, r1, r2
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d12f      	bne.n	8002806 <update_time+0x9e>
                // Concatenate "Updating " with the current time feature
                sprintf(message, "Updating %s ...", time_features[idx]);
 80027a6:	4b90      	ldr	r3, [pc, #576]	; (80029e8 <update_time+0x280>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	4619      	mov	r1, r3
 80027ac:	f107 0220 	add.w	r2, r7, #32
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	441a      	add	r2, r3
 80027ba:	463b      	mov	r3, r7
 80027bc:	498b      	ldr	r1, [pc, #556]	; (80029ec <update_time+0x284>)
 80027be:	4618      	mov	r0, r3
 80027c0:	f005 f950 	bl	8007a64 <siprintf>
                lcd_ShowStr(20, 30, (uint8_t *)message, WHITE, RED, 24, 0);
 80027c4:	463a      	mov	r2, r7
 80027c6:	2300      	movs	r3, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	2318      	movs	r3, #24
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d8:	211e      	movs	r1, #30
 80027da:	2014      	movs	r0, #20
 80027dc:	f7fe fe50 	bl	8001480 <lcd_ShowStr>

                // Send the time feature with "Updating" message via UART
                sprintf(message, "\r\n%s: ", time_features[idx]);
 80027e0:	4b81      	ldr	r3, [pc, #516]	; (80029e8 <update_time+0x280>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	f107 0220 	add.w	r2, r7, #32
 80027ea:	460b      	mov	r3, r1
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	441a      	add	r2, r3
 80027f4:	463b      	mov	r3, r7
 80027f6:	497e      	ldr	r1, [pc, #504]	; (80029f0 <update_time+0x288>)
 80027f8:	4618      	mov	r0, r3
 80027fa:	f005 f933 	bl	8007a64 <siprintf>
                uart_Rs232SendString((uint8_t *)message);
 80027fe:	463b      	mov	r3, r7
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fb7d 	bl	8002f00 <uart_Rs232SendString>
            }
            cnt--;
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <update_time+0x278>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	4b74      	ldr	r3, [pc, #464]	; (80029e0 <update_time+0x278>)
 8002810:	801a      	strh	r2, [r3, #0]
            if (cnt == 0) {
 8002812:	4b73      	ldr	r3, [pc, #460]	; (80029e0 <update_time+0x278>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d118      	bne.n	800284c <update_time+0xe4>
            	strcpy(message, "                   ");
 800281a:	463b      	mov	r3, r7
 800281c:	4a75      	ldr	r2, [pc, #468]	; (80029f4 <update_time+0x28c>)
 800281e:	461c      	mov	r4, r3
 8002820:	4615      	mov	r5, r2
 8002822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002826:	682b      	ldr	r3, [r5, #0]
 8002828:	6023      	str	r3, [r4, #0]
				lcd_ShowStr(20, 30, message, WHITE, BLACK, 24, 0);
 800282a:	463a      	mov	r2, r7
 800282c:	2300      	movs	r3, #0
 800282e:	9302      	str	r3, [sp, #8]
 8002830:	2318      	movs	r3, #24
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	2300      	movs	r3, #0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800283c:	211e      	movs	r1, #30
 800283e:	2014      	movs	r0, #20
 8002840:	f7fe fe1e 	bl	8001480 <lcd_ShowStr>
                currentMode = TIME_DISPLAY;
 8002844:	4b6c      	ldr	r3, [pc, #432]	; (80029f8 <update_time+0x290>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
                break;
 800284a:	e148      	b.n	8002ade <update_time+0x376>
            }

        }

            if (UART_flag) {
 800284c:	4b6b      	ldr	r3, [pc, #428]	; (80029fc <update_time+0x294>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80fb 	beq.w	8002a4c <update_time+0x2e4>
            	UART_flag = 0;
 8002856:	4b69      	ldr	r3, [pc, #420]	; (80029fc <update_time+0x294>)
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
                if ((strcmp(time_features[idx], "Seconds") == 0 && (rx_msg < 0 || rx_msg > 60)) ||
 800285c:	4b62      	ldr	r3, [pc, #392]	; (80029e8 <update_time+0x280>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	f107 0220 	add.w	r2, r7, #32
 8002866:	460b      	mov	r3, r1
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	4963      	ldr	r1, [pc, #396]	; (8002a00 <update_time+0x298>)
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fcac 	bl	80001d0 <strcmp>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d104      	bne.n	8002888 <update_time+0x120>
 800287e:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <update_time+0x29c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b3c      	cmp	r3, #60	; 0x3c
 8002884:	f200 808a 	bhi.w	800299c <update_time+0x234>
                    (strcmp(time_features[idx], "Minutes") == 0 && (rx_msg < 0 || rx_msg > 60)) ||
 8002888:	4b57      	ldr	r3, [pc, #348]	; (80029e8 <update_time+0x280>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	f107 0220 	add.w	r2, r7, #32
 8002892:	460b      	mov	r3, r1
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	495a      	ldr	r1, [pc, #360]	; (8002a08 <update_time+0x2a0>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fc96 	bl	80001d0 <strcmp>
 80028a4:	4603      	mov	r3, r0
                if ((strcmp(time_features[idx], "Seconds") == 0 && (rx_msg < 0 || rx_msg > 60)) ||
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <update_time+0x14a>
                    (strcmp(time_features[idx], "Minutes") == 0 && (rx_msg < 0 || rx_msg > 60)) ||
 80028aa:	4b56      	ldr	r3, [pc, #344]	; (8002a04 <update_time+0x29c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b3c      	cmp	r3, #60	; 0x3c
 80028b0:	d874      	bhi.n	800299c <update_time+0x234>
                    (strcmp(time_features[idx], "Hours") == 0 && (rx_msg < 0 || rx_msg > 24)) ||
 80028b2:	4b4d      	ldr	r3, [pc, #308]	; (80029e8 <update_time+0x280>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	f107 0220 	add.w	r2, r7, #32
 80028bc:	460b      	mov	r3, r1
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	4951      	ldr	r1, [pc, #324]	; (8002a0c <update_time+0x2a4>)
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fc81 	bl	80001d0 <strcmp>
 80028ce:	4603      	mov	r3, r0
                    (strcmp(time_features[idx], "Minutes") == 0 && (rx_msg < 0 || rx_msg > 60)) ||
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d103      	bne.n	80028dc <update_time+0x174>
                    (strcmp(time_features[idx], "Hours") == 0 && (rx_msg < 0 || rx_msg > 24)) ||
 80028d4:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <update_time+0x29c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b18      	cmp	r3, #24
 80028da:	d85f      	bhi.n	800299c <update_time+0x234>
                    (strcmp(time_features[idx], "Days") == 0 && (rx_msg < 1 || rx_msg > 8)) ||
 80028dc:	4b42      	ldr	r3, [pc, #264]	; (80029e8 <update_time+0x280>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f107 0220 	add.w	r2, r7, #32
 80028e6:	460b      	mov	r3, r1
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	4947      	ldr	r1, [pc, #284]	; (8002a10 <update_time+0x2a8>)
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fc6c 	bl	80001d0 <strcmp>
 80028f8:	4603      	mov	r3, r0
                    (strcmp(time_features[idx], "Hours") == 0 && (rx_msg < 0 || rx_msg > 24)) ||
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d107      	bne.n	800290e <update_time+0x1a6>
                    (strcmp(time_features[idx], "Days") == 0 && (rx_msg < 1 || rx_msg > 8)) ||
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <update_time+0x29c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d04a      	beq.n	800299c <update_time+0x234>
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <update_time+0x29c>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b08      	cmp	r3, #8
 800290c:	d846      	bhi.n	800299c <update_time+0x234>
                    (strcmp(time_features[idx], "Dates") == 0 && (rx_msg < 1 || rx_msg > 30)) ||
 800290e:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <update_time+0x280>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	f107 0220 	add.w	r2, r7, #32
 8002918:	460b      	mov	r3, r1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	493c      	ldr	r1, [pc, #240]	; (8002a14 <update_time+0x2ac>)
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fc53 	bl	80001d0 <strcmp>
 800292a:	4603      	mov	r3, r0
                    (strcmp(time_features[idx], "Days") == 0 && (rx_msg < 1 || rx_msg > 8)) ||
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <update_time+0x1d8>
                    (strcmp(time_features[idx], "Dates") == 0 && (rx_msg < 1 || rx_msg > 30)) ||
 8002930:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <update_time+0x29c>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d031      	beq.n	800299c <update_time+0x234>
 8002938:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <update_time+0x29c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b1e      	cmp	r3, #30
 800293e:	d82d      	bhi.n	800299c <update_time+0x234>
                    (strcmp(time_features[idx], "Months") == 0 && (rx_msg < 1 || rx_msg > 12)) ||
 8002940:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <update_time+0x280>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f107 0220 	add.w	r2, r7, #32
 800294a:	460b      	mov	r3, r1
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	4930      	ldr	r1, [pc, #192]	; (8002a18 <update_time+0x2b0>)
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fc3a 	bl	80001d0 <strcmp>
 800295c:	4603      	mov	r3, r0
                    (strcmp(time_features[idx], "Dates") == 0 && (rx_msg < 1 || rx_msg > 30)) ||
 800295e:	2b00      	cmp	r3, #0
 8002960:	d107      	bne.n	8002972 <update_time+0x20a>
                    (strcmp(time_features[idx], "Months") == 0 && (rx_msg < 1 || rx_msg > 12)) ||
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <update_time+0x29c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d018      	beq.n	800299c <update_time+0x234>
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <update_time+0x29c>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d814      	bhi.n	800299c <update_time+0x234>
                    (strcmp(time_features[idx], "Years") == 0 && (rx_msg < 0 || rx_msg > 99))) {
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <update_time+0x280>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	f107 0220 	add.w	r2, r7, #32
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	4925      	ldr	r1, [pc, #148]	; (8002a1c <update_time+0x2b4>)
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fc21 	bl	80001d0 <strcmp>
 800298e:	4603      	mov	r3, r0
                    (strcmp(time_features[idx], "Months") == 0 && (rx_msg < 1 || rx_msg > 12)) ||
 8002990:	2b00      	cmp	r3, #0
 8002992:	d147      	bne.n	8002a24 <update_time+0x2bc>
                    (strcmp(time_features[idx], "Years") == 0 && (rx_msg < 0 || rx_msg > 99))) {
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <update_time+0x29c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b63      	cmp	r3, #99	; 0x63
 800299a:	d943      	bls.n	8002a24 <update_time+0x2bc>

                        // Display and send an "Invalid value" message
                        strcpy(message, "Invalid value\r\n");
 800299c:	463b      	mov	r3, r7
 800299e:	4a20      	ldr	r2, [pc, #128]	; (8002a20 <update_time+0x2b8>)
 80029a0:	461c      	mov	r4, r3
 80029a2:	4613      	mov	r3, r2
 80029a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//                      lcd_ShowStr(20, 30, message, WHITE, RED, 24, 0);
                        lcd_StrCenter(0, 2, (uint8_t *)message, RED, BLUE, 16, 1);
 80029aa:	463a      	mov	r2, r7
 80029ac:	2301      	movs	r3, #1
 80029ae:	9302      	str	r3, [sp, #8]
 80029b0:	2310      	movs	r3, #16
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	231f      	movs	r3, #31
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029bc:	2102      	movs	r1, #2
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fe fdc2 	bl	8001548 <lcd_StrCenter>
                        uart_Rs232SendString(message);
 80029c4:	463b      	mov	r3, r7
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fa9a 	bl	8002f00 <uart_Rs232SendString>
                        cnt = 3 * 200;
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <update_time+0x278>)
 80029ce:	f44f 7216 	mov.w	r2, #600	; 0x258
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	e03a      	b.n	8002a4c <update_time+0x2e4>
 80029d6:	bf00      	nop
 80029d8:	080083bc 	.word	0x080083bc
 80029dc:	200000ac 	.word	0x200000ac
 80029e0:	200001d4 	.word	0x200001d4
 80029e4:	51eb851f 	.word	0x51eb851f
 80029e8:	200000a4 	.word	0x200000a4
 80029ec:	08008348 	.word	0x08008348
 80029f0:	08008358 	.word	0x08008358
 80029f4:	08008360 	.word	0x08008360
 80029f8:	200000a0 	.word	0x200000a0
 80029fc:	20000203 	.word	0x20000203
 8002a00:	08008374 	.word	0x08008374
 8002a04:	200001fe 	.word	0x200001fe
 8002a08:	0800837c 	.word	0x0800837c
 8002a0c:	08008384 	.word	0x08008384
 8002a10:	0800838c 	.word	0x0800838c
 8002a14:	08008394 	.word	0x08008394
 8002a18:	0800839c 	.word	0x0800839c
 8002a1c:	080083a4 	.word	0x080083a4
 8002a20:	080083ac 	.word	0x080083ac
                }
                else {
                  update_arr[idx] = rx_msg;
 8002a24:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <update_time+0x380>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <update_time+0x384>)
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a32:	440b      	add	r3, r1
 8002a34:	f803 2c08 	strb.w	r2, [r3, #-8]
                  cnt = 3 * 200;
 8002a38:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <update_time+0x388>)
 8002a3a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002a3e:	801a      	strh	r2, [r3, #0]
                  idx++;
 8002a40:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <update_time+0x380>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <update_time+0x380>)
 8002a4a:	701a      	strb	r2, [r3, #0]
                }
            }

            if (idx == 7) {
 8002a4c:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <update_time+0x380>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b07      	cmp	r3, #7
 8002a52:	f47f ae94 	bne.w	800277e <update_time+0x16>
            	strcpy(message, "                   ");
 8002a56:	463b      	mov	r3, r7
 8002a58:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <update_time+0x38c>)
 8002a5a:	461c      	mov	r4, r3
 8002a5c:	4615      	mov	r5, r2
 8002a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a62:	682b      	ldr	r3, [r5, #0]
 8002a64:	6023      	str	r3, [r4, #0]
              lcd_ShowStr(20, 30, message, WHITE, BLACK, 24, 0);
 8002a66:	463a      	mov	r2, r7
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9302      	str	r3, [sp, #8]
 8002a6c:	2318      	movs	r3, #24
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	2300      	movs	r3, #0
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a78:	211e      	movs	r1, #30
 8002a7a:	2014      	movs	r0, #20
 8002a7c:	f7fe fd00 	bl	8001480 <lcd_ShowStr>
              ds3231_Write(ADDRESS_YEAR, update_arr[6]);
 8002a80:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002a84:	4619      	mov	r1, r3
 8002a86:	2006      	movs	r0, #6
 8002a88:	f7fd fe42 	bl	8000710 <ds3231_Write>
              ds3231_Write(ADDRESS_MONTH, update_arr[5]);
 8002a8c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002a90:	4619      	mov	r1, r3
 8002a92:	2005      	movs	r0, #5
 8002a94:	f7fd fe3c 	bl	8000710 <ds3231_Write>
              ds3231_Write(ADDRESS_DATE, update_arr[4]);
 8002a98:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	2004      	movs	r0, #4
 8002aa0:	f7fd fe36 	bl	8000710 <ds3231_Write>
              ds3231_Write(ADDRESS_DAY, update_arr[3]);
 8002aa4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	2003      	movs	r0, #3
 8002aac:	f7fd fe30 	bl	8000710 <ds3231_Write>
              ds3231_Write(ADDRESS_HOUR, update_arr[2]);
 8002ab0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	2002      	movs	r0, #2
 8002ab8:	f7fd fe2a 	bl	8000710 <ds3231_Write>
              ds3231_Write(ADDRESS_MIN, update_arr[1]);
 8002abc:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f7fd fe24 	bl	8000710 <ds3231_Write>
              ds3231_Write(ADDRESS_SEC, update_arr[0]);
 8002ac8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002acc:	4619      	mov	r1, r3
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fd fe1e 	bl	8000710 <ds3231_Write>
              ds3231_ReadTime();
 8002ad4:	f7fd fe3e 	bl	8000754 <ds3231_ReadTime>
				currentMode = TIME_DISPLAY;
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <update_time+0x390>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
				break;
            }
	}
}
 8002ade:	bf00      	nop
 8002ae0:	3770      	adds	r7, #112	; 0x70
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200000a4 	.word	0x200000a4
 8002aec:	200001fe 	.word	0x200001fe
 8002af0:	200001d4 	.word	0x200001d4
 8002af4:	08008360 	.word	0x08008360
 8002af8:	200000a0 	.word	0x200000a0

08002afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b00:	b672      	cpsid	i
}
 8002b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <Error_Handler+0x8>
	...

08002b08 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <timer_init+0x10>)
 8002b0e:	f003 fa9f 	bl	8006050 <HAL_TIM_Base_Start_IT>
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000260 	.word	0x20000260

08002b1c <setTimer2>:

void setTimer2(uint16_t duration){
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002b26:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <setTimer2+0x2c>)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <setTimer2+0x2c>)
 8002b2e:	881a      	ldrh	r2, [r3, #0]
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <setTimer2+0x30>)
 8002b32:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <setTimer2+0x34>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	801a      	strh	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	200000b0 	.word	0x200000b0
 8002b4c:	200000ae 	.word	0x200000ae
 8002b50:	200000ac 	.word	0x200000ac

08002b54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d116      	bne.n	8002b94 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d010      	beq.n	8002b90 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b78:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b8a:	881a      	ldrh	r2, [r3, #0]
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b8e:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002b90:	f7fe fd18 	bl	80015c4 <led7_Scan>
	}
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	200000ae 	.word	0x200000ae
 8002ba0:	200000ac 	.word	0x200000ac
 8002ba4:	200000b0 	.word	0x200000b0

08002ba8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002bae:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <MX_SPI1_Init+0x68>)
 8002bb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002bb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002bf4:	220a      	movs	r2, #10
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bf8:	4804      	ldr	r0, [pc, #16]	; (8002c0c <MX_SPI1_Init+0x64>)
 8002bfa:	f002 fbed 	bl	80053d8 <HAL_SPI_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c04:	f7ff ff7a 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000208 	.word	0x20000208
 8002c10:	40013000 	.word	0x40013000

08002c14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <HAL_SPI_MspInit+0x84>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d12b      	bne.n	8002c8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c44:	6453      	str	r3, [r2, #68]	; 0x44
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <HAL_SPI_MspInit+0x88>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c6e:	2338      	movs	r3, #56	; 0x38
 8002c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	2302      	movs	r3, #2
 8002c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c7e:	2305      	movs	r3, #5
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	4619      	mov	r1, r3
 8002c88:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <HAL_SPI_MspInit+0x8c>)
 8002c8a:	f000 fc8d 	bl	80035a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c8e:	bf00      	nop
 8002c90:	3728      	adds	r7, #40	; 0x28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40013000 	.word	0x40013000
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40020400 	.word	0x40020400

08002ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <NMI_Handler+0x4>

08002cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cfe:	e7fe      	b.n	8002cfe <HardFault_Handler+0x4>

08002d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d04:	e7fe      	b.n	8002d04 <MemManage_Handler+0x4>

08002d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0a:	e7fe      	b.n	8002d0a <BusFault_Handler+0x4>

08002d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <UsageFault_Handler+0x4>

08002d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d40:	f000 fa4a 	bl	80031d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <TIM2_IRQHandler+0x10>)
 8002d4e:	f003 f9ef 	bl	8006130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000260 	.word	0x20000260

08002d5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <USART1_IRQHandler+0x10>)
 8002d62:	f003 feb7 	bl	8006ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2000030c 	.word	0x2000030c

08002d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <_sbrk+0x5c>)
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <_sbrk+0x60>)
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <_sbrk+0x64>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <_sbrk+0x68>)
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d207      	bcs.n	8002db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da0:	f004 fe20 	bl	80079e4 <__errno>
 8002da4:	4603      	mov	r3, r0
 8002da6:	220c      	movs	r2, #12
 8002da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	e009      	b.n	8002dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <_sbrk+0x64>)
 8002dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20020000 	.word	0x20020000
 8002dd0:	00000400 	.word	0x00000400
 8002dd4:	200000b4 	.word	0x200000b4
 8002dd8:	20000368 	.word	0x20000368

08002ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <SystemInit+0x20>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <SystemInit+0x20>)
 8002de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e06:	f107 0308 	add.w	r3, r7, #8
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e14:	463b      	mov	r3, r7
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e26:	f240 3247 	movw	r2, #839	; 0x347
 8002e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002e32:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e34:	2263      	movs	r2, #99	; 0x63
 8002e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e44:	4813      	ldr	r0, [pc, #76]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e46:	f003 f8b3 	bl	8005fb0 <HAL_TIM_Base_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e50:	f7ff fe54 	bl	8002afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	4619      	mov	r1, r3
 8002e60:	480c      	ldr	r0, [pc, #48]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e62:	f003 fa6d 	bl	8006340 <HAL_TIM_ConfigClockSource>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e6c:	f7ff fe46 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e70:	2300      	movs	r3, #0
 8002e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e78:	463b      	mov	r3, r7
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4805      	ldr	r0, [pc, #20]	; (8002e94 <MX_TIM2_Init+0x94>)
 8002e7e:	f003 fc89 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e88:	f7ff fe38 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e8c:	bf00      	nop
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000260 	.word	0x20000260

08002e98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d115      	bne.n	8002ed6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <HAL_TIM_Base_MspInit+0x48>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <HAL_TIM_Base_MspInit+0x48>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_TIM_Base_MspInit+0x48>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	201c      	movs	r0, #28
 8002ecc:	f000 faa3 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ed0:	201c      	movs	r0, #28
 8002ed2:	f000 fabc 	bl	800344e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <uart_init_rs232>:

uint8_t receive_buffer1 = 0;
uint8_t msg[100];
uint8_t rx_msg;

void uart_init_rs232(){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4903      	ldr	r1, [pc, #12]	; (8002ef8 <uart_init_rs232+0x14>)
 8002eec:	4803      	ldr	r0, [pc, #12]	; (8002efc <uart_init_rs232+0x18>)
 8002eee:	f003 fdc0 	bl	8006a72 <HAL_UART_Receive_IT>
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200000b8 	.word	0x200000b8
 8002efc:	2000030c 	.word	0x2000030c

08002f00 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	4907      	ldr	r1, [pc, #28]	; (8002f28 <uart_Rs232SendString+0x28>)
 8002f0c:	4807      	ldr	r0, [pc, #28]	; (8002f2c <uart_Rs232SendString+0x2c>)
 8002f0e:	f004 fda9 	bl	8007a64 <siprintf>
 8002f12:	4603      	mov	r3, r0
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	230a      	movs	r3, #10
 8002f18:	4904      	ldr	r1, [pc, #16]	; (8002f2c <uart_Rs232SendString+0x2c>)
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <uart_Rs232SendString+0x30>)
 8002f1c:	f003 fd17 	bl	800694e <HAL_UART_Transmit>
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	08008404 	.word	0x08008404
 8002f2c:	200002a8 	.word	0x200002a8
 8002f30:	2000030c 	.word	0x2000030c

08002f34 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <HAL_UART_RxCpltCallback+0x30>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10a      	bne.n	8002f5c <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002f46:	230a      	movs	r3, #10
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4907      	ldr	r1, [pc, #28]	; (8002f68 <HAL_UART_RxCpltCallback+0x34>)
 8002f4c:	4807      	ldr	r0, [pc, #28]	; (8002f6c <HAL_UART_RxCpltCallback+0x38>)
 8002f4e:	f003 fcfe 	bl	800694e <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002f52:	2201      	movs	r2, #1
 8002f54:	4904      	ldr	r1, [pc, #16]	; (8002f68 <HAL_UART_RxCpltCallback+0x34>)
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <HAL_UART_RxCpltCallback+0x38>)
 8002f58:	f003 fd8b 	bl	8006a72 <HAL_UART_Receive_IT>
	}
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40011000 	.word	0x40011000
 8002f68:	200000b8 	.word	0x200000b8
 8002f6c:	2000030c 	.word	0x2000030c

08002f70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <MX_USART1_UART_Init+0x50>)
 8002f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f96:	220c      	movs	r2, #12
 8002f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fa6:	4805      	ldr	r0, [pc, #20]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002fa8:	f003 fc84 	bl	80068b4 <HAL_UART_Init>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fb2:	f7ff fda3 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000030c 	.word	0x2000030c
 8002fc0:	40011000 	.word	0x40011000

08002fc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_UART_MspInit+0x94>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d134      	bne.n	8003050 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_UART_MspInit+0x98>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_UART_MspInit+0x98>)
 8002ff0:	f043 0310 	orr.w	r3, r3, #16
 8002ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff6:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_UART_MspInit+0x98>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_UART_MspInit+0x98>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a14      	ldr	r2, [pc, #80]	; (800305c <HAL_UART_MspInit+0x98>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_UART_MspInit+0x98>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800301e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302c:	2303      	movs	r3, #3
 800302e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003030:	2307      	movs	r3, #7
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4619      	mov	r1, r3
 800303a:	4809      	ldr	r0, [pc, #36]	; (8003060 <HAL_UART_MspInit+0x9c>)
 800303c:	f000 fab4 	bl	80035a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003040:	2200      	movs	r2, #0
 8003042:	2100      	movs	r1, #0
 8003044:	2025      	movs	r0, #37	; 0x25
 8003046:	f000 f9e6 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800304a:	2025      	movs	r0, #37	; 0x25
 800304c:	f000 f9ff 	bl	800344e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003050:	bf00      	nop
 8003052:	3728      	adds	r7, #40	; 0x28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40011000 	.word	0x40011000
 800305c:	40023800 	.word	0x40023800
 8003060:	40020000 	.word	0x40020000

08003064 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	0092      	lsls	r2, r2, #2
 8003078:	4413      	add	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	b2db      	uxtb	r3, r3
 8003086:	4413      	add	r3, r2
 8003088:	b2db      	uxtb	r3, r3
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	4a0d      	ldr	r2, [pc, #52]	; (80030dc <DEC2BCD+0x44>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	08db      	lsrs	r3, r3, #3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	b258      	sxtb	r0, r3
 80030b2:	79fa      	ldrb	r2, [r7, #7]
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <DEC2BCD+0x44>)
 80030b6:	fba3 1302 	umull	r1, r3, r3, r2
 80030ba:	08d9      	lsrs	r1, r3, #3
 80030bc:	460b      	mov	r3, r1
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	4303      	orrs	r3, r0
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	cccccccd 	.word	0xcccccccd

080030e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003118 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030e4:	480d      	ldr	r0, [pc, #52]	; (800311c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030e6:	490e      	ldr	r1, [pc, #56]	; (8003120 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030e8:	4a0e      	ldr	r2, [pc, #56]	; (8003124 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030ec:	e002      	b.n	80030f4 <LoopCopyDataInit>

080030ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030f2:	3304      	adds	r3, #4

080030f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f8:	d3f9      	bcc.n	80030ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030fa:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030fc:	4c0b      	ldr	r4, [pc, #44]	; (800312c <LoopFillZerobss+0x26>)
  movs r3, #0
 80030fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003100:	e001      	b.n	8003106 <LoopFillZerobss>

08003102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003104:	3204      	adds	r2, #4

08003106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003108:	d3fb      	bcc.n	8003102 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800310a:	f7ff fe67 	bl	8002ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800310e:	f004 fc6f 	bl	80079f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003112:	f7fe fae3 	bl	80016dc <main>
  bx  lr    
 8003116:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003118:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800311c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003120:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003124:	0800b3f4 	.word	0x0800b3f4
  ldr r2, =_sbss
 8003128:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800312c:	20000364 	.word	0x20000364

08003130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003130:	e7fe      	b.n	8003130 <ADC_IRQHandler>
	...

08003134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003138:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_Init+0x40>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <HAL_Init+0x40>)
 800313e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_Init+0x40>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <HAL_Init+0x40>)
 800314a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800314e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_Init+0x40>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a07      	ldr	r2, [pc, #28]	; (8003174 <HAL_Init+0x40>)
 8003156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800315c:	2003      	movs	r0, #3
 800315e:	f000 f94f 	bl	8003400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003162:	200f      	movs	r0, #15
 8003164:	f000 f808 	bl	8003178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003168:	f7ff fd9c 	bl	8002ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023c00 	.word	0x40023c00

08003178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <HAL_InitTick+0x54>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_InitTick+0x58>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	4619      	mov	r1, r3
 800318a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800318e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f967 	bl	800346a <HAL_SYSTICK_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00e      	b.n	80031c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b0f      	cmp	r3, #15
 80031aa:	d80a      	bhi.n	80031c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031ac:	2200      	movs	r2, #0
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	f000 f92f 	bl	8003416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031b8:	4a06      	ldr	r2, [pc, #24]	; (80031d4 <HAL_InitTick+0x5c>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e000      	b.n	80031c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000008 	.word	0x20000008
 80031d0:	20000010 	.word	0x20000010
 80031d4:	2000000c 	.word	0x2000000c

080031d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_IncTick+0x20>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_IncTick+0x24>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	4a04      	ldr	r2, [pc, #16]	; (80031fc <HAL_IncTick+0x24>)
 80031ea:	6013      	str	r3, [r2, #0]
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000010 	.word	0x20000010
 80031fc:	20000350 	.word	0x20000350

08003200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return uwTick;
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <HAL_GetTick+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000350 	.word	0x20000350

08003218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003220:	f7ff ffee 	bl	8003200 <HAL_GetTick>
 8003224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d005      	beq.n	800323e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <HAL_Delay+0x44>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800323e:	bf00      	nop
 8003240:	f7ff ffde 	bl	8003200 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	429a      	cmp	r2, r3
 800324e:	d8f7      	bhi.n	8003240 <HAL_Delay+0x28>
  {
  }
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000010 	.word	0x20000010

08003260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800328c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003292:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	60d3      	str	r3, [r2, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0307 	and.w	r3, r3, #7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	db0b      	blt.n	80032ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4907      	ldr	r1, [pc, #28]	; (80032fc <__NVIC_EnableIRQ+0x38>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2001      	movs	r0, #1
 80032e6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000e100 	.word	0xe000e100

08003300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	2b00      	cmp	r3, #0
 8003312:	db0a      	blt.n	800332a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	490c      	ldr	r1, [pc, #48]	; (800334c <__NVIC_SetPriority+0x4c>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	440b      	add	r3, r1
 8003324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003328:	e00a      	b.n	8003340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4908      	ldr	r1, [pc, #32]	; (8003350 <__NVIC_SetPriority+0x50>)
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	3b04      	subs	r3, #4
 8003338:	0112      	lsls	r2, r2, #4
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	440b      	add	r3, r1
 800333e:	761a      	strb	r2, [r3, #24]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000e100 	.word	0xe000e100
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f1c3 0307 	rsb	r3, r3, #7
 800336e:	2b04      	cmp	r3, #4
 8003370:	bf28      	it	cs
 8003372:	2304      	movcs	r3, #4
 8003374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3304      	adds	r3, #4
 800337a:	2b06      	cmp	r3, #6
 800337c:	d902      	bls.n	8003384 <NVIC_EncodePriority+0x30>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3b03      	subs	r3, #3
 8003382:	e000      	b.n	8003386 <NVIC_EncodePriority+0x32>
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	f04f 32ff 	mov.w	r2, #4294967295
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	401a      	ands	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800339c:	f04f 31ff 	mov.w	r1, #4294967295
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	43d9      	mvns	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	4313      	orrs	r3, r2
         );
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033cc:	d301      	bcc.n	80033d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00f      	b.n	80033f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <SysTick_Config+0x40>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033da:	210f      	movs	r1, #15
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	f7ff ff8e 	bl	8003300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <SysTick_Config+0x40>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <SysTick_Config+0x40>)
 80033ec:	2207      	movs	r2, #7
 80033ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000e010 	.word	0xe000e010

08003400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff29 	bl	8003260 <__NVIC_SetPriorityGrouping>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003428:	f7ff ff3e 	bl	80032a8 <__NVIC_GetPriorityGrouping>
 800342c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f7ff ff8e 	bl	8003354 <NVIC_EncodePriority>
 8003438:	4602      	mov	r2, r0
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff5d 	bl	8003300 <__NVIC_SetPriority>
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff31 	bl	80032c4 <__NVIC_EnableIRQ>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffa2 	bl	80033bc <SysTick_Config>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003490:	f7ff feb6 	bl	8003200 <HAL_GetTick>
 8003494:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d008      	beq.n	80034b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e052      	b.n	800355a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0216 	bic.w	r2, r2, #22
 80034c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <HAL_DMA_Abort+0x62>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0208 	bic.w	r2, r2, #8
 80034f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003504:	e013      	b.n	800352e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003506:	f7ff fe7b 	bl	8003200 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b05      	cmp	r3, #5
 8003512:	d90c      	bls.n	800352e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2203      	movs	r2, #3
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e015      	b.n	800355a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e4      	bne.n	8003506 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	223f      	movs	r2, #63	; 0x3f
 8003542:	409a      	lsls	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d004      	beq.n	8003580 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2280      	movs	r2, #128	; 0x80
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e00c      	b.n	800359a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2205      	movs	r2, #5
 8003584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e16b      	b.n	800389c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035c4:	2201      	movs	r2, #1
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	f040 815a 	bne.w	8003896 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d005      	beq.n	80035fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d130      	bne.n	800365c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	2203      	movs	r2, #3
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003630:	2201      	movs	r2, #1
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 0201 	and.w	r2, r3, #1
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b03      	cmp	r3, #3
 8003666:	d017      	beq.n	8003698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d123      	bne.n	80036ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3208      	adds	r2, #8
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	220f      	movs	r2, #15
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	08da      	lsrs	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	69b9      	ldr	r1, [r7, #24]
 80036e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0203 	and.w	r2, r3, #3
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80b4 	beq.w	8003896 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b60      	ldr	r3, [pc, #384]	; (80038b4 <HAL_GPIO_Init+0x30c>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	4a5f      	ldr	r2, [pc, #380]	; (80038b4 <HAL_GPIO_Init+0x30c>)
 8003738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800373c:	6453      	str	r3, [r2, #68]	; 0x44
 800373e:	4b5d      	ldr	r3, [pc, #372]	; (80038b4 <HAL_GPIO_Init+0x30c>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800374a:	4a5b      	ldr	r2, [pc, #364]	; (80038b8 <HAL_GPIO_Init+0x310>)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3302      	adds	r3, #2
 8003752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	220f      	movs	r2, #15
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_GPIO_Init+0x314>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d02b      	beq.n	80037ce <HAL_GPIO_Init+0x226>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_GPIO_Init+0x318>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d025      	beq.n	80037ca <HAL_GPIO_Init+0x222>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a50      	ldr	r2, [pc, #320]	; (80038c4 <HAL_GPIO_Init+0x31c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01f      	beq.n	80037c6 <HAL_GPIO_Init+0x21e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4f      	ldr	r2, [pc, #316]	; (80038c8 <HAL_GPIO_Init+0x320>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d019      	beq.n	80037c2 <HAL_GPIO_Init+0x21a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4e      	ldr	r2, [pc, #312]	; (80038cc <HAL_GPIO_Init+0x324>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <HAL_GPIO_Init+0x216>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4d      	ldr	r2, [pc, #308]	; (80038d0 <HAL_GPIO_Init+0x328>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00d      	beq.n	80037ba <HAL_GPIO_Init+0x212>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4c      	ldr	r2, [pc, #304]	; (80038d4 <HAL_GPIO_Init+0x32c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <HAL_GPIO_Init+0x20e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	; (80038d8 <HAL_GPIO_Init+0x330>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_GPIO_Init+0x20a>
 80037ae:	2307      	movs	r3, #7
 80037b0:	e00e      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037b2:	2308      	movs	r3, #8
 80037b4:	e00c      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037b6:	2306      	movs	r3, #6
 80037b8:	e00a      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037ba:	2305      	movs	r3, #5
 80037bc:	e008      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037be:	2304      	movs	r3, #4
 80037c0:	e006      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037c2:	2303      	movs	r3, #3
 80037c4:	e004      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e002      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037ce:	2300      	movs	r3, #0
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	f002 0203 	and.w	r2, r2, #3
 80037d6:	0092      	lsls	r2, r2, #2
 80037d8:	4093      	lsls	r3, r2
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037e0:	4935      	ldr	r1, [pc, #212]	; (80038b8 <HAL_GPIO_Init+0x310>)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	3302      	adds	r3, #2
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_GPIO_Init+0x334>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003812:	4a32      	ldr	r2, [pc, #200]	; (80038dc <HAL_GPIO_Init+0x334>)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003818:	4b30      	ldr	r3, [pc, #192]	; (80038dc <HAL_GPIO_Init+0x334>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800383c:	4a27      	ldr	r2, [pc, #156]	; (80038dc <HAL_GPIO_Init+0x334>)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003842:	4b26      	ldr	r3, [pc, #152]	; (80038dc <HAL_GPIO_Init+0x334>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003866:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_GPIO_Init+0x334>)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <HAL_GPIO_Init+0x334>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003890:	4a12      	ldr	r2, [pc, #72]	; (80038dc <HAL_GPIO_Init+0x334>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3301      	adds	r3, #1
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b0f      	cmp	r3, #15
 80038a0:	f67f ae90 	bls.w	80035c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3724      	adds	r7, #36	; 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40013800 	.word	0x40013800
 80038bc:	40020000 	.word	0x40020000
 80038c0:	40020400 	.word	0x40020400
 80038c4:	40020800 	.word	0x40020800
 80038c8:	40020c00 	.word	0x40020c00
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40021400 	.word	0x40021400
 80038d4:	40021800 	.word	0x40021800
 80038d8:	40021c00 	.word	0x40021c00
 80038dc:	40013c00 	.word	0x40013c00

080038e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
 80038ec:	4613      	mov	r3, r2
 80038ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038f0:	787b      	ldrb	r3, [r7, #1]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038f6:	887a      	ldrh	r2, [r7, #2]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038fc:	e003      	b.n	8003906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038fe:	887b      	ldrh	r3, [r7, #2]
 8003900:	041a      	lsls	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	619a      	str	r2, [r3, #24]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e12b      	b.n	8003b7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd f964 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2224      	movs	r2, #36	; 0x24
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003978:	f001 fd06 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 800397c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4a81      	ldr	r2, [pc, #516]	; (8003b88 <HAL_I2C_Init+0x274>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d807      	bhi.n	8003998 <HAL_I2C_Init+0x84>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a80      	ldr	r2, [pc, #512]	; (8003b8c <HAL_I2C_Init+0x278>)
 800398c:	4293      	cmp	r3, r2
 800398e:	bf94      	ite	ls
 8003990:	2301      	movls	r3, #1
 8003992:	2300      	movhi	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e006      	b.n	80039a6 <HAL_I2C_Init+0x92>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4a7d      	ldr	r2, [pc, #500]	; (8003b90 <HAL_I2C_Init+0x27c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	bf94      	ite	ls
 80039a0:	2301      	movls	r3, #1
 80039a2:	2300      	movhi	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0e7      	b.n	8003b7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a78      	ldr	r2, [pc, #480]	; (8003b94 <HAL_I2C_Init+0x280>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0c9b      	lsrs	r3, r3, #18
 80039b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4a6a      	ldr	r2, [pc, #424]	; (8003b88 <HAL_I2C_Init+0x274>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d802      	bhi.n	80039e8 <HAL_I2C_Init+0xd4>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	3301      	adds	r3, #1
 80039e6:	e009      	b.n	80039fc <HAL_I2C_Init+0xe8>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	4a69      	ldr	r2, [pc, #420]	; (8003b98 <HAL_I2C_Init+0x284>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	099b      	lsrs	r3, r3, #6
 80039fa:	3301      	adds	r3, #1
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	495c      	ldr	r1, [pc, #368]	; (8003b88 <HAL_I2C_Init+0x274>)
 8003a18:	428b      	cmp	r3, r1
 8003a1a:	d819      	bhi.n	8003a50 <HAL_I2C_Init+0x13c>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e59      	subs	r1, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a2a:	1c59      	adds	r1, r3, #1
 8003a2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a30:	400b      	ands	r3, r1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_I2C_Init+0x138>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1e59      	subs	r1, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a44:	3301      	adds	r3, #1
 8003a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4a:	e051      	b.n	8003af0 <HAL_I2C_Init+0x1dc>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	e04f      	b.n	8003af0 <HAL_I2C_Init+0x1dc>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d111      	bne.n	8003a7c <HAL_I2C_Init+0x168>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1e58      	subs	r0, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	440b      	add	r3, r1
 8003a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf0c      	ite	eq
 8003a74:	2301      	moveq	r3, #1
 8003a76:	2300      	movne	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e012      	b.n	8003aa2 <HAL_I2C_Init+0x18e>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1e58      	subs	r0, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	0099      	lsls	r1, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Init+0x196>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e022      	b.n	8003af0 <HAL_I2C_Init+0x1dc>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10e      	bne.n	8003ad0 <HAL_I2C_Init+0x1bc>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1e58      	subs	r0, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	440b      	add	r3, r1
 8003ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ace:	e00f      	b.n	8003af0 <HAL_I2C_Init+0x1dc>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e58      	subs	r0, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	0099      	lsls	r1, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	6809      	ldr	r1, [r1, #0]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6911      	ldr	r1, [r2, #16]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68d2      	ldr	r2, [r2, #12]
 8003b2a:	4311      	orrs	r1, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	000186a0 	.word	0x000186a0
 8003b8c:	001e847f 	.word	0x001e847f
 8003b90:	003d08ff 	.word	0x003d08ff
 8003b94:	431bde83 	.word	0x431bde83
 8003b98:	10624dd3 	.word	0x10624dd3

08003b9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	817b      	strh	r3, [r7, #10]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	813b      	strh	r3, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb6:	f7ff fb23 	bl	8003200 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	f040 80d9 	bne.w	8003d7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2319      	movs	r3, #25
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	496d      	ldr	r1, [pc, #436]	; (8003d88 <HAL_I2C_Mem_Write+0x1ec>)
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fdad 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
 8003be2:	e0cc      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Mem_Write+0x56>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e0c5      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d007      	beq.n	8003c18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2221      	movs	r2, #33	; 0x21
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2240      	movs	r2, #64	; 0x40
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a4d      	ldr	r2, [pc, #308]	; (8003d8c <HAL_I2C_Mem_Write+0x1f0>)
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c5a:	88f8      	ldrh	r0, [r7, #6]
 8003c5c:	893a      	ldrh	r2, [r7, #8]
 8003c5e:	8979      	ldrh	r1, [r7, #10]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	4603      	mov	r3, r0
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fbe4 	bl	8004438 <I2C_RequestMemoryWrite>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d052      	beq.n	8003d1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e081      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fe2e 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d107      	bne.n	8003ca2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e06b      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	781a      	ldrb	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d11b      	bne.n	8003d1c <HAL_I2C_Mem_Write+0x180>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d017      	beq.n	8003d1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1aa      	bne.n	8003c7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fe1a 	bl	8004962 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d107      	bne.n	8003d4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e016      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e000      	b.n	8003d7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	00100002 	.word	0x00100002
 8003d8c:	ffff0000 	.word	0xffff0000

08003d90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08c      	sub	sp, #48	; 0x30
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	817b      	strh	r3, [r7, #10]
 8003da2:	460b      	mov	r3, r1
 8003da4:	813b      	strh	r3, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003daa:	f7ff fa29 	bl	8003200 <HAL_GetTick>
 8003dae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	f040 8208 	bne.w	80041ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2319      	movs	r3, #25
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	497b      	ldr	r1, [pc, #492]	; (8003fb4 <HAL_I2C_Mem_Read+0x224>)
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fcb3 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e1fb      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_I2C_Mem_Read+0x56>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e1f4      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d007      	beq.n	8003e0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2222      	movs	r2, #34	; 0x22
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2240      	movs	r2, #64	; 0x40
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a5b      	ldr	r2, [pc, #364]	; (8003fb8 <HAL_I2C_Mem_Read+0x228>)
 8003e4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e4e:	88f8      	ldrh	r0, [r7, #6]
 8003e50:	893a      	ldrh	r2, [r7, #8]
 8003e52:	8979      	ldrh	r1, [r7, #10]
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fb80 	bl	8004564 <I2C_RequestMemoryRead>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e1b0      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d113      	bne.n	8003e9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e76:	2300      	movs	r3, #0
 8003e78:	623b      	str	r3, [r7, #32]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	623b      	str	r3, [r7, #32]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	623b      	str	r3, [r7, #32]
 8003e8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e184      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d11b      	bne.n	8003ede <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e164      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d11b      	bne.n	8003f1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	e144      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f34:	e138      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	f200 80f1 	bhi.w	8004122 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d123      	bne.n	8003f90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fd49 	bl	80049e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e139      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f8e:	e10b      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d14e      	bne.n	8004036 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	4906      	ldr	r1, [pc, #24]	; (8003fbc <HAL_I2C_Mem_Read+0x22c>)
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fbc6 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e10e      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
 8003fb2:	bf00      	nop
 8003fb4:	00100002 	.word	0x00100002
 8003fb8:	ffff0000 	.word	0xffff0000
 8003fbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004034:	e0b8      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	2200      	movs	r2, #0
 800403e:	4966      	ldr	r1, [pc, #408]	; (80041d8 <HAL_I2C_Mem_Read+0x448>)
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fb77 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0bf      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	2200      	movs	r2, #0
 800409a:	494f      	ldr	r1, [pc, #316]	; (80041d8 <HAL_I2C_Mem_Read+0x448>)
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fb49 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e091      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004120:	e042      	b.n	80041a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004124:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fc5c 	bl	80049e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e04c      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d118      	bne.n	80041a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f47f aec2 	bne.w	8003f36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3728      	adds	r7, #40	; 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	00010004 	.word	0x00010004

080041dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	; 0x28
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	460b      	mov	r3, r1
 80041ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041ec:	f7ff f808 	bl	8003200 <HAL_GetTick>
 80041f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b20      	cmp	r3, #32
 8004200:	f040 8111 	bne.w	8004426 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2319      	movs	r3, #25
 800420a:	2201      	movs	r2, #1
 800420c:	4988      	ldr	r1, [pc, #544]	; (8004430 <HAL_I2C_IsDeviceReady+0x254>)
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fa90 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
 800421c:	e104      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_I2C_IsDeviceReady+0x50>
 8004228:	2302      	movs	r3, #2
 800422a:	e0fd      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b01      	cmp	r3, #1
 8004240:	d007      	beq.n	8004252 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2224      	movs	r2, #36	; 0x24
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a70      	ldr	r2, [pc, #448]	; (8004434 <HAL_I2C_IsDeviceReady+0x258>)
 8004274:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004284:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2200      	movs	r2, #0
 800428e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fa4e 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ac:	d103      	bne.n	80042b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0b6      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ba:	897b      	ldrh	r3, [r7, #10]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fe ff99 	bl	8003200 <HAL_GetTick>
 80042ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	bf0c      	ite	eq
 80042f6:	2301      	moveq	r3, #1
 80042f8:	2300      	movne	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042fe:	e025      	b.n	800434c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004300:	f7fe ff7e 	bl	8003200 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d302      	bcc.n	8004316 <HAL_I2C_IsDeviceReady+0x13a>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	22a0      	movs	r2, #160	; 0xa0
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2ba0      	cmp	r3, #160	; 0xa0
 8004356:	d005      	beq.n	8004364 <HAL_I2C_IsDeviceReady+0x188>
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <HAL_I2C_IsDeviceReady+0x188>
 800435e:	7dbb      	ldrb	r3, [r7, #22]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0cd      	beq.n	8004300 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d129      	bne.n	80043ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2319      	movs	r3, #25
 80043a6:	2201      	movs	r2, #1
 80043a8:	4921      	ldr	r1, [pc, #132]	; (8004430 <HAL_I2C_IsDeviceReady+0x254>)
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f9c2 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e036      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e02c      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2319      	movs	r3, #25
 80043ee:	2201      	movs	r2, #1
 80043f0:	490f      	ldr	r1, [pc, #60]	; (8004430 <HAL_I2C_IsDeviceReady+0x254>)
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f99e 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e012      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	3301      	adds	r3, #1
 8004406:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	429a      	cmp	r2, r3
 800440e:	f4ff af32 	bcc.w	8004276 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3720      	adds	r7, #32
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	00100002 	.word	0x00100002
 8004434:	ffff0000 	.word	0xffff0000

08004438 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	4608      	mov	r0, r1
 8004442:	4611      	mov	r1, r2
 8004444:	461a      	mov	r2, r3
 8004446:	4603      	mov	r3, r0
 8004448:	817b      	strh	r3, [r7, #10]
 800444a:	460b      	mov	r3, r1
 800444c:	813b      	strh	r3, [r7, #8]
 800444e:	4613      	mov	r3, r2
 8004450:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004460:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	2200      	movs	r2, #0
 800446a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f960 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004488:	d103      	bne.n	8004492 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e05f      	b.n	8004556 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004496:	897b      	ldrh	r3, [r7, #10]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	492d      	ldr	r1, [pc, #180]	; (8004560 <I2C_RequestMemoryWrite+0x128>)
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f998 	bl	80047e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e04c      	b.n	8004556 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d4:	6a39      	ldr	r1, [r7, #32]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fa02 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d107      	bne.n	80044fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e02b      	b.n	8004556 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d105      	bne.n	8004510 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	611a      	str	r2, [r3, #16]
 800450e:	e021      	b.n	8004554 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004510:	893b      	ldrh	r3, [r7, #8]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	b29b      	uxth	r3, r3
 8004516:	b2da      	uxtb	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	6a39      	ldr	r1, [r7, #32]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f9dc 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	2b04      	cmp	r3, #4
 8004534:	d107      	bne.n	8004546 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004544:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e005      	b.n	8004556 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800454a:	893b      	ldrh	r3, [r7, #8]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	00010002 	.word	0x00010002

08004564 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af02      	add	r7, sp, #8
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	4608      	mov	r0, r1
 800456e:	4611      	mov	r1, r2
 8004570:	461a      	mov	r2, r3
 8004572:	4603      	mov	r3, r0
 8004574:	817b      	strh	r3, [r7, #10]
 8004576:	460b      	mov	r3, r1
 8004578:	813b      	strh	r3, [r7, #8]
 800457a:	4613      	mov	r3, r2
 800457c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800458c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800459c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f8c2 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c4:	d103      	bne.n	80045ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e0aa      	b.n	8004728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045d2:	897b      	ldrh	r3, [r7, #10]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	6a3a      	ldr	r2, [r7, #32]
 80045e6:	4952      	ldr	r1, [pc, #328]	; (8004730 <I2C_RequestMemoryRead+0x1cc>)
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f8fa 	bl	80047e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e097      	b.n	8004728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800460e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004610:	6a39      	ldr	r1, [r7, #32]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f964 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00d      	beq.n	800463a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b04      	cmp	r3, #4
 8004624:	d107      	bne.n	8004636 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004634:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e076      	b.n	8004728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004640:	893b      	ldrh	r3, [r7, #8]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	611a      	str	r2, [r3, #16]
 800464a:	e021      	b.n	8004690 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800464c:	893b      	ldrh	r3, [r7, #8]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	b29b      	uxth	r3, r3
 8004652:	b2da      	uxtb	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800465a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465c:	6a39      	ldr	r1, [r7, #32]
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f93e 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2b04      	cmp	r3, #4
 8004670:	d107      	bne.n	8004682 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004680:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e050      	b.n	8004728 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004686:	893b      	ldrh	r3, [r7, #8]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004692:	6a39      	ldr	r1, [r7, #32]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f923 	bl	80048e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d107      	bne.n	80046b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e035      	b.n	8004728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f82b 	bl	8004734 <I2C_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00d      	beq.n	8004700 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f2:	d103      	bne.n	80046fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e013      	b.n	8004728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004700:	897b      	ldrh	r3, [r7, #10]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	6a3a      	ldr	r2, [r7, #32]
 8004714:	4906      	ldr	r1, [pc, #24]	; (8004730 <I2C_RequestMemoryRead+0x1cc>)
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f863 	bl	80047e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	00010002 	.word	0x00010002

08004734 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004744:	e025      	b.n	8004792 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d021      	beq.n	8004792 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474e:	f7fe fd57 	bl	8003200 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <I2C_WaitOnFlagUntilTimeout+0x30>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d116      	bne.n	8004792 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f043 0220 	orr.w	r2, r3, #32
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e023      	b.n	80047da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d10d      	bne.n	80047b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	43da      	mvns	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4013      	ands	r3, r2
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	e00c      	b.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	43da      	mvns	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4013      	ands	r3, r2
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	bf0c      	ite	eq
 80047ca:	2301      	moveq	r3, #1
 80047cc:	2300      	movne	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d0b6      	beq.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047f0:	e051      	b.n	8004896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004800:	d123      	bne.n	800484a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004810:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800481a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f043 0204 	orr.w	r2, r3, #4
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e046      	b.n	80048d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d021      	beq.n	8004896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004852:	f7fe fcd5 	bl	8003200 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d302      	bcc.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d116      	bne.n	8004896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f043 0220 	orr.w	r2, r3, #32
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e020      	b.n	80048d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10c      	bne.n	80048ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	e00b      	b.n	80048d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	43da      	mvns	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4013      	ands	r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d18d      	bne.n	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ec:	e02d      	b.n	800494a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f8ce 	bl	8004a90 <I2C_IsAcknowledgeFailed>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e02d      	b.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d021      	beq.n	800494a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004906:	f7fe fc7b 	bl	8003200 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	429a      	cmp	r2, r3
 8004914:	d302      	bcc.n	800491c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d116      	bne.n	800494a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e007      	b.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004954:	2b80      	cmp	r3, #128	; 0x80
 8004956:	d1ca      	bne.n	80048ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800496e:	e02d      	b.n	80049cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f88d 	bl	8004a90 <I2C_IsAcknowledgeFailed>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e02d      	b.n	80049dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d021      	beq.n	80049cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004988:	f7fe fc3a 	bl	8003200 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	429a      	cmp	r2, r3
 8004996:	d302      	bcc.n	800499e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d116      	bne.n	80049cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e007      	b.n	80049dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d1ca      	bne.n	8004970 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049f0:	e042      	b.n	8004a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d119      	bne.n	8004a34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0210 	mvn.w	r2, #16
 8004a08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e029      	b.n	8004a88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a34:	f7fe fbe4 	bl	8003200 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d302      	bcc.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d116      	bne.n	8004a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e007      	b.n	8004a88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a82:	2b40      	cmp	r3, #64	; 0x40
 8004a84:	d1b5      	bne.n	80049f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa6:	d11b      	bne.n	8004ae0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ab0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	f043 0204 	orr.w	r2, r3, #4
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e264      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d075      	beq.n	8004bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b0e:	4ba3      	ldr	r3, [pc, #652]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d00c      	beq.n	8004b34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1a:	4ba0      	ldr	r3, [pc, #640]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d112      	bne.n	8004b4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b26:	4b9d      	ldr	r3, [pc, #628]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b32:	d10b      	bne.n	8004b4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b34:	4b99      	ldr	r3, [pc, #612]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d05b      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x108>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d157      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e23f      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d106      	bne.n	8004b64 <HAL_RCC_OscConfig+0x74>
 8004b56:	4b91      	ldr	r3, [pc, #580]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a90      	ldr	r2, [pc, #576]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e01d      	b.n	8004ba0 <HAL_RCC_OscConfig+0xb0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x98>
 8004b6e:	4b8b      	ldr	r3, [pc, #556]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a8a      	ldr	r2, [pc, #552]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a87      	ldr	r2, [pc, #540]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0xb0>
 8004b88:	4b84      	ldr	r3, [pc, #528]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a83      	ldr	r2, [pc, #524]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4b81      	ldr	r3, [pc, #516]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a80      	ldr	r2, [pc, #512]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d013      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fe fb2a 	bl	8003200 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fe fb26 	bl	8003200 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e204      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc2:	4b76      	ldr	r3, [pc, #472]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0xc0>
 8004bce:	e014      	b.n	8004bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fe fb16 	bl	8003200 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fe fb12 	bl	8003200 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e1f0      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bea:	4b6c      	ldr	r3, [pc, #432]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0xe8>
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d063      	beq.n	8004cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c06:	4b65      	ldr	r3, [pc, #404]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c12:	4b62      	ldr	r3, [pc, #392]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d11c      	bne.n	8004c58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c1e:	4b5f      	ldr	r3, [pc, #380]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d116      	bne.n	8004c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2a:	4b5c      	ldr	r3, [pc, #368]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <HAL_RCC_OscConfig+0x152>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d001      	beq.n	8004c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e1c4      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c42:	4b56      	ldr	r3, [pc, #344]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4952      	ldr	r1, [pc, #328]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c56:	e03a      	b.n	8004cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c60:	4b4f      	ldr	r3, [pc, #316]	; (8004da0 <HAL_RCC_OscConfig+0x2b0>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c66:	f7fe facb 	bl	8003200 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c6e:	f7fe fac7 	bl	8003200 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e1a5      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c80:	4b46      	ldr	r3, [pc, #280]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8c:	4b43      	ldr	r3, [pc, #268]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	4940      	ldr	r1, [pc, #256]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]
 8004ca0:	e015      	b.n	8004cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <HAL_RCC_OscConfig+0x2b0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fe faaa 	bl	8003200 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cb0:	f7fe faa6 	bl	8003200 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e184      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc2:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d030      	beq.n	8004d3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d016      	beq.n	8004d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ce2:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <HAL_RCC_OscConfig+0x2b4>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce8:	f7fe fa8a 	bl	8003200 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cf0:	f7fe fa86 	bl	8003200 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e164      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d02:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x200>
 8004d0e:	e015      	b.n	8004d3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <HAL_RCC_OscConfig+0x2b4>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d16:	f7fe fa73 	bl	8003200 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d1e:	f7fe fa6f 	bl	8003200 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e14d      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f0      	bne.n	8004d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80a0 	beq.w	8004e8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4e:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	4a0e      	ldr	r2, [pc, #56]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_RCC_OscConfig+0x2b8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d121      	bne.n	8004dca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_RCC_OscConfig+0x2b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <HAL_RCC_OscConfig+0x2b8>)
 8004d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d92:	f7fe fa35 	bl	8003200 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d98:	e011      	b.n	8004dbe <HAL_RCC_OscConfig+0x2ce>
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	42470000 	.word	0x42470000
 8004da4:	42470e80 	.word	0x42470e80
 8004da8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dac:	f7fe fa28 	bl	8003200 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e106      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbe:	4b85      	ldr	r3, [pc, #532]	; (8004fd4 <HAL_RCC_OscConfig+0x4e4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d106      	bne.n	8004de0 <HAL_RCC_OscConfig+0x2f0>
 8004dd2:	4b81      	ldr	r3, [pc, #516]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	4a80      	ldr	r2, [pc, #512]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dde:	e01c      	b.n	8004e1a <HAL_RCC_OscConfig+0x32a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b05      	cmp	r3, #5
 8004de6:	d10c      	bne.n	8004e02 <HAL_RCC_OscConfig+0x312>
 8004de8:	4b7b      	ldr	r3, [pc, #492]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4a7a      	ldr	r2, [pc, #488]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004dee:	f043 0304 	orr.w	r3, r3, #4
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70
 8004df4:	4b78      	ldr	r3, [pc, #480]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	4a77      	ldr	r2, [pc, #476]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004e00:	e00b      	b.n	8004e1a <HAL_RCC_OscConfig+0x32a>
 8004e02:	4b75      	ldr	r3, [pc, #468]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	4a74      	ldr	r2, [pc, #464]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0e:	4b72      	ldr	r3, [pc, #456]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	4a71      	ldr	r2, [pc, #452]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004e14:	f023 0304 	bic.w	r3, r3, #4
 8004e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d015      	beq.n	8004e4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e22:	f7fe f9ed 	bl	8003200 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7fe f9e9 	bl	8003200 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0c5      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e40:	4b65      	ldr	r3, [pc, #404]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0ee      	beq.n	8004e2a <HAL_RCC_OscConfig+0x33a>
 8004e4c:	e014      	b.n	8004e78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4e:	f7fe f9d7 	bl	8003200 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fe f9d3 	bl	8003200 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e0af      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6c:	4b5a      	ldr	r3, [pc, #360]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1ee      	bne.n	8004e56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d105      	bne.n	8004e8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7e:	4b56      	ldr	r3, [pc, #344]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	4a55      	ldr	r2, [pc, #340]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 809b 	beq.w	8004fca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e94:	4b50      	ldr	r3, [pc, #320]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d05c      	beq.n	8004f5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d141      	bne.n	8004f2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea8:	4b4c      	ldr	r3, [pc, #304]	; (8004fdc <HAL_RCC_OscConfig+0x4ec>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eae:	f7fe f9a7 	bl	8003200 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb6:	f7fe f9a3 	bl	8003200 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e081      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec8:	4b43      	ldr	r3, [pc, #268]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	019b      	lsls	r3, r3, #6
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	3b01      	subs	r3, #1
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	061b      	lsls	r3, r3, #24
 8004ef8:	4937      	ldr	r1, [pc, #220]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004efe:	4b37      	ldr	r3, [pc, #220]	; (8004fdc <HAL_RCC_OscConfig+0x4ec>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fe f97c 	bl	8003200 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fe f978 	bl	8003200 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e056      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1e:	4b2e      	ldr	r3, [pc, #184]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCC_OscConfig+0x41c>
 8004f2a:	e04e      	b.n	8004fca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2c:	4b2b      	ldr	r3, [pc, #172]	; (8004fdc <HAL_RCC_OscConfig+0x4ec>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fe f965 	bl	8003200 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3a:	f7fe f961 	bl	8003200 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e03f      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4c:	4b22      	ldr	r3, [pc, #136]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x44a>
 8004f58:	e037      	b.n	8004fca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e032      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f66:	4b1c      	ldr	r3, [pc, #112]	; (8004fd8 <HAL_RCC_OscConfig+0x4e8>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d028      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d121      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d11a      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f96:	4013      	ands	r3, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d111      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d107      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d001      	beq.n	8004fca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40007000 	.word	0x40007000
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	42470060 	.word	0x42470060

08004fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0cc      	b.n	800518e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff4:	4b68      	ldr	r3, [pc, #416]	; (8005198 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d90c      	bls.n	800501c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005002:	4b65      	ldr	r3, [pc, #404]	; (8005198 <HAL_RCC_ClockConfig+0x1b8>)
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800500a:	4b63      	ldr	r3, [pc, #396]	; (8005198 <HAL_RCC_ClockConfig+0x1b8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d001      	beq.n	800501c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0b8      	b.n	800518e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d020      	beq.n	800506a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005034:	4b59      	ldr	r3, [pc, #356]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	4a58      	ldr	r2, [pc, #352]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800503e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800504c:	4b53      	ldr	r3, [pc, #332]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4a52      	ldr	r2, [pc, #328]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005058:	4b50      	ldr	r3, [pc, #320]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	494d      	ldr	r1, [pc, #308]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d044      	beq.n	8005100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d107      	bne.n	800508e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507e:	4b47      	ldr	r3, [pc, #284]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d119      	bne.n	80050be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e07f      	b.n	800518e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d003      	beq.n	800509e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509a:	2b03      	cmp	r3, #3
 800509c:	d107      	bne.n	80050ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509e:	4b3f      	ldr	r3, [pc, #252]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e06f      	b.n	800518e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ae:	4b3b      	ldr	r3, [pc, #236]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e067      	b.n	800518e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050be:	4b37      	ldr	r3, [pc, #220]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f023 0203 	bic.w	r2, r3, #3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	4934      	ldr	r1, [pc, #208]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050d0:	f7fe f896 	bl	8003200 <HAL_GetTick>
 80050d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d6:	e00a      	b.n	80050ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d8:	f7fe f892 	bl	8003200 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e04f      	b.n	800518e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ee:	4b2b      	ldr	r3, [pc, #172]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 020c 	and.w	r2, r3, #12
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d1eb      	bne.n	80050d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005100:	4b25      	ldr	r3, [pc, #148]	; (8005198 <HAL_RCC_ClockConfig+0x1b8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d20c      	bcs.n	8005128 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510e:	4b22      	ldr	r3, [pc, #136]	; (8005198 <HAL_RCC_ClockConfig+0x1b8>)
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005116:	4b20      	ldr	r3, [pc, #128]	; (8005198 <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d001      	beq.n	8005128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e032      	b.n	800518e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005134:	4b19      	ldr	r3, [pc, #100]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4916      	ldr	r1, [pc, #88]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	490e      	ldr	r1, [pc, #56]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005166:	f000 f821 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 800516a:	4602      	mov	r2, r0
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	091b      	lsrs	r3, r3, #4
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	490a      	ldr	r1, [pc, #40]	; (80051a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005178:	5ccb      	ldrb	r3, [r1, r3]
 800517a:	fa22 f303 	lsr.w	r3, r2, r3
 800517e:	4a09      	ldr	r2, [pc, #36]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005182:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f7fd fff6 	bl	8003178 <HAL_InitTick>

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40023c00 	.word	0x40023c00
 800519c:	40023800 	.word	0x40023800
 80051a0:	0800b398 	.word	0x0800b398
 80051a4:	20000008 	.word	0x20000008
 80051a8:	2000000c 	.word	0x2000000c

080051ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	607b      	str	r3, [r7, #4]
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	2300      	movs	r3, #0
 80051be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051c4:	4b67      	ldr	r3, [pc, #412]	; (8005364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 030c 	and.w	r3, r3, #12
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d00d      	beq.n	80051ec <HAL_RCC_GetSysClockFreq+0x40>
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	f200 80bd 	bhi.w	8005350 <HAL_RCC_GetSysClockFreq+0x1a4>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x34>
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d003      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051de:	e0b7      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051e0:	4b61      	ldr	r3, [pc, #388]	; (8005368 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051e2:	60bb      	str	r3, [r7, #8]
       break;
 80051e4:	e0b7      	b.n	8005356 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051e6:	4b61      	ldr	r3, [pc, #388]	; (800536c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80051e8:	60bb      	str	r3, [r7, #8]
      break;
 80051ea:	e0b4      	b.n	8005356 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051ec:	4b5d      	ldr	r3, [pc, #372]	; (8005364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051f6:	4b5b      	ldr	r3, [pc, #364]	; (8005364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d04d      	beq.n	800529e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005202:	4b58      	ldr	r3, [pc, #352]	; (8005364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	099b      	lsrs	r3, r3, #6
 8005208:	461a      	mov	r2, r3
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005212:	f04f 0100 	mov.w	r1, #0
 8005216:	ea02 0800 	and.w	r8, r2, r0
 800521a:	ea03 0901 	and.w	r9, r3, r1
 800521e:	4640      	mov	r0, r8
 8005220:	4649      	mov	r1, r9
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	014b      	lsls	r3, r1, #5
 800522c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005230:	0142      	lsls	r2, r0, #5
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	ebb0 0008 	subs.w	r0, r0, r8
 800523a:	eb61 0109 	sbc.w	r1, r1, r9
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	018b      	lsls	r3, r1, #6
 8005248:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800524c:	0182      	lsls	r2, r0, #6
 800524e:	1a12      	subs	r2, r2, r0
 8005250:	eb63 0301 	sbc.w	r3, r3, r1
 8005254:	f04f 0000 	mov.w	r0, #0
 8005258:	f04f 0100 	mov.w	r1, #0
 800525c:	00d9      	lsls	r1, r3, #3
 800525e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005262:	00d0      	lsls	r0, r2, #3
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	eb12 0208 	adds.w	r2, r2, r8
 800526c:	eb43 0309 	adc.w	r3, r3, r9
 8005270:	f04f 0000 	mov.w	r0, #0
 8005274:	f04f 0100 	mov.w	r1, #0
 8005278:	0259      	lsls	r1, r3, #9
 800527a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800527e:	0250      	lsls	r0, r2, #9
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	461a      	mov	r2, r3
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	f7fb f806 	bl	80002a0 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4613      	mov	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e04a      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800529e:	4b31      	ldr	r3, [pc, #196]	; (8005364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	099b      	lsrs	r3, r3, #6
 80052a4:	461a      	mov	r2, r3
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052ae:	f04f 0100 	mov.w	r1, #0
 80052b2:	ea02 0400 	and.w	r4, r2, r0
 80052b6:	ea03 0501 	and.w	r5, r3, r1
 80052ba:	4620      	mov	r0, r4
 80052bc:	4629      	mov	r1, r5
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	014b      	lsls	r3, r1, #5
 80052c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052cc:	0142      	lsls	r2, r0, #5
 80052ce:	4610      	mov	r0, r2
 80052d0:	4619      	mov	r1, r3
 80052d2:	1b00      	subs	r0, r0, r4
 80052d4:	eb61 0105 	sbc.w	r1, r1, r5
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	018b      	lsls	r3, r1, #6
 80052e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052e6:	0182      	lsls	r2, r0, #6
 80052e8:	1a12      	subs	r2, r2, r0
 80052ea:	eb63 0301 	sbc.w	r3, r3, r1
 80052ee:	f04f 0000 	mov.w	r0, #0
 80052f2:	f04f 0100 	mov.w	r1, #0
 80052f6:	00d9      	lsls	r1, r3, #3
 80052f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052fc:	00d0      	lsls	r0, r2, #3
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	1912      	adds	r2, r2, r4
 8005304:	eb45 0303 	adc.w	r3, r5, r3
 8005308:	f04f 0000 	mov.w	r0, #0
 800530c:	f04f 0100 	mov.w	r1, #0
 8005310:	0299      	lsls	r1, r3, #10
 8005312:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005316:	0290      	lsls	r0, r2, #10
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4610      	mov	r0, r2
 800531e:	4619      	mov	r1, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	461a      	mov	r2, r3
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	f7fa ffba 	bl	80002a0 <__aeabi_uldivmod>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4613      	mov	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005334:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	3301      	adds	r3, #1
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	60bb      	str	r3, [r7, #8]
      break;
 800534e:	e002      	b.n	8005356 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005352:	60bb      	str	r3, [r7, #8]
      break;
 8005354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005356:	68bb      	ldr	r3, [r7, #8]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005362:	bf00      	nop
 8005364:	40023800 	.word	0x40023800
 8005368:	00f42400 	.word	0x00f42400
 800536c:	007a1200 	.word	0x007a1200

08005370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005374:	4b03      	ldr	r3, [pc, #12]	; (8005384 <HAL_RCC_GetHCLKFreq+0x14>)
 8005376:	681b      	ldr	r3, [r3, #0]
}
 8005378:	4618      	mov	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000008 	.word	0x20000008

08005388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800538c:	f7ff fff0 	bl	8005370 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0a9b      	lsrs	r3, r3, #10
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4903      	ldr	r1, [pc, #12]	; (80053ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800
 80053ac:	0800b3a8 	.word	0x0800b3a8

080053b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053b4:	f7ff ffdc 	bl	8005370 <HAL_RCC_GetHCLKFreq>
 80053b8:	4602      	mov	r2, r0
 80053ba:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	0b5b      	lsrs	r3, r3, #13
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	4903      	ldr	r1, [pc, #12]	; (80053d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c6:	5ccb      	ldrb	r3, [r1, r3]
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40023800 	.word	0x40023800
 80053d4:	0800b3a8 	.word	0x0800b3a8

080053d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e07b      	b.n	80054e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d108      	bne.n	8005404 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fa:	d009      	beq.n	8005410 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	61da      	str	r2, [r3, #28]
 8005402:	e005      	b.n	8005410 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fd fbf2 	bl	8002c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005446:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005494:	ea42 0103 	orr.w	r1, r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0104 	and.w	r1, r3, #4
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	f003 0210 	and.w	r2, r3, #16
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b088      	sub	sp, #32
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	603b      	str	r3, [r7, #0]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_SPI_Transmit+0x22>
 8005508:	2302      	movs	r3, #2
 800550a:	e126      	b.n	800575a <HAL_SPI_Transmit+0x270>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005514:	f7fd fe74 	bl	8003200 <HAL_GetTick>
 8005518:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b01      	cmp	r3, #1
 8005528:	d002      	beq.n	8005530 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800552a:	2302      	movs	r3, #2
 800552c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800552e:	e10b      	b.n	8005748 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_SPI_Transmit+0x52>
 8005536:	88fb      	ldrh	r3, [r7, #6]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005540:	e102      	b.n	8005748 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2203      	movs	r2, #3
 8005546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	88fa      	ldrh	r2, [r7, #6]
 8005560:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005588:	d10f      	bne.n	80055aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005598:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	d007      	beq.n	80055c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d0:	d14b      	bne.n	800566a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_Transmit+0xf6>
 80055da:	8afb      	ldrh	r3, [r7, #22]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d13e      	bne.n	800565e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	881a      	ldrh	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	1c9a      	adds	r2, r3, #2
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005604:	e02b      	b.n	800565e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b02      	cmp	r3, #2
 8005612:	d112      	bne.n	800563a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	881a      	ldrh	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	1c9a      	adds	r2, r3, #2
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	86da      	strh	r2, [r3, #54]	; 0x36
 8005638:	e011      	b.n	800565e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800563a:	f7fd fde1 	bl	8003200 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d803      	bhi.n	8005652 <HAL_SPI_Transmit+0x168>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d102      	bne.n	8005658 <HAL_SPI_Transmit+0x16e>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800565c:	e074      	b.n	8005748 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1ce      	bne.n	8005606 <HAL_SPI_Transmit+0x11c>
 8005668:	e04c      	b.n	8005704 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Transmit+0x18e>
 8005672:	8afb      	ldrh	r3, [r7, #22]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d140      	bne.n	80056fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	7812      	ldrb	r2, [r2, #0]
 8005684:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800569e:	e02c      	b.n	80056fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d113      	bne.n	80056d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	7812      	ldrb	r2, [r2, #0]
 80056ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80056d4:	e011      	b.n	80056fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d6:	f7fd fd93 	bl	8003200 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d803      	bhi.n	80056ee <HAL_SPI_Transmit+0x204>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d102      	bne.n	80056f4 <HAL_SPI_Transmit+0x20a>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d102      	bne.n	80056fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056f8:	e026      	b.n	8005748 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1cd      	bne.n	80056a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fbcb 	bl	8005ea4 <SPI_EndRxTxTransaction>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005722:	2300      	movs	r3, #0
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e000      	b.n	8005748 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005746:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005758:	7ffb      	ldrb	r3, [r7, #31]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b088      	sub	sp, #32
 8005766:	af02      	add	r7, sp, #8
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	4613      	mov	r3, r2
 8005770:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577e:	d112      	bne.n	80057a6 <HAL_SPI_Receive+0x44>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10e      	bne.n	80057a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2204      	movs	r2, #4
 800578c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	4613      	mov	r3, r2
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f8f1 	bl	8005984 <HAL_SPI_TransmitReceive>
 80057a2:	4603      	mov	r3, r0
 80057a4:	e0ea      	b.n	800597c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_SPI_Receive+0x52>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e0e3      	b.n	800597c <HAL_SPI_Receive+0x21a>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057bc:	f7fd fd20 	bl	8003200 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d002      	beq.n	80057d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
 80057d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057d2:	e0ca      	b.n	800596a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_SPI_Receive+0x7e>
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057e4:	e0c1      	b.n	800596a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2204      	movs	r2, #4
 80057ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	88fa      	ldrh	r2, [r7, #6]
 80057fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582c:	d10f      	bne.n	800584e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800584c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b40      	cmp	r3, #64	; 0x40
 800585a:	d007      	beq.n	800586c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800586a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d162      	bne.n	800593a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005874:	e02e      	b.n	80058d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d115      	bne.n	80058b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f103 020c 	add.w	r2, r3, #12
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ae:	e011      	b.n	80058d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b0:	f7fd fca6 	bl	8003200 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d803      	bhi.n	80058c8 <HAL_SPI_Receive+0x166>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d102      	bne.n	80058ce <HAL_SPI_Receive+0x16c>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d102      	bne.n	80058d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058d2:	e04a      	b.n	800596a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1cb      	bne.n	8005876 <HAL_SPI_Receive+0x114>
 80058de:	e031      	b.n	8005944 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d113      	bne.n	8005916 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	b292      	uxth	r2, r2
 80058fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	1c9a      	adds	r2, r3, #2
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005914:	e011      	b.n	800593a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005916:	f7fd fc73 	bl	8003200 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d803      	bhi.n	800592e <HAL_SPI_Receive+0x1cc>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592c:	d102      	bne.n	8005934 <HAL_SPI_Receive+0x1d2>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005938:	e017      	b.n	800596a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1cd      	bne.n	80058e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fa45 	bl	8005dd8 <SPI_EndRxTransaction>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	75fb      	strb	r3, [r7, #23]
 8005966:	e000      	b.n	800596a <HAL_SPI_Receive+0x208>
  }

error :
 8005968:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08c      	sub	sp, #48	; 0x30
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005992:	2301      	movs	r3, #1
 8005994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_SPI_TransmitReceive+0x26>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e18a      	b.n	8005cc0 <HAL_SPI_TransmitReceive+0x33c>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059b2:	f7fd fc25 	bl	8003200 <HAL_GetTick>
 80059b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80059c8:	887b      	ldrh	r3, [r7, #2]
 80059ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d00f      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x70>
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059da:	d107      	bne.n	80059ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <HAL_SPI_TransmitReceive+0x68>
 80059e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d003      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059f2:	e15b      	b.n	8005cac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_SPI_TransmitReceive+0x82>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_SPI_TransmitReceive+0x82>
 8005a00:	887b      	ldrh	r3, [r7, #2]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a0c:	e14e      	b.n	8005cac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d003      	beq.n	8005a22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2205      	movs	r2, #5
 8005a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	887a      	ldrh	r2, [r7, #2]
 8005a32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	887a      	ldrh	r2, [r7, #2]
 8005a38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	887a      	ldrh	r2, [r7, #2]
 8005a44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	887a      	ldrh	r2, [r7, #2]
 8005a4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b40      	cmp	r3, #64	; 0x40
 8005a64:	d007      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7e:	d178      	bne.n	8005b72 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_SPI_TransmitReceive+0x10a>
 8005a88:	8b7b      	ldrh	r3, [r7, #26]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d166      	bne.n	8005b5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	881a      	ldrh	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	1c9a      	adds	r2, r3, #2
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ab2:	e053      	b.n	8005b5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d11b      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x176>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d016      	beq.n	8005afa <HAL_SPI_TransmitReceive+0x176>
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d113      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	881a      	ldrh	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	1c9a      	adds	r2, r3, #2
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d119      	bne.n	8005b3c <HAL_SPI_TransmitReceive+0x1b8>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d014      	beq.n	8005b3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	b292      	uxth	r2, r2
 8005b1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	1c9a      	adds	r2, r3, #2
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b3c:	f7fd fb60 	bl	8003200 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d807      	bhi.n	8005b5c <HAL_SPI_TransmitReceive+0x1d8>
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b52:	d003      	beq.n	8005b5c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b5a:	e0a7      	b.n	8005cac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1a6      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x130>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1a1      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x130>
 8005b70:	e07c      	b.n	8005c6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <HAL_SPI_TransmitReceive+0x1fc>
 8005b7a:	8b7b      	ldrh	r3, [r7, #26]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d16b      	bne.n	8005c58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	7812      	ldrb	r2, [r2, #0]
 8005b8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ba6:	e057      	b.n	8005c58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d11c      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x26c>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d017      	beq.n	8005bf0 <HAL_SPI_TransmitReceive+0x26c>
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d114      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	330c      	adds	r3, #12
 8005bd0:	7812      	ldrb	r2, [r2, #0]
 8005bd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d119      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x2ae>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d014      	beq.n	8005c32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c32:	f7fd fae5 	bl	8003200 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d803      	bhi.n	8005c4a <HAL_SPI_TransmitReceive+0x2c6>
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d102      	bne.n	8005c50 <HAL_SPI_TransmitReceive+0x2cc>
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d103      	bne.n	8005c58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c56:	e029      	b.n	8005cac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1a2      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x224>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d19d      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f917 	bl	8005ea4 <SPI_EndRxTxTransaction>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c88:	e010      	b.n	8005cac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	e000      	b.n	8005cac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005caa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3730      	adds	r7, #48	; 0x30
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cd8:	f7fd fa92 	bl	8003200 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ce8:	f7fd fa8a 	bl	8003200 <HAL_GetTick>
 8005cec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cee:	4b39      	ldr	r3, [pc, #228]	; (8005dd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	015b      	lsls	r3, r3, #5
 8005cf4:	0d1b      	lsrs	r3, r3, #20
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	fb02 f303 	mul.w	r3, r2, r3
 8005cfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cfe:	e054      	b.n	8005daa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d06:	d050      	beq.n	8005daa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d08:	f7fd fa7a 	bl	8003200 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d902      	bls.n	8005d1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d13d      	bne.n	8005d9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d36:	d111      	bne.n	8005d5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d40:	d004      	beq.n	8005d4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4a:	d107      	bne.n	8005d5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d64:	d10f      	bne.n	8005d86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e017      	b.n	8005dca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4013      	ands	r3, r2
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	bf0c      	ite	eq
 8005dba:	2301      	moveq	r3, #1
 8005dbc:	2300      	movne	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d19b      	bne.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000008 	.word	0x20000008

08005dd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dec:	d111      	bne.n	8005e12 <SPI_EndRxTransaction+0x3a>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df6:	d004      	beq.n	8005e02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e00:	d107      	bne.n	8005e12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1a:	d12a      	bne.n	8005e72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e24:	d012      	beq.n	8005e4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2180      	movs	r1, #128	; 0x80
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f7ff ff49 	bl	8005cc8 <SPI_WaitFlagStateUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d02d      	beq.n	8005e98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e40:	f043 0220 	orr.w	r2, r3, #32
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e026      	b.n	8005e9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	2101      	movs	r1, #1
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f7ff ff36 	bl	8005cc8 <SPI_WaitFlagStateUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01a      	beq.n	8005e98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e66:	f043 0220 	orr.w	r2, r3, #32
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e013      	b.n	8005e9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f7ff ff23 	bl	8005cc8 <SPI_WaitFlagStateUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8c:	f043 0220 	orr.w	r2, r3, #32
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e000      	b.n	8005e9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005eb0:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <SPI_EndRxTxTransaction+0x7c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <SPI_EndRxTxTransaction+0x80>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	0d5b      	lsrs	r3, r3, #21
 8005ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ec0:	fb02 f303 	mul.w	r3, r2, r3
 8005ec4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ece:	d112      	bne.n	8005ef6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2180      	movs	r1, #128	; 0x80
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7ff fef4 	bl	8005cc8 <SPI_WaitFlagStateUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d016      	beq.n	8005f14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	f043 0220 	orr.w	r2, r3, #32
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e00f      	b.n	8005f16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0c:	2b80      	cmp	r3, #128	; 0x80
 8005f0e:	d0f2      	beq.n	8005ef6 <SPI_EndRxTxTransaction+0x52>
 8005f10:	e000      	b.n	8005f14 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f12:	bf00      	nop
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000008 	.word	0x20000008
 8005f24:	165e9f81 	.word	0x165e9f81

08005f28 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e034      	b.n	8005fa8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7fa fd28 	bl	80009a8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f001 fc6e 	bl	8007844 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	461a      	mov	r2, r3
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	f001 fcb8 	bl	80078e8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6858      	ldr	r0, [r3, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	f001 fced 	bl	8007964 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	6892      	ldr	r2, [r2, #8]
 8005f92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	6892      	ldr	r2, [r2, #8]
 8005f9e:	f041 0101 	orr.w	r1, r1, #1
 8005fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e041      	b.n	8006046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fc ff5e 	bl	8002e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f000 fa96 	bl	8006520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	d001      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e04e      	b.n	8006106 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a23      	ldr	r2, [pc, #140]	; (8006114 <HAL_TIM_Base_Start_IT+0xc4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d022      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006092:	d01d      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <HAL_TIM_Base_Start_IT+0xc8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d018      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1e      	ldr	r2, [pc, #120]	; (800611c <HAL_TIM_Base_Start_IT+0xcc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d013      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1c      	ldr	r2, [pc, #112]	; (8006120 <HAL_TIM_Base_Start_IT+0xd0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00e      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <HAL_TIM_Base_Start_IT+0xd4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d009      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a19      	ldr	r2, [pc, #100]	; (8006128 <HAL_TIM_Base_Start_IT+0xd8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a18      	ldr	r2, [pc, #96]	; (800612c <HAL_TIM_Base_Start_IT+0xdc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d111      	bne.n	80060f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b06      	cmp	r3, #6
 80060e0:	d010      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0201 	orr.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f2:	e007      	b.n	8006104 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40010400 	.word	0x40010400
 8006128:	40014000 	.word	0x40014000
 800612c:	40001800 	.word	0x40001800

08006130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b02      	cmp	r3, #2
 8006144:	d122      	bne.n	800618c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b02      	cmp	r3, #2
 8006152:	d11b      	bne.n	800618c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0202 	mvn.w	r2, #2
 800615c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f9b5 	bl	80064e2 <HAL_TIM_IC_CaptureCallback>
 8006178:	e005      	b.n	8006186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f9a7 	bl	80064ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f9b8 	bl	80064f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b04      	cmp	r3, #4
 8006198:	d122      	bne.n	80061e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d11b      	bne.n	80061e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0204 	mvn.w	r2, #4
 80061b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f98b 	bl	80064e2 <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f97d 	bl	80064ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f98e 	bl	80064f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0308 	and.w	r3, r3, #8
 80061ea:	2b08      	cmp	r3, #8
 80061ec:	d122      	bne.n	8006234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0208 	mvn.w	r2, #8
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2204      	movs	r2, #4
 800620a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f961 	bl	80064e2 <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f953 	bl	80064ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f964 	bl	80064f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b10      	cmp	r3, #16
 8006240:	d122      	bne.n	8006288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b10      	cmp	r3, #16
 800624e:	d11b      	bne.n	8006288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0210 	mvn.w	r2, #16
 8006258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2208      	movs	r2, #8
 800625e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f937 	bl	80064e2 <HAL_TIM_IC_CaptureCallback>
 8006274:	e005      	b.n	8006282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f929 	bl	80064ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f93a 	bl	80064f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b01      	cmp	r3, #1
 8006294:	d10e      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d107      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0201 	mvn.w	r2, #1
 80062ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fc fc50 	bl	8002b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062be:	2b80      	cmp	r3, #128	; 0x80
 80062c0:	d10e      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062cc:	2b80      	cmp	r3, #128	; 0x80
 80062ce:	d107      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fae0 	bl	80068a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d10e      	bne.n	800630c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b40      	cmp	r3, #64	; 0x40
 80062fa:	d107      	bne.n	800630c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f8ff 	bl	800650a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b20      	cmp	r3, #32
 8006318:	d10e      	bne.n	8006338 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b20      	cmp	r3, #32
 8006326:	d107      	bne.n	8006338 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0220 	mvn.w	r2, #32
 8006330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 faaa 	bl	800688c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006338:	bf00      	nop
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_TIM_ConfigClockSource+0x1c>
 8006358:	2302      	movs	r3, #2
 800635a:	e0b4      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x186>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800637a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006382:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006394:	d03e      	beq.n	8006414 <HAL_TIM_ConfigClockSource+0xd4>
 8006396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639a:	f200 8087 	bhi.w	80064ac <HAL_TIM_ConfigClockSource+0x16c>
 800639e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a2:	f000 8086 	beq.w	80064b2 <HAL_TIM_ConfigClockSource+0x172>
 80063a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063aa:	d87f      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x16c>
 80063ac:	2b70      	cmp	r3, #112	; 0x70
 80063ae:	d01a      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0xa6>
 80063b0:	2b70      	cmp	r3, #112	; 0x70
 80063b2:	d87b      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x16c>
 80063b4:	2b60      	cmp	r3, #96	; 0x60
 80063b6:	d050      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x11a>
 80063b8:	2b60      	cmp	r3, #96	; 0x60
 80063ba:	d877      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x16c>
 80063bc:	2b50      	cmp	r3, #80	; 0x50
 80063be:	d03c      	beq.n	800643a <HAL_TIM_ConfigClockSource+0xfa>
 80063c0:	2b50      	cmp	r3, #80	; 0x50
 80063c2:	d873      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x16c>
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	d058      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x13a>
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d86f      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x16c>
 80063cc:	2b30      	cmp	r3, #48	; 0x30
 80063ce:	d064      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x15a>
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	d86b      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x16c>
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d060      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x15a>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d867      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x16c>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d05c      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x15a>
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d05a      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x15a>
 80063e4:	e062      	b.n	80064ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6899      	ldr	r1, [r3, #8]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f000 f9ad 	bl	8006754 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	609a      	str	r2, [r3, #8]
      break;
 8006412:	e04f      	b.n	80064b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	6899      	ldr	r1, [r3, #8]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f000 f996 	bl	8006754 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006436:	609a      	str	r2, [r3, #8]
      break;
 8006438:	e03c      	b.n	80064b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6859      	ldr	r1, [r3, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	461a      	mov	r2, r3
 8006448:	f000 f90a 	bl	8006660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2150      	movs	r1, #80	; 0x50
 8006452:	4618      	mov	r0, r3
 8006454:	f000 f963 	bl	800671e <TIM_ITRx_SetConfig>
      break;
 8006458:	e02c      	b.n	80064b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	461a      	mov	r2, r3
 8006468:	f000 f929 	bl	80066be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2160      	movs	r1, #96	; 0x60
 8006472:	4618      	mov	r0, r3
 8006474:	f000 f953 	bl	800671e <TIM_ITRx_SetConfig>
      break;
 8006478:	e01c      	b.n	80064b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6859      	ldr	r1, [r3, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	461a      	mov	r2, r3
 8006488:	f000 f8ea 	bl	8006660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2140      	movs	r1, #64	; 0x40
 8006492:	4618      	mov	r0, r3
 8006494:	f000 f943 	bl	800671e <TIM_ITRx_SetConfig>
      break;
 8006498:	e00c      	b.n	80064b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4619      	mov	r1, r3
 80064a4:	4610      	mov	r0, r2
 80064a6:	f000 f93a 	bl	800671e <TIM_ITRx_SetConfig>
      break;
 80064aa:	e003      	b.n	80064b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	73fb      	strb	r3, [r7, #15]
      break;
 80064b0:	e000      	b.n	80064b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
	...

08006520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a40      	ldr	r2, [pc, #256]	; (8006634 <TIM_Base_SetConfig+0x114>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d013      	beq.n	8006560 <TIM_Base_SetConfig+0x40>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653e:	d00f      	beq.n	8006560 <TIM_Base_SetConfig+0x40>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a3d      	ldr	r2, [pc, #244]	; (8006638 <TIM_Base_SetConfig+0x118>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00b      	beq.n	8006560 <TIM_Base_SetConfig+0x40>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a3c      	ldr	r2, [pc, #240]	; (800663c <TIM_Base_SetConfig+0x11c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_Base_SetConfig+0x40>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a3b      	ldr	r2, [pc, #236]	; (8006640 <TIM_Base_SetConfig+0x120>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_Base_SetConfig+0x40>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a3a      	ldr	r2, [pc, #232]	; (8006644 <TIM_Base_SetConfig+0x124>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d108      	bne.n	8006572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2f      	ldr	r2, [pc, #188]	; (8006634 <TIM_Base_SetConfig+0x114>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d02b      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006580:	d027      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a2c      	ldr	r2, [pc, #176]	; (8006638 <TIM_Base_SetConfig+0x118>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d023      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2b      	ldr	r2, [pc, #172]	; (800663c <TIM_Base_SetConfig+0x11c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01f      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a2a      	ldr	r2, [pc, #168]	; (8006640 <TIM_Base_SetConfig+0x120>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01b      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a29      	ldr	r2, [pc, #164]	; (8006644 <TIM_Base_SetConfig+0x124>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d017      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a28      	ldr	r2, [pc, #160]	; (8006648 <TIM_Base_SetConfig+0x128>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d013      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a27      	ldr	r2, [pc, #156]	; (800664c <TIM_Base_SetConfig+0x12c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00f      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a26      	ldr	r2, [pc, #152]	; (8006650 <TIM_Base_SetConfig+0x130>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00b      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a25      	ldr	r2, [pc, #148]	; (8006654 <TIM_Base_SetConfig+0x134>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d007      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a24      	ldr	r2, [pc, #144]	; (8006658 <TIM_Base_SetConfig+0x138>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a23      	ldr	r2, [pc, #140]	; (800665c <TIM_Base_SetConfig+0x13c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d108      	bne.n	80065e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a0a      	ldr	r2, [pc, #40]	; (8006634 <TIM_Base_SetConfig+0x114>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_Base_SetConfig+0xf8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a0c      	ldr	r2, [pc, #48]	; (8006644 <TIM_Base_SetConfig+0x124>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d103      	bne.n	8006620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	615a      	str	r2, [r3, #20]
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40010000 	.word	0x40010000
 8006638:	40000400 	.word	0x40000400
 800663c:	40000800 	.word	0x40000800
 8006640:	40000c00 	.word	0x40000c00
 8006644:	40010400 	.word	0x40010400
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400
 8006650:	40014800 	.word	0x40014800
 8006654:	40001800 	.word	0x40001800
 8006658:	40001c00 	.word	0x40001c00
 800665c:	40002000 	.word	0x40002000

08006660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f023 0201 	bic.w	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800668a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f023 030a 	bic.w	r3, r3, #10
 800669c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066be:	b480      	push	{r7}
 80066c0:	b087      	sub	sp, #28
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f023 0210 	bic.w	r2, r3, #16
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	031b      	lsls	r3, r3, #12
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	f043 0307 	orr.w	r3, r3, #7
 8006740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	609a      	str	r2, [r3, #8]
}
 8006748:	bf00      	nop
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800676e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	021a      	lsls	r2, r3, #8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	431a      	orrs	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	4313      	orrs	r3, r2
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	609a      	str	r2, [r3, #8]
}
 8006788:	bf00      	nop
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e05a      	b.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a21      	ldr	r2, [pc, #132]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d022      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f8:	d01d      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d018      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1b      	ldr	r2, [pc, #108]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d013      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1a      	ldr	r2, [pc, #104]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00e      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a18      	ldr	r2, [pc, #96]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d009      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a17      	ldr	r2, [pc, #92]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d004      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a15      	ldr	r2, [pc, #84]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d10c      	bne.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800683c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	4313      	orrs	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40010000 	.word	0x40010000
 8006874:	40000400 	.word	0x40000400
 8006878:	40000800 	.word	0x40000800
 800687c:	40000c00 	.word	0x40000c00
 8006880:	40010400 	.word	0x40010400
 8006884:	40014000 	.word	0x40014000
 8006888:	40001800 	.word	0x40001800

0800688c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e03f      	b.n	8006946 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fc fb72 	bl	8002fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2224      	movs	r2, #36	; 0x24
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fddb 	bl	80074b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800690c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	695a      	ldr	r2, [r3, #20]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800691c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800692c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b08a      	sub	sp, #40	; 0x28
 8006952:	af02      	add	r7, sp, #8
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	603b      	str	r3, [r7, #0]
 800695a:	4613      	mov	r3, r2
 800695c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b20      	cmp	r3, #32
 800696c:	d17c      	bne.n	8006a68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <HAL_UART_Transmit+0x2c>
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e075      	b.n	8006a6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <HAL_UART_Transmit+0x3e>
 8006988:	2302      	movs	r3, #2
 800698a:	e06e      	b.n	8006a6a <HAL_UART_Transmit+0x11c>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2221      	movs	r2, #33	; 0x21
 800699e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069a2:	f7fc fc2d 	bl	8003200 <HAL_GetTick>
 80069a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	88fa      	ldrh	r2, [r7, #6]
 80069ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	88fa      	ldrh	r2, [r7, #6]
 80069b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069bc:	d108      	bne.n	80069d0 <HAL_UART_Transmit+0x82>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	e003      	b.n	80069d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069e0:	e02a      	b.n	8006a38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2200      	movs	r2, #0
 80069ea:	2180      	movs	r1, #128	; 0x80
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 fb1f 	bl	8007030 <UART_WaitOnFlagUntilTimeout>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e036      	b.n	8006a6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	3302      	adds	r3, #2
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	e007      	b.n	8006a2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	3301      	adds	r3, #1
 8006a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1cf      	bne.n	80069e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2140      	movs	r1, #64	; 0x40
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 faef 	bl	8007030 <UART_WaitOnFlagUntilTimeout>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e006      	b.n	8006a6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	e000      	b.n	8006a6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a68:	2302      	movs	r3, #2
  }
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d11d      	bne.n	8006ac8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <HAL_UART_Receive_IT+0x26>
 8006a92:	88fb      	ldrh	r3, [r7, #6]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e016      	b.n	8006aca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_UART_Receive_IT+0x38>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e00f      	b.n	8006aca <HAL_UART_Receive_IT+0x58>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	461a      	mov	r2, r3
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 fb24 	bl	800710c <UART_Start_Receive_IT>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	e000      	b.n	8006aca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ac8:	2302      	movs	r3, #2
  }
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b0ba      	sub	sp, #232	; 0xe8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10f      	bne.n	8006b3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <HAL_UART_IRQHandler+0x66>
 8006b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fc03 	bl	800733e <UART_Receive_IT>
      return;
 8006b38:	e256      	b.n	8006fe8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 80de 	beq.w	8006d00 <HAL_UART_IRQHandler+0x22c>
 8006b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d106      	bne.n	8006b5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80d1 	beq.w	8006d00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00b      	beq.n	8006b82 <HAL_UART_IRQHandler+0xae>
 8006b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f043 0201 	orr.w	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b86:	f003 0304 	and.w	r3, r3, #4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00b      	beq.n	8006ba6 <HAL_UART_IRQHandler+0xd2>
 8006b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f043 0202 	orr.w	r2, r3, #2
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <HAL_UART_IRQHandler+0xf6>
 8006bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f043 0204 	orr.w	r2, r3, #4
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d011      	beq.n	8006bfa <HAL_UART_IRQHandler+0x126>
 8006bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d105      	bne.n	8006bee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f043 0208 	orr.w	r2, r3, #8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 81ed 	beq.w	8006fde <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c08:	f003 0320 	and.w	r3, r3, #32
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d008      	beq.n	8006c22 <HAL_UART_IRQHandler+0x14e>
 8006c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fb8e 	bl	800733e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2c:	2b40      	cmp	r3, #64	; 0x40
 8006c2e:	bf0c      	ite	eq
 8006c30:	2301      	moveq	r3, #1
 8006c32:	2300      	movne	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d103      	bne.n	8006c4e <HAL_UART_IRQHandler+0x17a>
 8006c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d04f      	beq.n	8006cee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fa96 	bl	8007180 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d141      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3314      	adds	r3, #20
 8006c68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3314      	adds	r3, #20
 8006c8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ca6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1d9      	bne.n	8006c62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d013      	beq.n	8006cde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	4a7d      	ldr	r2, [pc, #500]	; (8006eb0 <HAL_UART_IRQHandler+0x3dc>)
 8006cbc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fc fc4d 	bl	8003562 <HAL_DMA_Abort_IT>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d016      	beq.n	8006cfc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cdc:	e00e      	b.n	8006cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f990 	bl	8007004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce4:	e00a      	b.n	8006cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f98c 	bl	8007004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cec:	e006      	b.n	8006cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f988 	bl	8007004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006cfa:	e170      	b.n	8006fde <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfc:	bf00      	nop
    return;
 8006cfe:	e16e      	b.n	8006fde <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	f040 814a 	bne.w	8006f9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 8143 	beq.w	8006f9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 813c 	beq.w	8006f9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60bb      	str	r3, [r7, #8]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	f040 80b4 	bne.w	8006eb4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8140 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	f080 8139 	bcs.w	8006fe2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d82:	f000 8088 	beq.w	8006e96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	330c      	adds	r3, #12
 8006d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006da4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	330c      	adds	r3, #12
 8006dae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006db2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1d9      	bne.n	8006d86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3314      	adds	r3, #20
 8006dd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006de4:	f023 0301 	bic.w	r3, r3, #1
 8006de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3314      	adds	r3, #20
 8006df2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006df6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e1      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3314      	adds	r3, #20
 8006e14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3314      	adds	r3, #20
 8006e2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e3      	bne.n	8006e0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e66:	f023 0310 	bic.w	r3, r3, #16
 8006e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	330c      	adds	r3, #12
 8006e74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e78:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e80:	e841 2300 	strex	r3, r2, [r1]
 8006e84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e3      	bne.n	8006e54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fc faf6 	bl	8003482 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f8b6 	bl	8007018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006eac:	e099      	b.n	8006fe2 <HAL_UART_IRQHandler+0x50e>
 8006eae:	bf00      	nop
 8006eb0:	08007247 	.word	0x08007247
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 808b 	beq.w	8006fe6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8086 	beq.w	8006fe6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	330c      	adds	r3, #12
 8006ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006efe:	647a      	str	r2, [r7, #68]	; 0x44
 8006f00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e3      	bne.n	8006eda <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3314      	adds	r3, #20
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	623b      	str	r3, [r7, #32]
   return(result);
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	f023 0301 	bic.w	r3, r3, #1
 8006f28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3314      	adds	r3, #20
 8006f32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f36:	633a      	str	r2, [r7, #48]	; 0x30
 8006f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e3      	bne.n	8006f12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	330c      	adds	r3, #12
 8006f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0310 	bic.w	r3, r3, #16
 8006f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	330c      	adds	r3, #12
 8006f78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f7c:	61fa      	str	r2, [r7, #28]
 8006f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	69b9      	ldr	r1, [r7, #24]
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	617b      	str	r3, [r7, #20]
   return(result);
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e3      	bne.n	8006f58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f83e 	bl	8007018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f9c:	e023      	b.n	8006fe6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d009      	beq.n	8006fbe <HAL_UART_IRQHandler+0x4ea>
 8006faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f959 	bl	800726e <UART_Transmit_IT>
    return;
 8006fbc:	e014      	b.n	8006fe8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00e      	beq.n	8006fe8 <HAL_UART_IRQHandler+0x514>
 8006fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d008      	beq.n	8006fe8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f999 	bl	800730e <UART_EndTransmit_IT>
    return;
 8006fdc:	e004      	b.n	8006fe8 <HAL_UART_IRQHandler+0x514>
    return;
 8006fde:	bf00      	nop
 8006fe0:	e002      	b.n	8006fe8 <HAL_UART_IRQHandler+0x514>
      return;
 8006fe2:	bf00      	nop
 8006fe4:	e000      	b.n	8006fe8 <HAL_UART_IRQHandler+0x514>
      return;
 8006fe6:	bf00      	nop
  }
}
 8006fe8:	37e8      	adds	r7, #232	; 0xe8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop

08006ff0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b090      	sub	sp, #64	; 0x40
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	4613      	mov	r3, r2
 800703e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007040:	e050      	b.n	80070e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d04c      	beq.n	80070e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800704a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <UART_WaitOnFlagUntilTimeout+0x30>
 8007050:	f7fc f8d6 	bl	8003200 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800705c:	429a      	cmp	r2, r3
 800705e:	d241      	bcs.n	80070e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	330c      	adds	r3, #12
 800707e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007080:	637a      	str	r2, [r7, #52]	; 0x34
 8007082:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e5      	bne.n	8007060 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3314      	adds	r3, #20
 800709a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	613b      	str	r3, [r7, #16]
   return(result);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3314      	adds	r3, #20
 80070b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070b4:	623a      	str	r2, [r7, #32]
 80070b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	69f9      	ldr	r1, [r7, #28]
 80070ba:	6a3a      	ldr	r2, [r7, #32]
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e5      	bne.n	8007094 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e00f      	b.n	8007104 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	4013      	ands	r3, r2
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	bf0c      	ite	eq
 80070f4:	2301      	moveq	r3, #1
 80070f6:	2300      	movne	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	461a      	mov	r2, r3
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d09f      	beq.n	8007042 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3740      	adds	r7, #64	; 0x40
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	88fa      	ldrh	r2, [r7, #6]
 8007124:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	88fa      	ldrh	r2, [r7, #6]
 800712a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2222      	movs	r2, #34	; 0x22
 8007136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007150:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	695a      	ldr	r2, [r3, #20]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f042 0201 	orr.w	r2, r2, #1
 8007160:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0220 	orr.w	r2, r2, #32
 8007170:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007180:	b480      	push	{r7}
 8007182:	b095      	sub	sp, #84	; 0x54
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	330c      	adds	r3, #12
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	e853 3f00 	ldrex	r3, [r3]
 8007196:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800719e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	330c      	adds	r3, #12
 80071a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071a8:	643a      	str	r2, [r7, #64]	; 0x40
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e5      	bne.n	8007188 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3314      	adds	r3, #20
 80071c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f023 0301 	bic.w	r3, r3, #1
 80071d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3314      	adds	r3, #20
 80071da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e5      	bne.n	80071bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d119      	bne.n	800722c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	330c      	adds	r3, #12
 80071fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	60bb      	str	r3, [r7, #8]
   return(result);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f023 0310 	bic.w	r3, r3, #16
 800720e:	647b      	str	r3, [r7, #68]	; 0x44
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	330c      	adds	r3, #12
 8007216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007218:	61ba      	str	r2, [r7, #24]
 800721a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6979      	ldr	r1, [r7, #20]
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	613b      	str	r3, [r7, #16]
   return(result);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e5      	bne.n	80071f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2220      	movs	r2, #32
 8007230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
}
 800723a:	bf00      	nop
 800723c:	3754      	adds	r7, #84	; 0x54
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7ff fecf 	bl	8007004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b21      	cmp	r3, #33	; 0x21
 8007280:	d13e      	bne.n	8007300 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728a:	d114      	bne.n	80072b6 <UART_Transmit_IT+0x48>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d110      	bne.n	80072b6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	1c9a      	adds	r2, r3, #2
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	621a      	str	r2, [r3, #32]
 80072b4:	e008      	b.n	80072c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	1c59      	adds	r1, r3, #1
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6211      	str	r1, [r2, #32]
 80072c0:	781a      	ldrb	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	4619      	mov	r1, r3
 80072d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10f      	bne.n	80072fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e000      	b.n	8007302 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007300:	2302      	movs	r3, #2
  }
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007324:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2220      	movs	r2, #32
 800732a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fe5e 	bl	8006ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b08c      	sub	sp, #48	; 0x30
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b22      	cmp	r3, #34	; 0x22
 8007350:	f040 80ab 	bne.w	80074aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735c:	d117      	bne.n	800738e <UART_Receive_IT+0x50>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d113      	bne.n	800738e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	b29b      	uxth	r3, r3
 8007378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737c:	b29a      	uxth	r2, r3
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007386:	1c9a      	adds	r2, r3, #2
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	629a      	str	r2, [r3, #40]	; 0x28
 800738c:	e026      	b.n	80073dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007392:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a0:	d007      	beq.n	80073b2 <UART_Receive_IT+0x74>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <UART_Receive_IT+0x82>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	e008      	b.n	80073d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	4619      	mov	r1, r3
 80073ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d15a      	bne.n	80074a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0220 	bic.w	r2, r2, #32
 80073fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800740e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695a      	ldr	r2, [r3, #20]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0201 	bic.w	r2, r2, #1
 800741e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	2b01      	cmp	r3, #1
 800742e:	d135      	bne.n	800749c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	330c      	adds	r3, #12
 800743c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	613b      	str	r3, [r7, #16]
   return(result);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f023 0310 	bic.w	r3, r3, #16
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	330c      	adds	r3, #12
 8007454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007456:	623a      	str	r2, [r7, #32]
 8007458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	69f9      	ldr	r1, [r7, #28]
 800745c:	6a3a      	ldr	r2, [r7, #32]
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	61bb      	str	r3, [r7, #24]
   return(result);
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e5      	bne.n	8007436 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0310 	and.w	r3, r3, #16
 8007474:	2b10      	cmp	r3, #16
 8007476:	d10a      	bne.n	800748e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff fdbf 	bl	8007018 <HAL_UARTEx_RxEventCallback>
 800749a:	e002      	b.n	80074a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7fb fd49 	bl	8002f34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e002      	b.n	80074ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	e000      	b.n	80074ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80074aa:	2302      	movs	r3, #2
  }
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3730      	adds	r7, #48	; 0x30
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b8:	b09f      	sub	sp, #124	; 0x7c
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ca:	68d9      	ldr	r1, [r3, #12]
 80074cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	ea40 0301 	orr.w	r3, r0, r1
 80074d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	431a      	orrs	r2, r3
 80074e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	431a      	orrs	r2, r3
 80074e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80074ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074f8:	f021 010c 	bic.w	r1, r1, #12
 80074fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007502:	430b      	orrs	r3, r1
 8007504:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007512:	6999      	ldr	r1, [r3, #24]
 8007514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	ea40 0301 	orr.w	r3, r0, r1
 800751c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800751e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4bc5      	ldr	r3, [pc, #788]	; (8007838 <UART_SetConfig+0x384>)
 8007524:	429a      	cmp	r2, r3
 8007526:	d004      	beq.n	8007532 <UART_SetConfig+0x7e>
 8007528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	4bc3      	ldr	r3, [pc, #780]	; (800783c <UART_SetConfig+0x388>)
 800752e:	429a      	cmp	r2, r3
 8007530:	d103      	bne.n	800753a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007532:	f7fd ff3d 	bl	80053b0 <HAL_RCC_GetPCLK2Freq>
 8007536:	6778      	str	r0, [r7, #116]	; 0x74
 8007538:	e002      	b.n	8007540 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800753a:	f7fd ff25 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 800753e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007548:	f040 80b6 	bne.w	80076b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800754c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800754e:	461c      	mov	r4, r3
 8007550:	f04f 0500 	mov.w	r5, #0
 8007554:	4622      	mov	r2, r4
 8007556:	462b      	mov	r3, r5
 8007558:	1891      	adds	r1, r2, r2
 800755a:	6439      	str	r1, [r7, #64]	; 0x40
 800755c:	415b      	adcs	r3, r3
 800755e:	647b      	str	r3, [r7, #68]	; 0x44
 8007560:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007564:	1912      	adds	r2, r2, r4
 8007566:	eb45 0303 	adc.w	r3, r5, r3
 800756a:	f04f 0000 	mov.w	r0, #0
 800756e:	f04f 0100 	mov.w	r1, #0
 8007572:	00d9      	lsls	r1, r3, #3
 8007574:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007578:	00d0      	lsls	r0, r2, #3
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	1911      	adds	r1, r2, r4
 8007580:	6639      	str	r1, [r7, #96]	; 0x60
 8007582:	416b      	adcs	r3, r5
 8007584:	667b      	str	r3, [r7, #100]	; 0x64
 8007586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	461a      	mov	r2, r3
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	1891      	adds	r1, r2, r2
 8007592:	63b9      	str	r1, [r7, #56]	; 0x38
 8007594:	415b      	adcs	r3, r3
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800759c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80075a0:	f7f8 fe7e 	bl	80002a0 <__aeabi_uldivmod>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4ba5      	ldr	r3, [pc, #660]	; (8007840 <UART_SetConfig+0x38c>)
 80075aa:	fba3 2302 	umull	r2, r3, r3, r2
 80075ae:	095b      	lsrs	r3, r3, #5
 80075b0:	011e      	lsls	r6, r3, #4
 80075b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b4:	461c      	mov	r4, r3
 80075b6:	f04f 0500 	mov.w	r5, #0
 80075ba:	4622      	mov	r2, r4
 80075bc:	462b      	mov	r3, r5
 80075be:	1891      	adds	r1, r2, r2
 80075c0:	6339      	str	r1, [r7, #48]	; 0x30
 80075c2:	415b      	adcs	r3, r3
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
 80075c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075ca:	1912      	adds	r2, r2, r4
 80075cc:	eb45 0303 	adc.w	r3, r5, r3
 80075d0:	f04f 0000 	mov.w	r0, #0
 80075d4:	f04f 0100 	mov.w	r1, #0
 80075d8:	00d9      	lsls	r1, r3, #3
 80075da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075de:	00d0      	lsls	r0, r2, #3
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	1911      	adds	r1, r2, r4
 80075e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80075e8:	416b      	adcs	r3, r5
 80075ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	461a      	mov	r2, r3
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	1891      	adds	r1, r2, r2
 80075f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80075fa:	415b      	adcs	r3, r3
 80075fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007602:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007606:	f7f8 fe4b 	bl	80002a0 <__aeabi_uldivmod>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4b8c      	ldr	r3, [pc, #560]	; (8007840 <UART_SetConfig+0x38c>)
 8007610:	fba3 1302 	umull	r1, r3, r3, r2
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	2164      	movs	r1, #100	; 0x64
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	3332      	adds	r3, #50	; 0x32
 8007622:	4a87      	ldr	r2, [pc, #540]	; (8007840 <UART_SetConfig+0x38c>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	095b      	lsrs	r3, r3, #5
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007630:	441e      	add	r6, r3
 8007632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007634:	4618      	mov	r0, r3
 8007636:	f04f 0100 	mov.w	r1, #0
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	1894      	adds	r4, r2, r2
 8007640:	623c      	str	r4, [r7, #32]
 8007642:	415b      	adcs	r3, r3
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
 8007646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800764a:	1812      	adds	r2, r2, r0
 800764c:	eb41 0303 	adc.w	r3, r1, r3
 8007650:	f04f 0400 	mov.w	r4, #0
 8007654:	f04f 0500 	mov.w	r5, #0
 8007658:	00dd      	lsls	r5, r3, #3
 800765a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800765e:	00d4      	lsls	r4, r2, #3
 8007660:	4622      	mov	r2, r4
 8007662:	462b      	mov	r3, r5
 8007664:	1814      	adds	r4, r2, r0
 8007666:	653c      	str	r4, [r7, #80]	; 0x50
 8007668:	414b      	adcs	r3, r1
 800766a:	657b      	str	r3, [r7, #84]	; 0x54
 800766c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	461a      	mov	r2, r3
 8007672:	f04f 0300 	mov.w	r3, #0
 8007676:	1891      	adds	r1, r2, r2
 8007678:	61b9      	str	r1, [r7, #24]
 800767a:	415b      	adcs	r3, r3
 800767c:	61fb      	str	r3, [r7, #28]
 800767e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007682:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007686:	f7f8 fe0b 	bl	80002a0 <__aeabi_uldivmod>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4b6c      	ldr	r3, [pc, #432]	; (8007840 <UART_SetConfig+0x38c>)
 8007690:	fba3 1302 	umull	r1, r3, r3, r2
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	2164      	movs	r1, #100	; 0x64
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	3332      	adds	r3, #50	; 0x32
 80076a2:	4a67      	ldr	r2, [pc, #412]	; (8007840 <UART_SetConfig+0x38c>)
 80076a4:	fba2 2303 	umull	r2, r3, r2, r3
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	f003 0207 	and.w	r2, r3, #7
 80076ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4432      	add	r2, r6
 80076b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076b6:	e0b9      	b.n	800782c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ba:	461c      	mov	r4, r3
 80076bc:	f04f 0500 	mov.w	r5, #0
 80076c0:	4622      	mov	r2, r4
 80076c2:	462b      	mov	r3, r5
 80076c4:	1891      	adds	r1, r2, r2
 80076c6:	6139      	str	r1, [r7, #16]
 80076c8:	415b      	adcs	r3, r3
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076d0:	1912      	adds	r2, r2, r4
 80076d2:	eb45 0303 	adc.w	r3, r5, r3
 80076d6:	f04f 0000 	mov.w	r0, #0
 80076da:	f04f 0100 	mov.w	r1, #0
 80076de:	00d9      	lsls	r1, r3, #3
 80076e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076e4:	00d0      	lsls	r0, r2, #3
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	eb12 0804 	adds.w	r8, r2, r4
 80076ee:	eb43 0905 	adc.w	r9, r3, r5
 80076f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f04f 0100 	mov.w	r1, #0
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	008b      	lsls	r3, r1, #2
 8007706:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800770a:	0082      	lsls	r2, r0, #2
 800770c:	4640      	mov	r0, r8
 800770e:	4649      	mov	r1, r9
 8007710:	f7f8 fdc6 	bl	80002a0 <__aeabi_uldivmod>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4b49      	ldr	r3, [pc, #292]	; (8007840 <UART_SetConfig+0x38c>)
 800771a:	fba3 2302 	umull	r2, r3, r3, r2
 800771e:	095b      	lsrs	r3, r3, #5
 8007720:	011e      	lsls	r6, r3, #4
 8007722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007724:	4618      	mov	r0, r3
 8007726:	f04f 0100 	mov.w	r1, #0
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	1894      	adds	r4, r2, r2
 8007730:	60bc      	str	r4, [r7, #8]
 8007732:	415b      	adcs	r3, r3
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800773a:	1812      	adds	r2, r2, r0
 800773c:	eb41 0303 	adc.w	r3, r1, r3
 8007740:	f04f 0400 	mov.w	r4, #0
 8007744:	f04f 0500 	mov.w	r5, #0
 8007748:	00dd      	lsls	r5, r3, #3
 800774a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800774e:	00d4      	lsls	r4, r2, #3
 8007750:	4622      	mov	r2, r4
 8007752:	462b      	mov	r3, r5
 8007754:	1814      	adds	r4, r2, r0
 8007756:	64bc      	str	r4, [r7, #72]	; 0x48
 8007758:	414b      	adcs	r3, r1
 800775a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800775c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	4618      	mov	r0, r3
 8007762:	f04f 0100 	mov.w	r1, #0
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	f04f 0300 	mov.w	r3, #0
 800776e:	008b      	lsls	r3, r1, #2
 8007770:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007774:	0082      	lsls	r2, r0, #2
 8007776:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800777a:	f7f8 fd91 	bl	80002a0 <__aeabi_uldivmod>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4b2f      	ldr	r3, [pc, #188]	; (8007840 <UART_SetConfig+0x38c>)
 8007784:	fba3 1302 	umull	r1, r3, r3, r2
 8007788:	095b      	lsrs	r3, r3, #5
 800778a:	2164      	movs	r1, #100	; 0x64
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	011b      	lsls	r3, r3, #4
 8007794:	3332      	adds	r3, #50	; 0x32
 8007796:	4a2a      	ldr	r2, [pc, #168]	; (8007840 <UART_SetConfig+0x38c>)
 8007798:	fba2 2303 	umull	r2, r3, r2, r3
 800779c:	095b      	lsrs	r3, r3, #5
 800779e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077a2:	441e      	add	r6, r3
 80077a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077a6:	4618      	mov	r0, r3
 80077a8:	f04f 0100 	mov.w	r1, #0
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	1894      	adds	r4, r2, r2
 80077b2:	603c      	str	r4, [r7, #0]
 80077b4:	415b      	adcs	r3, r3
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077bc:	1812      	adds	r2, r2, r0
 80077be:	eb41 0303 	adc.w	r3, r1, r3
 80077c2:	f04f 0400 	mov.w	r4, #0
 80077c6:	f04f 0500 	mov.w	r5, #0
 80077ca:	00dd      	lsls	r5, r3, #3
 80077cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80077d0:	00d4      	lsls	r4, r2, #3
 80077d2:	4622      	mov	r2, r4
 80077d4:	462b      	mov	r3, r5
 80077d6:	eb12 0a00 	adds.w	sl, r2, r0
 80077da:	eb43 0b01 	adc.w	fp, r3, r1
 80077de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f04f 0100 	mov.w	r1, #0
 80077e8:	f04f 0200 	mov.w	r2, #0
 80077ec:	f04f 0300 	mov.w	r3, #0
 80077f0:	008b      	lsls	r3, r1, #2
 80077f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077f6:	0082      	lsls	r2, r0, #2
 80077f8:	4650      	mov	r0, sl
 80077fa:	4659      	mov	r1, fp
 80077fc:	f7f8 fd50 	bl	80002a0 <__aeabi_uldivmod>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4b0e      	ldr	r3, [pc, #56]	; (8007840 <UART_SetConfig+0x38c>)
 8007806:	fba3 1302 	umull	r1, r3, r3, r2
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	2164      	movs	r1, #100	; 0x64
 800780e:	fb01 f303 	mul.w	r3, r1, r3
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	3332      	adds	r3, #50	; 0x32
 8007818:	4a09      	ldr	r2, [pc, #36]	; (8007840 <UART_SetConfig+0x38c>)
 800781a:	fba2 2303 	umull	r2, r3, r2, r3
 800781e:	095b      	lsrs	r3, r3, #5
 8007820:	f003 020f 	and.w	r2, r3, #15
 8007824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4432      	add	r2, r6
 800782a:	609a      	str	r2, [r3, #8]
}
 800782c:	bf00      	nop
 800782e:	377c      	adds	r7, #124	; 0x7c
 8007830:	46bd      	mov	sp, r7
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	bf00      	nop
 8007838:	40011000 	.word	0x40011000
 800783c:	40011400 	.word	0x40011400
 8007840:	51eb851f 	.word	0x51eb851f

08007844 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <FSMC_NORSRAM_Init+0xa0>)
 8007862:	4013      	ands	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800786e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007874:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800787a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007880:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007886:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800788c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007892:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007898:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800789e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80078a4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80078aa:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80078b0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d103      	bne.n	80078c8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68f9      	ldr	r1, [r7, #12]
 80078d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	fff00080 	.word	0xfff00080

080078e8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007902:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800790a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007916:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800791e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007926:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	3b01      	subs	r3, #1
 800792e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007930:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	3b02      	subs	r3, #2
 8007938:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800793a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007940:	4313      	orrs	r3, r2
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6979      	ldr	r1, [r7, #20]
 8007950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
	...

08007964 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800797c:	d122      	bne.n	80079c4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007986:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800798c:	4013      	ands	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800799a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80079a2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80079aa:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80079b0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6979      	ldr	r1, [r7, #20]
 80079be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80079c2:	e005      	b.n	80079d0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80079cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	cff00000 	.word	0xcff00000

080079e4 <__errno>:
 80079e4:	4b01      	ldr	r3, [pc, #4]	; (80079ec <__errno+0x8>)
 80079e6:	6818      	ldr	r0, [r3, #0]
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	20000014 	.word	0x20000014

080079f0 <__libc_init_array>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	4d0d      	ldr	r5, [pc, #52]	; (8007a28 <__libc_init_array+0x38>)
 80079f4:	4c0d      	ldr	r4, [pc, #52]	; (8007a2c <__libc_init_array+0x3c>)
 80079f6:	1b64      	subs	r4, r4, r5
 80079f8:	10a4      	asrs	r4, r4, #2
 80079fa:	2600      	movs	r6, #0
 80079fc:	42a6      	cmp	r6, r4
 80079fe:	d109      	bne.n	8007a14 <__libc_init_array+0x24>
 8007a00:	4d0b      	ldr	r5, [pc, #44]	; (8007a30 <__libc_init_array+0x40>)
 8007a02:	4c0c      	ldr	r4, [pc, #48]	; (8007a34 <__libc_init_array+0x44>)
 8007a04:	f000 fc4e 	bl	80082a4 <_init>
 8007a08:	1b64      	subs	r4, r4, r5
 8007a0a:	10a4      	asrs	r4, r4, #2
 8007a0c:	2600      	movs	r6, #0
 8007a0e:	42a6      	cmp	r6, r4
 8007a10:	d105      	bne.n	8007a1e <__libc_init_array+0x2e>
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a18:	4798      	blx	r3
 8007a1a:	3601      	adds	r6, #1
 8007a1c:	e7ee      	b.n	80079fc <__libc_init_array+0xc>
 8007a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a22:	4798      	blx	r3
 8007a24:	3601      	adds	r6, #1
 8007a26:	e7f2      	b.n	8007a0e <__libc_init_array+0x1e>
 8007a28:	0800b3ec 	.word	0x0800b3ec
 8007a2c:	0800b3ec 	.word	0x0800b3ec
 8007a30:	0800b3ec 	.word	0x0800b3ec
 8007a34:	0800b3f0 	.word	0x0800b3f0

08007a38 <memcpy>:
 8007a38:	440a      	add	r2, r1
 8007a3a:	4291      	cmp	r1, r2
 8007a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a40:	d100      	bne.n	8007a44 <memcpy+0xc>
 8007a42:	4770      	bx	lr
 8007a44:	b510      	push	{r4, lr}
 8007a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a4e:	4291      	cmp	r1, r2
 8007a50:	d1f9      	bne.n	8007a46 <memcpy+0xe>
 8007a52:	bd10      	pop	{r4, pc}

08007a54 <memset>:
 8007a54:	4402      	add	r2, r0
 8007a56:	4603      	mov	r3, r0
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d100      	bne.n	8007a5e <memset+0xa>
 8007a5c:	4770      	bx	lr
 8007a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a62:	e7f9      	b.n	8007a58 <memset+0x4>

08007a64 <siprintf>:
 8007a64:	b40e      	push	{r1, r2, r3}
 8007a66:	b500      	push	{lr}
 8007a68:	b09c      	sub	sp, #112	; 0x70
 8007a6a:	ab1d      	add	r3, sp, #116	; 0x74
 8007a6c:	9002      	str	r0, [sp, #8]
 8007a6e:	9006      	str	r0, [sp, #24]
 8007a70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a74:	4809      	ldr	r0, [pc, #36]	; (8007a9c <siprintf+0x38>)
 8007a76:	9107      	str	r1, [sp, #28]
 8007a78:	9104      	str	r1, [sp, #16]
 8007a7a:	4909      	ldr	r1, [pc, #36]	; (8007aa0 <siprintf+0x3c>)
 8007a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a80:	9105      	str	r1, [sp, #20]
 8007a82:	6800      	ldr	r0, [r0, #0]
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	a902      	add	r1, sp, #8
 8007a88:	f000 f868 	bl	8007b5c <_svfiprintf_r>
 8007a8c:	9b02      	ldr	r3, [sp, #8]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	b01c      	add	sp, #112	; 0x70
 8007a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a98:	b003      	add	sp, #12
 8007a9a:	4770      	bx	lr
 8007a9c:	20000014 	.word	0x20000014
 8007aa0:	ffff0208 	.word	0xffff0208

08007aa4 <__ssputs_r>:
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	688e      	ldr	r6, [r1, #8]
 8007aaa:	429e      	cmp	r6, r3
 8007aac:	4682      	mov	sl, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	4690      	mov	r8, r2
 8007ab2:	461f      	mov	r7, r3
 8007ab4:	d838      	bhi.n	8007b28 <__ssputs_r+0x84>
 8007ab6:	898a      	ldrh	r2, [r1, #12]
 8007ab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007abc:	d032      	beq.n	8007b24 <__ssputs_r+0x80>
 8007abe:	6825      	ldr	r5, [r4, #0]
 8007ac0:	6909      	ldr	r1, [r1, #16]
 8007ac2:	eba5 0901 	sub.w	r9, r5, r1
 8007ac6:	6965      	ldr	r5, [r4, #20]
 8007ac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007acc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	444b      	add	r3, r9
 8007ad4:	106d      	asrs	r5, r5, #1
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	bf38      	it	cc
 8007ada:	461d      	movcc	r5, r3
 8007adc:	0553      	lsls	r3, r2, #21
 8007ade:	d531      	bpl.n	8007b44 <__ssputs_r+0xa0>
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f000 fb39 	bl	8008158 <_malloc_r>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	b950      	cbnz	r0, 8007b00 <__ssputs_r+0x5c>
 8007aea:	230c      	movs	r3, #12
 8007aec:	f8ca 3000 	str.w	r3, [sl]
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af6:	81a3      	strh	r3, [r4, #12]
 8007af8:	f04f 30ff 	mov.w	r0, #4294967295
 8007afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b00:	6921      	ldr	r1, [r4, #16]
 8007b02:	464a      	mov	r2, r9
 8007b04:	f7ff ff98 	bl	8007a38 <memcpy>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b12:	81a3      	strh	r3, [r4, #12]
 8007b14:	6126      	str	r6, [r4, #16]
 8007b16:	6165      	str	r5, [r4, #20]
 8007b18:	444e      	add	r6, r9
 8007b1a:	eba5 0509 	sub.w	r5, r5, r9
 8007b1e:	6026      	str	r6, [r4, #0]
 8007b20:	60a5      	str	r5, [r4, #8]
 8007b22:	463e      	mov	r6, r7
 8007b24:	42be      	cmp	r6, r7
 8007b26:	d900      	bls.n	8007b2a <__ssputs_r+0x86>
 8007b28:	463e      	mov	r6, r7
 8007b2a:	4632      	mov	r2, r6
 8007b2c:	6820      	ldr	r0, [r4, #0]
 8007b2e:	4641      	mov	r1, r8
 8007b30:	f000 faa8 	bl	8008084 <memmove>
 8007b34:	68a3      	ldr	r3, [r4, #8]
 8007b36:	6822      	ldr	r2, [r4, #0]
 8007b38:	1b9b      	subs	r3, r3, r6
 8007b3a:	4432      	add	r2, r6
 8007b3c:	60a3      	str	r3, [r4, #8]
 8007b3e:	6022      	str	r2, [r4, #0]
 8007b40:	2000      	movs	r0, #0
 8007b42:	e7db      	b.n	8007afc <__ssputs_r+0x58>
 8007b44:	462a      	mov	r2, r5
 8007b46:	f000 fb61 	bl	800820c <_realloc_r>
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d1e1      	bne.n	8007b14 <__ssputs_r+0x70>
 8007b50:	6921      	ldr	r1, [r4, #16]
 8007b52:	4650      	mov	r0, sl
 8007b54:	f000 fab0 	bl	80080b8 <_free_r>
 8007b58:	e7c7      	b.n	8007aea <__ssputs_r+0x46>
	...

08007b5c <_svfiprintf_r>:
 8007b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b60:	4698      	mov	r8, r3
 8007b62:	898b      	ldrh	r3, [r1, #12]
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	b09d      	sub	sp, #116	; 0x74
 8007b68:	4607      	mov	r7, r0
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	4614      	mov	r4, r2
 8007b6e:	d50e      	bpl.n	8007b8e <_svfiprintf_r+0x32>
 8007b70:	690b      	ldr	r3, [r1, #16]
 8007b72:	b963      	cbnz	r3, 8007b8e <_svfiprintf_r+0x32>
 8007b74:	2140      	movs	r1, #64	; 0x40
 8007b76:	f000 faef 	bl	8008158 <_malloc_r>
 8007b7a:	6028      	str	r0, [r5, #0]
 8007b7c:	6128      	str	r0, [r5, #16]
 8007b7e:	b920      	cbnz	r0, 8007b8a <_svfiprintf_r+0x2e>
 8007b80:	230c      	movs	r3, #12
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295
 8007b88:	e0d1      	b.n	8007d2e <_svfiprintf_r+0x1d2>
 8007b8a:	2340      	movs	r3, #64	; 0x40
 8007b8c:	616b      	str	r3, [r5, #20]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	9309      	str	r3, [sp, #36]	; 0x24
 8007b92:	2320      	movs	r3, #32
 8007b94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b9c:	2330      	movs	r3, #48	; 0x30
 8007b9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d48 <_svfiprintf_r+0x1ec>
 8007ba2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ba6:	f04f 0901 	mov.w	r9, #1
 8007baa:	4623      	mov	r3, r4
 8007bac:	469a      	mov	sl, r3
 8007bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bb2:	b10a      	cbz	r2, 8007bb8 <_svfiprintf_r+0x5c>
 8007bb4:	2a25      	cmp	r2, #37	; 0x25
 8007bb6:	d1f9      	bne.n	8007bac <_svfiprintf_r+0x50>
 8007bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8007bbc:	d00b      	beq.n	8007bd6 <_svfiprintf_r+0x7a>
 8007bbe:	465b      	mov	r3, fp
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f7ff ff6d 	bl	8007aa4 <__ssputs_r>
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f000 80aa 	beq.w	8007d24 <_svfiprintf_r+0x1c8>
 8007bd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bd2:	445a      	add	r2, fp
 8007bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 80a2 	beq.w	8007d24 <_svfiprintf_r+0x1c8>
 8007be0:	2300      	movs	r3, #0
 8007be2:	f04f 32ff 	mov.w	r2, #4294967295
 8007be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bea:	f10a 0a01 	add.w	sl, sl, #1
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	9307      	str	r3, [sp, #28]
 8007bf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bf6:	931a      	str	r3, [sp, #104]	; 0x68
 8007bf8:	4654      	mov	r4, sl
 8007bfa:	2205      	movs	r2, #5
 8007bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c00:	4851      	ldr	r0, [pc, #324]	; (8007d48 <_svfiprintf_r+0x1ec>)
 8007c02:	f7f8 fafd 	bl	8000200 <memchr>
 8007c06:	9a04      	ldr	r2, [sp, #16]
 8007c08:	b9d8      	cbnz	r0, 8007c42 <_svfiprintf_r+0xe6>
 8007c0a:	06d0      	lsls	r0, r2, #27
 8007c0c:	bf44      	itt	mi
 8007c0e:	2320      	movmi	r3, #32
 8007c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c14:	0711      	lsls	r1, r2, #28
 8007c16:	bf44      	itt	mi
 8007c18:	232b      	movmi	r3, #43	; 0x2b
 8007c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c22:	2b2a      	cmp	r3, #42	; 0x2a
 8007c24:	d015      	beq.n	8007c52 <_svfiprintf_r+0xf6>
 8007c26:	9a07      	ldr	r2, [sp, #28]
 8007c28:	4654      	mov	r4, sl
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	f04f 0c0a 	mov.w	ip, #10
 8007c30:	4621      	mov	r1, r4
 8007c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c36:	3b30      	subs	r3, #48	; 0x30
 8007c38:	2b09      	cmp	r3, #9
 8007c3a:	d94e      	bls.n	8007cda <_svfiprintf_r+0x17e>
 8007c3c:	b1b0      	cbz	r0, 8007c6c <_svfiprintf_r+0x110>
 8007c3e:	9207      	str	r2, [sp, #28]
 8007c40:	e014      	b.n	8007c6c <_svfiprintf_r+0x110>
 8007c42:	eba0 0308 	sub.w	r3, r0, r8
 8007c46:	fa09 f303 	lsl.w	r3, r9, r3
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	9304      	str	r3, [sp, #16]
 8007c4e:	46a2      	mov	sl, r4
 8007c50:	e7d2      	b.n	8007bf8 <_svfiprintf_r+0x9c>
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	1d19      	adds	r1, r3, #4
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	9103      	str	r1, [sp, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	bfbb      	ittet	lt
 8007c5e:	425b      	neglt	r3, r3
 8007c60:	f042 0202 	orrlt.w	r2, r2, #2
 8007c64:	9307      	strge	r3, [sp, #28]
 8007c66:	9307      	strlt	r3, [sp, #28]
 8007c68:	bfb8      	it	lt
 8007c6a:	9204      	strlt	r2, [sp, #16]
 8007c6c:	7823      	ldrb	r3, [r4, #0]
 8007c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007c70:	d10c      	bne.n	8007c8c <_svfiprintf_r+0x130>
 8007c72:	7863      	ldrb	r3, [r4, #1]
 8007c74:	2b2a      	cmp	r3, #42	; 0x2a
 8007c76:	d135      	bne.n	8007ce4 <_svfiprintf_r+0x188>
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	1d1a      	adds	r2, r3, #4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	9203      	str	r2, [sp, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bfb8      	it	lt
 8007c84:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c88:	3402      	adds	r4, #2
 8007c8a:	9305      	str	r3, [sp, #20]
 8007c8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d58 <_svfiprintf_r+0x1fc>
 8007c90:	7821      	ldrb	r1, [r4, #0]
 8007c92:	2203      	movs	r2, #3
 8007c94:	4650      	mov	r0, sl
 8007c96:	f7f8 fab3 	bl	8000200 <memchr>
 8007c9a:	b140      	cbz	r0, 8007cae <_svfiprintf_r+0x152>
 8007c9c:	2340      	movs	r3, #64	; 0x40
 8007c9e:	eba0 000a 	sub.w	r0, r0, sl
 8007ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	4303      	orrs	r3, r0
 8007caa:	3401      	adds	r4, #1
 8007cac:	9304      	str	r3, [sp, #16]
 8007cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb2:	4826      	ldr	r0, [pc, #152]	; (8007d4c <_svfiprintf_r+0x1f0>)
 8007cb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cb8:	2206      	movs	r2, #6
 8007cba:	f7f8 faa1 	bl	8000200 <memchr>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d038      	beq.n	8007d34 <_svfiprintf_r+0x1d8>
 8007cc2:	4b23      	ldr	r3, [pc, #140]	; (8007d50 <_svfiprintf_r+0x1f4>)
 8007cc4:	bb1b      	cbnz	r3, 8007d0e <_svfiprintf_r+0x1b2>
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	3307      	adds	r3, #7
 8007cca:	f023 0307 	bic.w	r3, r3, #7
 8007cce:	3308      	adds	r3, #8
 8007cd0:	9303      	str	r3, [sp, #12]
 8007cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd4:	4433      	add	r3, r6
 8007cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd8:	e767      	b.n	8007baa <_svfiprintf_r+0x4e>
 8007cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cde:	460c      	mov	r4, r1
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	e7a5      	b.n	8007c30 <_svfiprintf_r+0xd4>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	3401      	adds	r4, #1
 8007ce8:	9305      	str	r3, [sp, #20]
 8007cea:	4619      	mov	r1, r3
 8007cec:	f04f 0c0a 	mov.w	ip, #10
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf6:	3a30      	subs	r2, #48	; 0x30
 8007cf8:	2a09      	cmp	r2, #9
 8007cfa:	d903      	bls.n	8007d04 <_svfiprintf_r+0x1a8>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0c5      	beq.n	8007c8c <_svfiprintf_r+0x130>
 8007d00:	9105      	str	r1, [sp, #20]
 8007d02:	e7c3      	b.n	8007c8c <_svfiprintf_r+0x130>
 8007d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d08:	4604      	mov	r4, r0
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e7f0      	b.n	8007cf0 <_svfiprintf_r+0x194>
 8007d0e:	ab03      	add	r3, sp, #12
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	462a      	mov	r2, r5
 8007d14:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <_svfiprintf_r+0x1f8>)
 8007d16:	a904      	add	r1, sp, #16
 8007d18:	4638      	mov	r0, r7
 8007d1a:	f3af 8000 	nop.w
 8007d1e:	1c42      	adds	r2, r0, #1
 8007d20:	4606      	mov	r6, r0
 8007d22:	d1d6      	bne.n	8007cd2 <_svfiprintf_r+0x176>
 8007d24:	89ab      	ldrh	r3, [r5, #12]
 8007d26:	065b      	lsls	r3, r3, #25
 8007d28:	f53f af2c 	bmi.w	8007b84 <_svfiprintf_r+0x28>
 8007d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d2e:	b01d      	add	sp, #116	; 0x74
 8007d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d34:	ab03      	add	r3, sp, #12
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	462a      	mov	r2, r5
 8007d3a:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <_svfiprintf_r+0x1f8>)
 8007d3c:	a904      	add	r1, sp, #16
 8007d3e:	4638      	mov	r0, r7
 8007d40:	f000 f87a 	bl	8007e38 <_printf_i>
 8007d44:	e7eb      	b.n	8007d1e <_svfiprintf_r+0x1c2>
 8007d46:	bf00      	nop
 8007d48:	0800b3b0 	.word	0x0800b3b0
 8007d4c:	0800b3ba 	.word	0x0800b3ba
 8007d50:	00000000 	.word	0x00000000
 8007d54:	08007aa5 	.word	0x08007aa5
 8007d58:	0800b3b6 	.word	0x0800b3b6

08007d5c <_printf_common>:
 8007d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	4616      	mov	r6, r2
 8007d62:	4699      	mov	r9, r3
 8007d64:	688a      	ldr	r2, [r1, #8]
 8007d66:	690b      	ldr	r3, [r1, #16]
 8007d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	bfb8      	it	lt
 8007d70:	4613      	movlt	r3, r2
 8007d72:	6033      	str	r3, [r6, #0]
 8007d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d78:	4607      	mov	r7, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	b10a      	cbz	r2, 8007d82 <_printf_common+0x26>
 8007d7e:	3301      	adds	r3, #1
 8007d80:	6033      	str	r3, [r6, #0]
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	0699      	lsls	r1, r3, #26
 8007d86:	bf42      	ittt	mi
 8007d88:	6833      	ldrmi	r3, [r6, #0]
 8007d8a:	3302      	addmi	r3, #2
 8007d8c:	6033      	strmi	r3, [r6, #0]
 8007d8e:	6825      	ldr	r5, [r4, #0]
 8007d90:	f015 0506 	ands.w	r5, r5, #6
 8007d94:	d106      	bne.n	8007da4 <_printf_common+0x48>
 8007d96:	f104 0a19 	add.w	sl, r4, #25
 8007d9a:	68e3      	ldr	r3, [r4, #12]
 8007d9c:	6832      	ldr	r2, [r6, #0]
 8007d9e:	1a9b      	subs	r3, r3, r2
 8007da0:	42ab      	cmp	r3, r5
 8007da2:	dc26      	bgt.n	8007df2 <_printf_common+0x96>
 8007da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007da8:	1e13      	subs	r3, r2, #0
 8007daa:	6822      	ldr	r2, [r4, #0]
 8007dac:	bf18      	it	ne
 8007dae:	2301      	movne	r3, #1
 8007db0:	0692      	lsls	r2, r2, #26
 8007db2:	d42b      	bmi.n	8007e0c <_printf_common+0xb0>
 8007db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007db8:	4649      	mov	r1, r9
 8007dba:	4638      	mov	r0, r7
 8007dbc:	47c0      	blx	r8
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	d01e      	beq.n	8007e00 <_printf_common+0xa4>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	68e5      	ldr	r5, [r4, #12]
 8007dc6:	6832      	ldr	r2, [r6, #0]
 8007dc8:	f003 0306 	and.w	r3, r3, #6
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	bf08      	it	eq
 8007dd0:	1aad      	subeq	r5, r5, r2
 8007dd2:	68a3      	ldr	r3, [r4, #8]
 8007dd4:	6922      	ldr	r2, [r4, #16]
 8007dd6:	bf0c      	ite	eq
 8007dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ddc:	2500      	movne	r5, #0
 8007dde:	4293      	cmp	r3, r2
 8007de0:	bfc4      	itt	gt
 8007de2:	1a9b      	subgt	r3, r3, r2
 8007de4:	18ed      	addgt	r5, r5, r3
 8007de6:	2600      	movs	r6, #0
 8007de8:	341a      	adds	r4, #26
 8007dea:	42b5      	cmp	r5, r6
 8007dec:	d11a      	bne.n	8007e24 <_printf_common+0xc8>
 8007dee:	2000      	movs	r0, #0
 8007df0:	e008      	b.n	8007e04 <_printf_common+0xa8>
 8007df2:	2301      	movs	r3, #1
 8007df4:	4652      	mov	r2, sl
 8007df6:	4649      	mov	r1, r9
 8007df8:	4638      	mov	r0, r7
 8007dfa:	47c0      	blx	r8
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d103      	bne.n	8007e08 <_printf_common+0xac>
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e08:	3501      	adds	r5, #1
 8007e0a:	e7c6      	b.n	8007d9a <_printf_common+0x3e>
 8007e0c:	18e1      	adds	r1, r4, r3
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	2030      	movs	r0, #48	; 0x30
 8007e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e16:	4422      	add	r2, r4
 8007e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e20:	3302      	adds	r3, #2
 8007e22:	e7c7      	b.n	8007db4 <_printf_common+0x58>
 8007e24:	2301      	movs	r3, #1
 8007e26:	4622      	mov	r2, r4
 8007e28:	4649      	mov	r1, r9
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	47c0      	blx	r8
 8007e2e:	3001      	adds	r0, #1
 8007e30:	d0e6      	beq.n	8007e00 <_printf_common+0xa4>
 8007e32:	3601      	adds	r6, #1
 8007e34:	e7d9      	b.n	8007dea <_printf_common+0x8e>
	...

08007e38 <_printf_i>:
 8007e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	4691      	mov	r9, r2
 8007e40:	7e27      	ldrb	r7, [r4, #24]
 8007e42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e44:	2f78      	cmp	r7, #120	; 0x78
 8007e46:	4680      	mov	r8, r0
 8007e48:	469a      	mov	sl, r3
 8007e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e4e:	d807      	bhi.n	8007e60 <_printf_i+0x28>
 8007e50:	2f62      	cmp	r7, #98	; 0x62
 8007e52:	d80a      	bhi.n	8007e6a <_printf_i+0x32>
 8007e54:	2f00      	cmp	r7, #0
 8007e56:	f000 80d8 	beq.w	800800a <_printf_i+0x1d2>
 8007e5a:	2f58      	cmp	r7, #88	; 0x58
 8007e5c:	f000 80a3 	beq.w	8007fa6 <_printf_i+0x16e>
 8007e60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e68:	e03a      	b.n	8007ee0 <_printf_i+0xa8>
 8007e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e6e:	2b15      	cmp	r3, #21
 8007e70:	d8f6      	bhi.n	8007e60 <_printf_i+0x28>
 8007e72:	a001      	add	r0, pc, #4	; (adr r0, 8007e78 <_printf_i+0x40>)
 8007e74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e78:	08007ed1 	.word	0x08007ed1
 8007e7c:	08007ee5 	.word	0x08007ee5
 8007e80:	08007e61 	.word	0x08007e61
 8007e84:	08007e61 	.word	0x08007e61
 8007e88:	08007e61 	.word	0x08007e61
 8007e8c:	08007e61 	.word	0x08007e61
 8007e90:	08007ee5 	.word	0x08007ee5
 8007e94:	08007e61 	.word	0x08007e61
 8007e98:	08007e61 	.word	0x08007e61
 8007e9c:	08007e61 	.word	0x08007e61
 8007ea0:	08007e61 	.word	0x08007e61
 8007ea4:	08007ff1 	.word	0x08007ff1
 8007ea8:	08007f15 	.word	0x08007f15
 8007eac:	08007fd3 	.word	0x08007fd3
 8007eb0:	08007e61 	.word	0x08007e61
 8007eb4:	08007e61 	.word	0x08007e61
 8007eb8:	08008013 	.word	0x08008013
 8007ebc:	08007e61 	.word	0x08007e61
 8007ec0:	08007f15 	.word	0x08007f15
 8007ec4:	08007e61 	.word	0x08007e61
 8007ec8:	08007e61 	.word	0x08007e61
 8007ecc:	08007fdb 	.word	0x08007fdb
 8007ed0:	680b      	ldr	r3, [r1, #0]
 8007ed2:	1d1a      	adds	r2, r3, #4
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	600a      	str	r2, [r1, #0]
 8007ed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e0a3      	b.n	800802c <_printf_i+0x1f4>
 8007ee4:	6825      	ldr	r5, [r4, #0]
 8007ee6:	6808      	ldr	r0, [r1, #0]
 8007ee8:	062e      	lsls	r6, r5, #24
 8007eea:	f100 0304 	add.w	r3, r0, #4
 8007eee:	d50a      	bpl.n	8007f06 <_printf_i+0xce>
 8007ef0:	6805      	ldr	r5, [r0, #0]
 8007ef2:	600b      	str	r3, [r1, #0]
 8007ef4:	2d00      	cmp	r5, #0
 8007ef6:	da03      	bge.n	8007f00 <_printf_i+0xc8>
 8007ef8:	232d      	movs	r3, #45	; 0x2d
 8007efa:	426d      	negs	r5, r5
 8007efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f00:	485e      	ldr	r0, [pc, #376]	; (800807c <_printf_i+0x244>)
 8007f02:	230a      	movs	r3, #10
 8007f04:	e019      	b.n	8007f3a <_printf_i+0x102>
 8007f06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007f0a:	6805      	ldr	r5, [r0, #0]
 8007f0c:	600b      	str	r3, [r1, #0]
 8007f0e:	bf18      	it	ne
 8007f10:	b22d      	sxthne	r5, r5
 8007f12:	e7ef      	b.n	8007ef4 <_printf_i+0xbc>
 8007f14:	680b      	ldr	r3, [r1, #0]
 8007f16:	6825      	ldr	r5, [r4, #0]
 8007f18:	1d18      	adds	r0, r3, #4
 8007f1a:	6008      	str	r0, [r1, #0]
 8007f1c:	0628      	lsls	r0, r5, #24
 8007f1e:	d501      	bpl.n	8007f24 <_printf_i+0xec>
 8007f20:	681d      	ldr	r5, [r3, #0]
 8007f22:	e002      	b.n	8007f2a <_printf_i+0xf2>
 8007f24:	0669      	lsls	r1, r5, #25
 8007f26:	d5fb      	bpl.n	8007f20 <_printf_i+0xe8>
 8007f28:	881d      	ldrh	r5, [r3, #0]
 8007f2a:	4854      	ldr	r0, [pc, #336]	; (800807c <_printf_i+0x244>)
 8007f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f2e:	bf0c      	ite	eq
 8007f30:	2308      	moveq	r3, #8
 8007f32:	230a      	movne	r3, #10
 8007f34:	2100      	movs	r1, #0
 8007f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f3a:	6866      	ldr	r6, [r4, #4]
 8007f3c:	60a6      	str	r6, [r4, #8]
 8007f3e:	2e00      	cmp	r6, #0
 8007f40:	bfa2      	ittt	ge
 8007f42:	6821      	ldrge	r1, [r4, #0]
 8007f44:	f021 0104 	bicge.w	r1, r1, #4
 8007f48:	6021      	strge	r1, [r4, #0]
 8007f4a:	b90d      	cbnz	r5, 8007f50 <_printf_i+0x118>
 8007f4c:	2e00      	cmp	r6, #0
 8007f4e:	d04d      	beq.n	8007fec <_printf_i+0x1b4>
 8007f50:	4616      	mov	r6, r2
 8007f52:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f56:	fb03 5711 	mls	r7, r3, r1, r5
 8007f5a:	5dc7      	ldrb	r7, [r0, r7]
 8007f5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f60:	462f      	mov	r7, r5
 8007f62:	42bb      	cmp	r3, r7
 8007f64:	460d      	mov	r5, r1
 8007f66:	d9f4      	bls.n	8007f52 <_printf_i+0x11a>
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d10b      	bne.n	8007f84 <_printf_i+0x14c>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	07df      	lsls	r7, r3, #31
 8007f70:	d508      	bpl.n	8007f84 <_printf_i+0x14c>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	6861      	ldr	r1, [r4, #4]
 8007f76:	4299      	cmp	r1, r3
 8007f78:	bfde      	ittt	le
 8007f7a:	2330      	movle	r3, #48	; 0x30
 8007f7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f84:	1b92      	subs	r2, r2, r6
 8007f86:	6122      	str	r2, [r4, #16]
 8007f88:	f8cd a000 	str.w	sl, [sp]
 8007f8c:	464b      	mov	r3, r9
 8007f8e:	aa03      	add	r2, sp, #12
 8007f90:	4621      	mov	r1, r4
 8007f92:	4640      	mov	r0, r8
 8007f94:	f7ff fee2 	bl	8007d5c <_printf_common>
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d14c      	bne.n	8008036 <_printf_i+0x1fe>
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	b004      	add	sp, #16
 8007fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa6:	4835      	ldr	r0, [pc, #212]	; (800807c <_printf_i+0x244>)
 8007fa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	680e      	ldr	r6, [r1, #0]
 8007fb0:	061f      	lsls	r7, r3, #24
 8007fb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007fb6:	600e      	str	r6, [r1, #0]
 8007fb8:	d514      	bpl.n	8007fe4 <_printf_i+0x1ac>
 8007fba:	07d9      	lsls	r1, r3, #31
 8007fbc:	bf44      	itt	mi
 8007fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8007fc2:	6023      	strmi	r3, [r4, #0]
 8007fc4:	b91d      	cbnz	r5, 8007fce <_printf_i+0x196>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	f023 0320 	bic.w	r3, r3, #32
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	2310      	movs	r3, #16
 8007fd0:	e7b0      	b.n	8007f34 <_printf_i+0xfc>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f043 0320 	orr.w	r3, r3, #32
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	2378      	movs	r3, #120	; 0x78
 8007fdc:	4828      	ldr	r0, [pc, #160]	; (8008080 <_printf_i+0x248>)
 8007fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fe2:	e7e3      	b.n	8007fac <_printf_i+0x174>
 8007fe4:	065e      	lsls	r6, r3, #25
 8007fe6:	bf48      	it	mi
 8007fe8:	b2ad      	uxthmi	r5, r5
 8007fea:	e7e6      	b.n	8007fba <_printf_i+0x182>
 8007fec:	4616      	mov	r6, r2
 8007fee:	e7bb      	b.n	8007f68 <_printf_i+0x130>
 8007ff0:	680b      	ldr	r3, [r1, #0]
 8007ff2:	6826      	ldr	r6, [r4, #0]
 8007ff4:	6960      	ldr	r0, [r4, #20]
 8007ff6:	1d1d      	adds	r5, r3, #4
 8007ff8:	600d      	str	r5, [r1, #0]
 8007ffa:	0635      	lsls	r5, r6, #24
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	d501      	bpl.n	8008004 <_printf_i+0x1cc>
 8008000:	6018      	str	r0, [r3, #0]
 8008002:	e002      	b.n	800800a <_printf_i+0x1d2>
 8008004:	0671      	lsls	r1, r6, #25
 8008006:	d5fb      	bpl.n	8008000 <_printf_i+0x1c8>
 8008008:	8018      	strh	r0, [r3, #0]
 800800a:	2300      	movs	r3, #0
 800800c:	6123      	str	r3, [r4, #16]
 800800e:	4616      	mov	r6, r2
 8008010:	e7ba      	b.n	8007f88 <_printf_i+0x150>
 8008012:	680b      	ldr	r3, [r1, #0]
 8008014:	1d1a      	adds	r2, r3, #4
 8008016:	600a      	str	r2, [r1, #0]
 8008018:	681e      	ldr	r6, [r3, #0]
 800801a:	6862      	ldr	r2, [r4, #4]
 800801c:	2100      	movs	r1, #0
 800801e:	4630      	mov	r0, r6
 8008020:	f7f8 f8ee 	bl	8000200 <memchr>
 8008024:	b108      	cbz	r0, 800802a <_printf_i+0x1f2>
 8008026:	1b80      	subs	r0, r0, r6
 8008028:	6060      	str	r0, [r4, #4]
 800802a:	6863      	ldr	r3, [r4, #4]
 800802c:	6123      	str	r3, [r4, #16]
 800802e:	2300      	movs	r3, #0
 8008030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008034:	e7a8      	b.n	8007f88 <_printf_i+0x150>
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	4632      	mov	r2, r6
 800803a:	4649      	mov	r1, r9
 800803c:	4640      	mov	r0, r8
 800803e:	47d0      	blx	sl
 8008040:	3001      	adds	r0, #1
 8008042:	d0ab      	beq.n	8007f9c <_printf_i+0x164>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	079b      	lsls	r3, r3, #30
 8008048:	d413      	bmi.n	8008072 <_printf_i+0x23a>
 800804a:	68e0      	ldr	r0, [r4, #12]
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	4298      	cmp	r0, r3
 8008050:	bfb8      	it	lt
 8008052:	4618      	movlt	r0, r3
 8008054:	e7a4      	b.n	8007fa0 <_printf_i+0x168>
 8008056:	2301      	movs	r3, #1
 8008058:	4632      	mov	r2, r6
 800805a:	4649      	mov	r1, r9
 800805c:	4640      	mov	r0, r8
 800805e:	47d0      	blx	sl
 8008060:	3001      	adds	r0, #1
 8008062:	d09b      	beq.n	8007f9c <_printf_i+0x164>
 8008064:	3501      	adds	r5, #1
 8008066:	68e3      	ldr	r3, [r4, #12]
 8008068:	9903      	ldr	r1, [sp, #12]
 800806a:	1a5b      	subs	r3, r3, r1
 800806c:	42ab      	cmp	r3, r5
 800806e:	dcf2      	bgt.n	8008056 <_printf_i+0x21e>
 8008070:	e7eb      	b.n	800804a <_printf_i+0x212>
 8008072:	2500      	movs	r5, #0
 8008074:	f104 0619 	add.w	r6, r4, #25
 8008078:	e7f5      	b.n	8008066 <_printf_i+0x22e>
 800807a:	bf00      	nop
 800807c:	0800b3c1 	.word	0x0800b3c1
 8008080:	0800b3d2 	.word	0x0800b3d2

08008084 <memmove>:
 8008084:	4288      	cmp	r0, r1
 8008086:	b510      	push	{r4, lr}
 8008088:	eb01 0402 	add.w	r4, r1, r2
 800808c:	d902      	bls.n	8008094 <memmove+0x10>
 800808e:	4284      	cmp	r4, r0
 8008090:	4623      	mov	r3, r4
 8008092:	d807      	bhi.n	80080a4 <memmove+0x20>
 8008094:	1e43      	subs	r3, r0, #1
 8008096:	42a1      	cmp	r1, r4
 8008098:	d008      	beq.n	80080ac <memmove+0x28>
 800809a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800809e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080a2:	e7f8      	b.n	8008096 <memmove+0x12>
 80080a4:	4402      	add	r2, r0
 80080a6:	4601      	mov	r1, r0
 80080a8:	428a      	cmp	r2, r1
 80080aa:	d100      	bne.n	80080ae <memmove+0x2a>
 80080ac:	bd10      	pop	{r4, pc}
 80080ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080b6:	e7f7      	b.n	80080a8 <memmove+0x24>

080080b8 <_free_r>:
 80080b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ba:	2900      	cmp	r1, #0
 80080bc:	d048      	beq.n	8008150 <_free_r+0x98>
 80080be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080c2:	9001      	str	r0, [sp, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f1a1 0404 	sub.w	r4, r1, #4
 80080ca:	bfb8      	it	lt
 80080cc:	18e4      	addlt	r4, r4, r3
 80080ce:	f000 f8d3 	bl	8008278 <__malloc_lock>
 80080d2:	4a20      	ldr	r2, [pc, #128]	; (8008154 <_free_r+0x9c>)
 80080d4:	9801      	ldr	r0, [sp, #4]
 80080d6:	6813      	ldr	r3, [r2, #0]
 80080d8:	4615      	mov	r5, r2
 80080da:	b933      	cbnz	r3, 80080ea <_free_r+0x32>
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	6014      	str	r4, [r2, #0]
 80080e0:	b003      	add	sp, #12
 80080e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080e6:	f000 b8cd 	b.w	8008284 <__malloc_unlock>
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	d90b      	bls.n	8008106 <_free_r+0x4e>
 80080ee:	6821      	ldr	r1, [r4, #0]
 80080f0:	1862      	adds	r2, r4, r1
 80080f2:	4293      	cmp	r3, r2
 80080f4:	bf04      	itt	eq
 80080f6:	681a      	ldreq	r2, [r3, #0]
 80080f8:	685b      	ldreq	r3, [r3, #4]
 80080fa:	6063      	str	r3, [r4, #4]
 80080fc:	bf04      	itt	eq
 80080fe:	1852      	addeq	r2, r2, r1
 8008100:	6022      	streq	r2, [r4, #0]
 8008102:	602c      	str	r4, [r5, #0]
 8008104:	e7ec      	b.n	80080e0 <_free_r+0x28>
 8008106:	461a      	mov	r2, r3
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	b10b      	cbz	r3, 8008110 <_free_r+0x58>
 800810c:	42a3      	cmp	r3, r4
 800810e:	d9fa      	bls.n	8008106 <_free_r+0x4e>
 8008110:	6811      	ldr	r1, [r2, #0]
 8008112:	1855      	adds	r5, r2, r1
 8008114:	42a5      	cmp	r5, r4
 8008116:	d10b      	bne.n	8008130 <_free_r+0x78>
 8008118:	6824      	ldr	r4, [r4, #0]
 800811a:	4421      	add	r1, r4
 800811c:	1854      	adds	r4, r2, r1
 800811e:	42a3      	cmp	r3, r4
 8008120:	6011      	str	r1, [r2, #0]
 8008122:	d1dd      	bne.n	80080e0 <_free_r+0x28>
 8008124:	681c      	ldr	r4, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	6053      	str	r3, [r2, #4]
 800812a:	4421      	add	r1, r4
 800812c:	6011      	str	r1, [r2, #0]
 800812e:	e7d7      	b.n	80080e0 <_free_r+0x28>
 8008130:	d902      	bls.n	8008138 <_free_r+0x80>
 8008132:	230c      	movs	r3, #12
 8008134:	6003      	str	r3, [r0, #0]
 8008136:	e7d3      	b.n	80080e0 <_free_r+0x28>
 8008138:	6825      	ldr	r5, [r4, #0]
 800813a:	1961      	adds	r1, r4, r5
 800813c:	428b      	cmp	r3, r1
 800813e:	bf04      	itt	eq
 8008140:	6819      	ldreq	r1, [r3, #0]
 8008142:	685b      	ldreq	r3, [r3, #4]
 8008144:	6063      	str	r3, [r4, #4]
 8008146:	bf04      	itt	eq
 8008148:	1949      	addeq	r1, r1, r5
 800814a:	6021      	streq	r1, [r4, #0]
 800814c:	6054      	str	r4, [r2, #4]
 800814e:	e7c7      	b.n	80080e0 <_free_r+0x28>
 8008150:	b003      	add	sp, #12
 8008152:	bd30      	pop	{r4, r5, pc}
 8008154:	200000bc 	.word	0x200000bc

08008158 <_malloc_r>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	1ccd      	adds	r5, r1, #3
 800815c:	f025 0503 	bic.w	r5, r5, #3
 8008160:	3508      	adds	r5, #8
 8008162:	2d0c      	cmp	r5, #12
 8008164:	bf38      	it	cc
 8008166:	250c      	movcc	r5, #12
 8008168:	2d00      	cmp	r5, #0
 800816a:	4606      	mov	r6, r0
 800816c:	db01      	blt.n	8008172 <_malloc_r+0x1a>
 800816e:	42a9      	cmp	r1, r5
 8008170:	d903      	bls.n	800817a <_malloc_r+0x22>
 8008172:	230c      	movs	r3, #12
 8008174:	6033      	str	r3, [r6, #0]
 8008176:	2000      	movs	r0, #0
 8008178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800817a:	f000 f87d 	bl	8008278 <__malloc_lock>
 800817e:	4921      	ldr	r1, [pc, #132]	; (8008204 <_malloc_r+0xac>)
 8008180:	680a      	ldr	r2, [r1, #0]
 8008182:	4614      	mov	r4, r2
 8008184:	b99c      	cbnz	r4, 80081ae <_malloc_r+0x56>
 8008186:	4f20      	ldr	r7, [pc, #128]	; (8008208 <_malloc_r+0xb0>)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	b923      	cbnz	r3, 8008196 <_malloc_r+0x3e>
 800818c:	4621      	mov	r1, r4
 800818e:	4630      	mov	r0, r6
 8008190:	f000 f862 	bl	8008258 <_sbrk_r>
 8008194:	6038      	str	r0, [r7, #0]
 8008196:	4629      	mov	r1, r5
 8008198:	4630      	mov	r0, r6
 800819a:	f000 f85d 	bl	8008258 <_sbrk_r>
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	d123      	bne.n	80081ea <_malloc_r+0x92>
 80081a2:	230c      	movs	r3, #12
 80081a4:	6033      	str	r3, [r6, #0]
 80081a6:	4630      	mov	r0, r6
 80081a8:	f000 f86c 	bl	8008284 <__malloc_unlock>
 80081ac:	e7e3      	b.n	8008176 <_malloc_r+0x1e>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	1b5b      	subs	r3, r3, r5
 80081b2:	d417      	bmi.n	80081e4 <_malloc_r+0x8c>
 80081b4:	2b0b      	cmp	r3, #11
 80081b6:	d903      	bls.n	80081c0 <_malloc_r+0x68>
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	441c      	add	r4, r3
 80081bc:	6025      	str	r5, [r4, #0]
 80081be:	e004      	b.n	80081ca <_malloc_r+0x72>
 80081c0:	6863      	ldr	r3, [r4, #4]
 80081c2:	42a2      	cmp	r2, r4
 80081c4:	bf0c      	ite	eq
 80081c6:	600b      	streq	r3, [r1, #0]
 80081c8:	6053      	strne	r3, [r2, #4]
 80081ca:	4630      	mov	r0, r6
 80081cc:	f000 f85a 	bl	8008284 <__malloc_unlock>
 80081d0:	f104 000b 	add.w	r0, r4, #11
 80081d4:	1d23      	adds	r3, r4, #4
 80081d6:	f020 0007 	bic.w	r0, r0, #7
 80081da:	1ac2      	subs	r2, r0, r3
 80081dc:	d0cc      	beq.n	8008178 <_malloc_r+0x20>
 80081de:	1a1b      	subs	r3, r3, r0
 80081e0:	50a3      	str	r3, [r4, r2]
 80081e2:	e7c9      	b.n	8008178 <_malloc_r+0x20>
 80081e4:	4622      	mov	r2, r4
 80081e6:	6864      	ldr	r4, [r4, #4]
 80081e8:	e7cc      	b.n	8008184 <_malloc_r+0x2c>
 80081ea:	1cc4      	adds	r4, r0, #3
 80081ec:	f024 0403 	bic.w	r4, r4, #3
 80081f0:	42a0      	cmp	r0, r4
 80081f2:	d0e3      	beq.n	80081bc <_malloc_r+0x64>
 80081f4:	1a21      	subs	r1, r4, r0
 80081f6:	4630      	mov	r0, r6
 80081f8:	f000 f82e 	bl	8008258 <_sbrk_r>
 80081fc:	3001      	adds	r0, #1
 80081fe:	d1dd      	bne.n	80081bc <_malloc_r+0x64>
 8008200:	e7cf      	b.n	80081a2 <_malloc_r+0x4a>
 8008202:	bf00      	nop
 8008204:	200000bc 	.word	0x200000bc
 8008208:	200000c0 	.word	0x200000c0

0800820c <_realloc_r>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	4607      	mov	r7, r0
 8008210:	4614      	mov	r4, r2
 8008212:	460e      	mov	r6, r1
 8008214:	b921      	cbnz	r1, 8008220 <_realloc_r+0x14>
 8008216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800821a:	4611      	mov	r1, r2
 800821c:	f7ff bf9c 	b.w	8008158 <_malloc_r>
 8008220:	b922      	cbnz	r2, 800822c <_realloc_r+0x20>
 8008222:	f7ff ff49 	bl	80080b8 <_free_r>
 8008226:	4625      	mov	r5, r4
 8008228:	4628      	mov	r0, r5
 800822a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800822c:	f000 f830 	bl	8008290 <_malloc_usable_size_r>
 8008230:	42a0      	cmp	r0, r4
 8008232:	d20f      	bcs.n	8008254 <_realloc_r+0x48>
 8008234:	4621      	mov	r1, r4
 8008236:	4638      	mov	r0, r7
 8008238:	f7ff ff8e 	bl	8008158 <_malloc_r>
 800823c:	4605      	mov	r5, r0
 800823e:	2800      	cmp	r0, #0
 8008240:	d0f2      	beq.n	8008228 <_realloc_r+0x1c>
 8008242:	4631      	mov	r1, r6
 8008244:	4622      	mov	r2, r4
 8008246:	f7ff fbf7 	bl	8007a38 <memcpy>
 800824a:	4631      	mov	r1, r6
 800824c:	4638      	mov	r0, r7
 800824e:	f7ff ff33 	bl	80080b8 <_free_r>
 8008252:	e7e9      	b.n	8008228 <_realloc_r+0x1c>
 8008254:	4635      	mov	r5, r6
 8008256:	e7e7      	b.n	8008228 <_realloc_r+0x1c>

08008258 <_sbrk_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4d06      	ldr	r5, [pc, #24]	; (8008274 <_sbrk_r+0x1c>)
 800825c:	2300      	movs	r3, #0
 800825e:	4604      	mov	r4, r0
 8008260:	4608      	mov	r0, r1
 8008262:	602b      	str	r3, [r5, #0]
 8008264:	f7fa fd84 	bl	8002d70 <_sbrk>
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d102      	bne.n	8008272 <_sbrk_r+0x1a>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	b103      	cbz	r3, 8008272 <_sbrk_r+0x1a>
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	20000354 	.word	0x20000354

08008278 <__malloc_lock>:
 8008278:	4801      	ldr	r0, [pc, #4]	; (8008280 <__malloc_lock+0x8>)
 800827a:	f000 b811 	b.w	80082a0 <__retarget_lock_acquire_recursive>
 800827e:	bf00      	nop
 8008280:	2000035c 	.word	0x2000035c

08008284 <__malloc_unlock>:
 8008284:	4801      	ldr	r0, [pc, #4]	; (800828c <__malloc_unlock+0x8>)
 8008286:	f000 b80c 	b.w	80082a2 <__retarget_lock_release_recursive>
 800828a:	bf00      	nop
 800828c:	2000035c 	.word	0x2000035c

08008290 <_malloc_usable_size_r>:
 8008290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008294:	1f18      	subs	r0, r3, #4
 8008296:	2b00      	cmp	r3, #0
 8008298:	bfbc      	itt	lt
 800829a:	580b      	ldrlt	r3, [r1, r0]
 800829c:	18c0      	addlt	r0, r0, r3
 800829e:	4770      	bx	lr

080082a0 <__retarget_lock_acquire_recursive>:
 80082a0:	4770      	bx	lr

080082a2 <__retarget_lock_release_recursive>:
 80082a2:	4770      	bx	lr

080082a4 <_init>:
 80082a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a6:	bf00      	nop
 80082a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082aa:	bc08      	pop	{r3}
 80082ac:	469e      	mov	lr, r3
 80082ae:	4770      	bx	lr

080082b0 <_fini>:
 80082b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b2:	bf00      	nop
 80082b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b6:	bc08      	pop	{r3}
 80082b8:	469e      	mov	lr, r3
 80082ba:	4770      	bx	lr
