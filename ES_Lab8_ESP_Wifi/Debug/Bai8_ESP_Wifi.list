
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fb8  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b1c  08009b1c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08009b1c  08009b1c  00019b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b24  08009b24  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b28  08009b28  00019b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000398  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ac  200003ac  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f654  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f58  00000000  00000000  0003f698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  000435f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001498  00000000  00000000  00044c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026254  00000000  00000000  000460a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e8b9  00000000  00000000  0006c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfbc3  00000000  00000000  0008abb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016a778  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b24  00000000  00000000  0016a7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b4c 	.word	0x08006b4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006b4c 	.word	0x08006b4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c6:	463b      	mov	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d2:	4b3d      	ldr	r3, [pc, #244]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004d4:	4a3d      	ldr	r2, [pc, #244]	; (80005cc <MX_ADC1_Init+0x10c>)
 80004d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004d8:	4b3b      	ldr	r3, [pc, #236]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004de:	4b3a      	ldr	r3, [pc, #232]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004e4:	4b38      	ldr	r3, [pc, #224]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ea:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f0:	4b35      	ldr	r3, [pc, #212]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f8:	4b33      	ldr	r3, [pc, #204]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000500:	4a33      	ldr	r2, [pc, #204]	; (80005d0 <MX_ADC1_Init+0x110>)
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000504:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800050a:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <MX_ADC1_Init+0x108>)
 800050c:	2205      	movs	r2, #5
 800050e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000518:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <MX_ADC1_Init+0x108>)
 800051a:	2201      	movs	r2, #1
 800051c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800051e:	482a      	ldr	r0, [pc, #168]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000520:	f001 fe36 	bl	8002190 <HAL_ADC_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052a:	f001 f935 	bl	8001798 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800052e:	2308      	movs	r3, #8
 8000530:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000532:	2301      	movs	r3, #1
 8000534:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053a:	463b      	mov	r3, r7
 800053c:	4619      	mov	r1, r3
 800053e:	4822      	ldr	r0, [pc, #136]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000540:	f001 fe6a 	bl	8002218 <HAL_ADC_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054a:	f001 f925 	bl	8001798 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800054e:	2309      	movs	r3, #9
 8000550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000552:	2302      	movs	r3, #2
 8000554:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000556:	463b      	mov	r3, r7
 8000558:	4619      	mov	r1, r3
 800055a:	481b      	ldr	r0, [pc, #108]	; (80005c8 <MX_ADC1_Init+0x108>)
 800055c:	f001 fe5c 	bl	8002218 <HAL_ADC_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000566:	f001 f917 	bl	8001798 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800056a:	230a      	movs	r3, #10
 800056c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800056e:	2303      	movs	r3, #3
 8000570:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000572:	463b      	mov	r3, r7
 8000574:	4619      	mov	r1, r3
 8000576:	4814      	ldr	r0, [pc, #80]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000578:	f001 fe4e 	bl	8002218 <HAL_ADC_ConfigChannel>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000582:	f001 f909 	bl	8001798 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000586:	230b      	movs	r3, #11
 8000588:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800058a:	2304      	movs	r3, #4
 800058c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	4619      	mov	r1, r3
 8000592:	480d      	ldr	r0, [pc, #52]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000594:	f001 fe40 	bl	8002218 <HAL_ADC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800059e:	f001 f8fb 	bl	8001798 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005a2:	230c      	movs	r3, #12
 80005a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80005a6:	2305      	movs	r3, #5
 80005a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	4619      	mov	r1, r3
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <MX_ADC1_Init+0x108>)
 80005b0:	f001 fe32 	bl	8002218 <HAL_ADC_ConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80005ba:	f001 f8ed 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000048 	.word	0x20000048
 80005cc:	40012000 	.word	0x40012000
 80005d0:	0f000001 	.word	0x0f000001

080005d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a3c      	ldr	r2, [pc, #240]	; (80006e4 <HAL_ADC_MspInit+0x110>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d171      	bne.n	80006da <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 80005fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fe:	4a3a      	ldr	r2, [pc, #232]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000604:	6453      	str	r3, [r2, #68]	; 0x44
 8000606:	4b38      	ldr	r3, [pc, #224]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a33      	ldr	r2, [pc, #204]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a2c      	ldr	r2, [pc, #176]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800064a:	2307      	movs	r3, #7
 800064c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064e:	2303      	movs	r3, #3
 8000650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	4823      	ldr	r0, [pc, #140]	; (80006ec <HAL_ADC_MspInit+0x118>)
 800065e:	f002 fc87 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000662:	2303      	movs	r3, #3
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000666:	2303      	movs	r3, #3
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	481e      	ldr	r0, [pc, #120]	; (80006f0 <HAL_ADC_MspInit+0x11c>)
 8000676:	f002 fc7b 	bl	8002f70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 800067c:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <HAL_ADC_MspInit+0x124>)
 800067e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 8000694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000698:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 800069c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006c0:	f002 f8da 	bl	8002878 <HAL_DMA_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80006ca:	f001 f865 	bl	8001798 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006d2:	639a      	str	r2, [r3, #56]	; 0x38
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40012000 	.word	0x40012000
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020800 	.word	0x40020800
 80006f0:	40020400 	.word	0x40020400
 80006f4:	20000090 	.word	0x20000090
 80006f8:	40026410 	.word	0x40026410

080006fc <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	2108      	movs	r1, #8
 8000704:	4802      	ldr	r0, [pc, #8]	; (8000710 <button_init+0x14>)
 8000706:	f002 fdcf 	bl	80032a8 <HAL_GPIO_WritePin>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40020c00 	.word	0x40020c00

08000714 <button_Scan>:

void button_Scan(){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2108      	movs	r1, #8
 800071e:	482f      	ldr	r0, [pc, #188]	; (80007dc <button_Scan+0xc8>)
 8000720:	f002 fdc2 	bl	80032a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	2108      	movs	r1, #8
 8000728:	482c      	ldr	r0, [pc, #176]	; (80007dc <button_Scan+0xc8>)
 800072a:	f002 fdbd 	bl	80032a8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800072e:	230a      	movs	r3, #10
 8000730:	2202      	movs	r2, #2
 8000732:	492b      	ldr	r1, [pc, #172]	; (80007e0 <button_Scan+0xcc>)
 8000734:	482b      	ldr	r0, [pc, #172]	; (80007e4 <button_Scan+0xd0>)
 8000736:	f003 fd68 	bl	800420a <HAL_SPI_Receive>
	  int button_index = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800073e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000742:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	e03f      	b.n	80007ca <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db06      	blt.n	800075e <button_Scan+0x4a>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b03      	cmp	r3, #3
 8000754:	dc03      	bgt.n	800075e <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3304      	adds	r3, #4
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	e018      	b.n	8000790 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b03      	cmp	r3, #3
 8000762:	dd07      	ble.n	8000774 <button_Scan+0x60>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b07      	cmp	r3, #7
 8000768:	dc04      	bgt.n	8000774 <button_Scan+0x60>
			  button_index = 7 - i;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f1c3 0307 	rsb	r3, r3, #7
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	e00d      	b.n	8000790 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b07      	cmp	r3, #7
 8000778:	dd06      	ble.n	8000788 <button_Scan+0x74>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b0b      	cmp	r3, #11
 800077e:	dc03      	bgt.n	8000788 <button_Scan+0x74>
			  button_index = i + 4;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3304      	adds	r3, #4
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	e003      	b.n	8000790 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f1c3 0317 	rsb	r3, r3, #23
 800078e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <button_Scan+0xcc>)
 8000792:	881a      	ldrh	r2, [r3, #0]
 8000794:	897b      	ldrh	r3, [r7, #10]
 8000796:	4013      	ands	r3, r2
 8000798:	b29b      	uxth	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d005      	beq.n	80007aa <button_Scan+0x96>
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <button_Scan+0xd4>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2100      	movs	r1, #0
 80007a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007a8:	e009      	b.n	80007be <button_Scan+0xaa>
		  else button_count[button_index]++;
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <button_Scan+0xd4>)
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b2:	3301      	adds	r3, #1
 80007b4:	b299      	uxth	r1, r3
 80007b6:	4a0c      	ldr	r2, [pc, #48]	; (80007e8 <button_Scan+0xd4>)
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80007be:	897b      	ldrh	r3, [r7, #10]
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3301      	adds	r3, #1
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	ddbc      	ble.n	800074a <button_Scan+0x36>
	  }
}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	20000030 	.word	0x20000030
 80007e4:	200001f0 	.word	0x200001f0
 80007e8:	200000f0 	.word	0x200000f0

080007ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_DMA_Init+0x3c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <MX_DMA_Init+0x3c>)
 80007fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_DMA_Init+0x3c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2038      	movs	r0, #56	; 0x38
 8000814:	f001 fff9 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000818:	2038      	movs	r0, #56	; 0x38
 800081a:	f002 f812 	bl	8002842 <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	; 0x38
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000858:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <MX_FSMC_Init+0xec>)
 800085a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800085e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000860:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <MX_FSMC_Init+0xec>)
 8000862:	4a2e      	ldr	r2, [pc, #184]	; (800091c <MX_FSMC_Init+0xf0>)
 8000864:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000866:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <MX_FSMC_Init+0xec>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800086c:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <MX_FSMC_Init+0xec>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <MX_FSMC_Init+0xec>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_FSMC_Init+0xec>)
 800087a:	2210      	movs	r2, #16
 800087c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <MX_FSMC_Init+0xec>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_FSMC_Init+0xec>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800088a:	4b23      	ldr	r3, [pc, #140]	; (8000918 <MX_FSMC_Init+0xec>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_FSMC_Init+0xec>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_FSMC_Init+0xec>)
 8000898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_FSMC_Init+0xec>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_FSMC_Init+0xec>)
 80008a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008aa:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_FSMC_Init+0xec>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_FSMC_Init+0xec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_FSMC_Init+0xec>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80008be:	230f      	movs	r3, #15
 80008c0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80008c2:	230f      	movs	r3, #15
 80008c4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80008c6:	233c      	movs	r3, #60	; 0x3c
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80008ce:	2310      	movs	r3, #16
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80008d2:	2311      	movs	r3, #17
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80008da:	2308      	movs	r3, #8
 80008dc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80008de:	230f      	movs	r3, #15
 80008e0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80008e2:	2309      	movs	r3, #9
 80008e4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008ea:	2310      	movs	r3, #16
 80008ec:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008ee:	2311      	movs	r3, #17
 80008f0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008f6:	463a      	mov	r2, r7
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_FSMC_Init+0xec>)
 8000900:	f004 f866 	bl	80049d0 <HAL_SRAM_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800090a:	f000 ff45 	bl	8001798 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800090e:	bf00      	nop
 8000910:	3738      	adds	r7, #56	; 0x38
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000110 	.word	0x20000110
 800091c:	a0000104 	.word	0xa0000104

08000920 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_FSMC_MspInit+0x88>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d131      	bne.n	80009a0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <HAL_FSMC_MspInit+0x88>)
 800093e:	2201      	movs	r2, #1
 8000940:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_FSMC_MspInit+0x8c>)
 8000948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <HAL_FSMC_MspInit+0x8c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6393      	str	r3, [r2, #56]	; 0x38
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_FSMC_MspInit+0x8c>)
 8000954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800095e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000962:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000970:	230c      	movs	r3, #12
 8000972:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <HAL_FSMC_MspInit+0x90>)
 800097a:	f002 faf9 	bl	8002f70 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800097e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000982:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000990:	230c      	movs	r3, #12
 8000992:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4619      	mov	r1, r3
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <HAL_FSMC_MspInit+0x94>)
 800099a:	f002 fae9 	bl	8002f70 <HAL_GPIO_Init>
 800099e:	e000      	b.n	80009a2 <HAL_FSMC_MspInit+0x82>
    return;
 80009a0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000034 	.word	0x20000034
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40020c00 	.word	0x40020c00

080009b8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80009c0:	f7ff ffae 	bl	8000920 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	; 0x38
 80009d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
 80009e6:	4b8f      	ldr	r3, [pc, #572]	; (8000c24 <MX_GPIO_Init+0x258>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a8e      	ldr	r2, [pc, #568]	; (8000c24 <MX_GPIO_Init+0x258>)
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b8c      	ldr	r3, [pc, #560]	; (8000c24 <MX_GPIO_Init+0x258>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	623b      	str	r3, [r7, #32]
 80009fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	4b88      	ldr	r3, [pc, #544]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a87      	ldr	r2, [pc, #540]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b85      	ldr	r3, [pc, #532]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
 8000a1e:	4b81      	ldr	r3, [pc, #516]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a80      	ldr	r2, [pc, #512]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a24:	f043 0320 	orr.w	r3, r3, #32
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b7e      	ldr	r3, [pc, #504]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0320 	and.w	r3, r3, #32
 8000a32:	61bb      	str	r3, [r7, #24]
 8000a34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	4b7a      	ldr	r3, [pc, #488]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a79      	ldr	r2, [pc, #484]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b77      	ldr	r3, [pc, #476]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b73      	ldr	r3, [pc, #460]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a72      	ldr	r2, [pc, #456]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b70      	ldr	r3, [pc, #448]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b6c      	ldr	r3, [pc, #432]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a6b      	ldr	r2, [pc, #428]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b69      	ldr	r3, [pc, #420]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b65      	ldr	r3, [pc, #404]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a64      	ldr	r2, [pc, #400]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b62      	ldr	r3, [pc, #392]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b5e      	ldr	r3, [pc, #376]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a5d      	ldr	r2, [pc, #372]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b5b      	ldr	r3, [pc, #364]	; (8000c24 <MX_GPIO_Init+0x258>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2170      	movs	r1, #112	; 0x70
 8000ac6:	4858      	ldr	r0, [pc, #352]	; (8000c28 <MX_GPIO_Init+0x25c>)
 8000ac8:	f002 fbee 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000ad2:	4856      	ldr	r0, [pc, #344]	; (8000c2c <MX_GPIO_Init+0x260>)
 8000ad4:	f002 fbe8 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	4854      	ldr	r0, [pc, #336]	; (8000c30 <MX_GPIO_Init+0x264>)
 8000ae0:	f002 fbe2 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000aea:	4852      	ldr	r0, [pc, #328]	; (8000c34 <MX_GPIO_Init+0x268>)
 8000aec:	f002 fbdc 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af6:	4850      	ldr	r0, [pc, #320]	; (8000c38 <MX_GPIO_Init+0x26c>)
 8000af8:	f002 fbd6 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2108      	movs	r1, #8
 8000b00:	484e      	ldr	r0, [pc, #312]	; (8000c3c <MX_GPIO_Init+0x270>)
 8000b02:	f002 fbd1 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000b06:	2370      	movs	r3, #112	; 0x70
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4842      	ldr	r0, [pc, #264]	; (8000c28 <MX_GPIO_Init+0x25c>)
 8000b1e:	f002 fa27 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000b22:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	483c      	ldr	r0, [pc, #240]	; (8000c2c <MX_GPIO_Init+0x260>)
 8000b3c:	f002 fa18 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4836      	ldr	r0, [pc, #216]	; (8000c30 <MX_GPIO_Init+0x264>)
 8000b56:	f002 fa0b 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	482f      	ldr	r0, [pc, #188]	; (8000c30 <MX_GPIO_Init+0x264>)
 8000b74:	f002 f9fc 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000b78:	23c0      	movs	r3, #192	; 0xc0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	482b      	ldr	r0, [pc, #172]	; (8000c38 <MX_GPIO_Init+0x26c>)
 8000b8c:	f002 f9f0 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000b90:	2330      	movs	r3, #48	; 0x30
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4822      	ldr	r0, [pc, #136]	; (8000c2c <MX_GPIO_Init+0x260>)
 8000ba4:	f002 f9e4 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000ba8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	481c      	ldr	r0, [pc, #112]	; (8000c34 <MX_GPIO_Init+0x268>)
 8000bc2:	f002 f9d5 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000bc6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MX_GPIO_Init+0x260>)
 8000bdc:	f002 f9c8 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480f      	ldr	r0, [pc, #60]	; (8000c38 <MX_GPIO_Init+0x26c>)
 8000bfa:	f002 f9b9 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000bfe:	2308      	movs	r3, #8
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <MX_GPIO_Init+0x270>)
 8000c16:	f002 f9ab 	bl	8002f70 <HAL_GPIO_Init>

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	; 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40021400 	.word	0x40021400
 8000c34:	40021800 	.word	0x40021800
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_I2C1_Init+0x50>)
 8000c46:	4a13      	ldr	r2, [pc, #76]	; (8000c94 <MX_I2C1_Init+0x54>)
 8000c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_I2C1_Init+0x50>)
 8000c4c:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <MX_I2C1_Init+0x58>)
 8000c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_I2C1_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_I2C1_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_I2C1_Init+0x50>)
 8000c5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <MX_I2C1_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_I2C1_Init+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <MX_I2C1_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_I2C1_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <MX_I2C1_Init+0x50>)
 8000c7e:	f002 fb47 	bl	8003310 <HAL_I2C_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c88:	f000 fd86 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000160 	.word	0x20000160
 8000c94:	40005400 	.word	0x40005400
 8000c98:	000186a0 	.word	0x000186a0

08000c9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <HAL_I2C_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12b      	bne.n	8000d16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cda:	23c0      	movs	r3, #192	; 0xc0
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cea:	2304      	movs	r3, #4
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <HAL_I2C_MspInit+0x8c>)
 8000cf6:	f002 f93b 	bl	8002f70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_I2C_MspInit+0x88>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40005400 	.word	0x40005400
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020400 	.word	0x40020400

08000d2c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <LCD_WR_REG+0x1c>)
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	8013      	strh	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	600ffffe 	.word	0x600ffffe

08000d4c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <LCD_WR_DATA+0x1c>)
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	8053      	strh	r3, [r2, #2]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	600ffffe 	.word	0x600ffffe

08000d6c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <LCD_RD_DATA+0x20>)
 8000d74:	885b      	ldrh	r3, [r3, #2]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	b29b      	uxth	r3, r3
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	600ffffe 	.word	0x600ffffe

08000d90 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4604      	mov	r4, r0
 8000d98:	4608      	mov	r0, r1
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4623      	mov	r3, r4
 8000da0:	80fb      	strh	r3, [r7, #6]
 8000da2:	4603      	mov	r3, r0
 8000da4:	80bb      	strh	r3, [r7, #4]
 8000da6:	460b      	mov	r3, r1
 8000da8:	807b      	strh	r3, [r7, #2]
 8000daa:	4613      	mov	r3, r2
 8000dac:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000dae:	202a      	movs	r0, #42	; 0x2a
 8000db0:	f7ff ffbc 	bl	8000d2c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ffc6 	bl	8000d4c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ffc0 	bl	8000d4c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000dcc:	887b      	ldrh	r3, [r7, #2]
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ffba 	bl	8000d4c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000dd8:	887b      	ldrh	r3, [r7, #2]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ffb4 	bl	8000d4c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000de4:	202b      	movs	r0, #43	; 0x2b
 8000de6:	f7ff ffa1 	bl	8000d2c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ffab 	bl	8000d4c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ffa5 	bl	8000d4c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000e02:	883b      	ldrh	r3, [r7, #0]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff9f 	bl	8000d4c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000e0e:	883b      	ldrh	r3, [r7, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff99 	bl	8000d4c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000e1a:	202c      	movs	r0, #44	; 0x2c
 8000e1c:	f7ff ff86 	bl	8000d2c <LCD_WR_REG>
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd90      	pop	{r4, r7, pc}

08000e28 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <lcd_Clear+0x60>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <lcd_Clear+0x60>)
 8000e3c:	885b      	ldrh	r3, [r3, #2]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff ffa3 	bl	8000d90 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	81fb      	strh	r3, [r7, #14]
 8000e4e:	e011      	b.n	8000e74 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	81bb      	strh	r3, [r7, #12]
 8000e54:	e006      	b.n	8000e64 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff77 	bl	8000d4c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000e5e:	89bb      	ldrh	r3, [r7, #12]
 8000e60:	3301      	adds	r3, #1
 8000e62:	81bb      	strh	r3, [r7, #12]
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <lcd_Clear+0x60>)
 8000e66:	885b      	ldrh	r3, [r3, #2]
 8000e68:	89ba      	ldrh	r2, [r7, #12]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d3f3      	bcc.n	8000e56 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000e6e:	89fb      	ldrh	r3, [r7, #14]
 8000e70:	3301      	adds	r3, #1
 8000e72:	81fb      	strh	r3, [r7, #14]
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <lcd_Clear+0x60>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	89fa      	ldrh	r2, [r7, #14]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d3e8      	bcc.n	8000e50 <lcd_Clear+0x28>
		}
	}
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200001b4 	.word	0x200001b4

08000e8c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
 8000e96:	460b      	mov	r3, r1
 8000e98:	80bb      	strh	r3, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000e9e:	88bb      	ldrh	r3, [r7, #4]
 8000ea0:	88fa      	ldrh	r2, [r7, #6]
 8000ea2:	88b9      	ldrh	r1, [r7, #4]
 8000ea4:	88f8      	ldrh	r0, [r7, #6]
 8000ea6:	f7ff ff73 	bl	8000d90 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000eaa:	887b      	ldrh	r3, [r7, #2]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff4d 	bl	8000d4c <LCD_WR_DATA>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4623      	mov	r3, r4
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80bb      	strh	r3, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	70fb      	strb	r3, [r7, #3]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000ee2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf14      	ite	ne
 8000efe:	2301      	movne	r3, #1
 8000f00:	2300      	moveq	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4413      	add	r3, r2
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	fb12 f303 	smulbb	r3, r2, r3
 8000f12:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	3b20      	subs	r3, #32
 8000f18:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	4413      	add	r3, r2
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	b29c      	uxth	r4, r3
 8000f28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	3b01      	subs	r3, #1
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	88b9      	ldrh	r1, [r7, #4]
 8000f3a:	88f8      	ldrh	r0, [r7, #6]
 8000f3c:	4622      	mov	r2, r4
 8000f3e:	f7ff ff27 	bl	8000d90 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	827b      	strh	r3, [r7, #18]
 8000f46:	e07a      	b.n	800103e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000f48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f4c:	2b0c      	cmp	r3, #12
 8000f4e:	d028      	beq.n	8000fa2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000f50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f54:	2b10      	cmp	r3, #16
 8000f56:	d108      	bne.n	8000f6a <lcd_ShowChar+0xae>
 8000f58:	78fa      	ldrb	r2, [r7, #3]
 8000f5a:	8a7b      	ldrh	r3, [r7, #18]
 8000f5c:	493c      	ldr	r1, [pc, #240]	; (8001050 <lcd_ShowChar+0x194>)
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	440a      	add	r2, r1
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	75fb      	strb	r3, [r7, #23]
 8000f68:	e01b      	b.n	8000fa2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000f6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f6e:	2b18      	cmp	r3, #24
 8000f70:	d10b      	bne.n	8000f8a <lcd_ShowChar+0xce>
 8000f72:	78fa      	ldrb	r2, [r7, #3]
 8000f74:	8a79      	ldrh	r1, [r7, #18]
 8000f76:	4837      	ldr	r0, [pc, #220]	; (8001054 <lcd_ShowChar+0x198>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	4403      	add	r3, r0
 8000f82:	440b      	add	r3, r1
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	75fb      	strb	r3, [r7, #23]
 8000f88:	e00b      	b.n	8000fa2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000f8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f8e:	2b20      	cmp	r3, #32
 8000f90:	d15a      	bne.n	8001048 <lcd_ShowChar+0x18c>
 8000f92:	78fa      	ldrb	r2, [r7, #3]
 8000f94:	8a7b      	ldrh	r3, [r7, #18]
 8000f96:	4930      	ldr	r1, [pc, #192]	; (8001058 <lcd_ShowChar+0x19c>)
 8000f98:	0192      	lsls	r2, r2, #6
 8000f9a:	440a      	add	r2, r1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75bb      	strb	r3, [r7, #22]
 8000fa6:	e044      	b.n	8001032 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000fa8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d120      	bne.n	8000ff2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000fb0:	7dfa      	ldrb	r2, [r7, #23]
 8000fb2:	7dbb      	ldrb	r3, [r7, #22]
 8000fb4:	fa42 f303 	asr.w	r3, r2, r3
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d004      	beq.n	8000fca <lcd_ShowChar+0x10e>
 8000fc0:	883b      	ldrh	r3, [r7, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fec2 	bl	8000d4c <LCD_WR_DATA>
 8000fc8:	e003      	b.n	8000fd2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000fca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff febd 	bl	8000d4c <LCD_WR_DATA>
				m++;
 8000fd2:	7d7b      	ldrb	r3, [r7, #21]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000fd8:	7d7b      	ldrb	r3, [r7, #21]
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fe0:	fb02 f201 	mul.w	r2, r2, r1
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d11f      	bne.n	800102c <lcd_ShowChar+0x170>
				{
					m=0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	757b      	strb	r3, [r7, #21]
					break;
 8000ff0:	e022      	b.n	8001038 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000ff2:	7dfa      	ldrb	r2, [r7, #23]
 8000ff4:	7dbb      	ldrb	r3, [r7, #22]
 8000ff6:	fa42 f303 	asr.w	r3, r2, r3
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <lcd_ShowChar+0x152>
 8001002:	883a      	ldrh	r2, [r7, #0]
 8001004:	88b9      	ldrh	r1, [r7, #4]
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff3f 	bl	8000e8c <lcd_DrawPoint>
				x++;
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	3301      	adds	r3, #1
 8001012:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	8a3b      	ldrh	r3, [r7, #16]
 8001018:	1ad2      	subs	r2, r2, r3
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	429a      	cmp	r2, r3
 800101e:	d105      	bne.n	800102c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001020:	8a3b      	ldrh	r3, [r7, #16]
 8001022:	80fb      	strh	r3, [r7, #6]
					y++;
 8001024:	88bb      	ldrh	r3, [r7, #4]
 8001026:	3301      	adds	r3, #1
 8001028:	80bb      	strh	r3, [r7, #4]
					break;
 800102a:	e005      	b.n	8001038 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 800102c:	7dbb      	ldrb	r3, [r7, #22]
 800102e:	3301      	adds	r3, #1
 8001030:	75bb      	strb	r3, [r7, #22]
 8001032:	7dbb      	ldrb	r3, [r7, #22]
 8001034:	2b07      	cmp	r3, #7
 8001036:	d9b7      	bls.n	8000fa8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001038:	8a7b      	ldrh	r3, [r7, #18]
 800103a:	3301      	adds	r3, #1
 800103c:	827b      	strh	r3, [r7, #18]
 800103e:	8a7a      	ldrh	r2, [r7, #18]
 8001040:	89bb      	ldrh	r3, [r7, #12]
 8001042:	429a      	cmp	r2, r3
 8001044:	d380      	bcc.n	8000f48 <lcd_ShowChar+0x8c>
 8001046:	e000      	b.n	800104a <lcd_ShowChar+0x18e>
		else return;
 8001048:	bf00      	nop
				}
			}
		}
	}
}
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}
 8001050:	08006b7c 	.word	0x08006b7c
 8001054:	0800716c 	.word	0x0800716c
 8001058:	0800833c 	.word	0x0800833c

0800105c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <lcd_SetDir+0x44>)
 8001078:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800107c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <lcd_SetDir+0x44>)
 8001080:	22f0      	movs	r2, #240	; 0xf0
 8001082:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001084:	e006      	b.n	8001094 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <lcd_SetDir+0x44>)
 8001088:	22f0      	movs	r2, #240	; 0xf0
 800108a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <lcd_SetDir+0x44>)
 800108e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001092:	805a      	strh	r2, [r3, #2]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	200001b4 	.word	0x200001b4

080010a4 <lcd_init>:


void lcd_init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ae:	48aa      	ldr	r0, [pc, #680]	; (8001358 <lcd_init+0x2b4>)
 80010b0:	f002 f8fa 	bl	80032a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b8:	f001 f846 	bl	8002148 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c2:	48a5      	ldr	r0, [pc, #660]	; (8001358 <lcd_init+0x2b4>)
 80010c4:	f002 f8f0 	bl	80032a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010cc:	f001 f83c 	bl	8002148 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff ffc3 	bl	800105c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80010d6:	20d3      	movs	r0, #211	; 0xd3
 80010d8:	f7ff fe28 	bl	8000d2c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80010dc:	f7ff fe46 	bl	8000d6c <LCD_RD_DATA>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b9d      	ldr	r3, [pc, #628]	; (800135c <lcd_init+0x2b8>)
 80010e6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010e8:	f7ff fe40 	bl	8000d6c <LCD_RD_DATA>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b9a      	ldr	r3, [pc, #616]	; (800135c <lcd_init+0x2b8>)
 80010f2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010f4:	f7ff fe3a 	bl	8000d6c <LCD_RD_DATA>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b97      	ldr	r3, [pc, #604]	; (800135c <lcd_init+0x2b8>)
 80010fe:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001100:	4b96      	ldr	r3, [pc, #600]	; (800135c <lcd_init+0x2b8>)
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b94      	ldr	r3, [pc, #592]	; (800135c <lcd_init+0x2b8>)
 800110a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800110c:	f7ff fe2e 	bl	8000d6c <LCD_RD_DATA>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b91      	ldr	r3, [pc, #580]	; (800135c <lcd_init+0x2b8>)
 8001116:	889b      	ldrh	r3, [r3, #4]
 8001118:	4313      	orrs	r3, r2
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b8f      	ldr	r3, [pc, #572]	; (800135c <lcd_init+0x2b8>)
 800111e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001120:	20cf      	movs	r0, #207	; 0xcf
 8001122:	f7ff fe03 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fe10 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800112c:	20c1      	movs	r0, #193	; 0xc1
 800112e:	f7ff fe0d 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001132:	2030      	movs	r0, #48	; 0x30
 8001134:	f7ff fe0a 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001138:	20ed      	movs	r0, #237	; 0xed
 800113a:	f7ff fdf7 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800113e:	2064      	movs	r0, #100	; 0x64
 8001140:	f7ff fe04 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001144:	2003      	movs	r0, #3
 8001146:	f7ff fe01 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800114a:	2012      	movs	r0, #18
 800114c:	f7ff fdfe 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001150:	2081      	movs	r0, #129	; 0x81
 8001152:	f7ff fdfb 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001156:	20e8      	movs	r0, #232	; 0xe8
 8001158:	f7ff fde8 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800115c:	2085      	movs	r0, #133	; 0x85
 800115e:	f7ff fdf5 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001162:	2010      	movs	r0, #16
 8001164:	f7ff fdf2 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001168:	207a      	movs	r0, #122	; 0x7a
 800116a:	f7ff fdef 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800116e:	20cb      	movs	r0, #203	; 0xcb
 8001170:	f7ff fddc 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001174:	2039      	movs	r0, #57	; 0x39
 8001176:	f7ff fde9 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800117a:	202c      	movs	r0, #44	; 0x2c
 800117c:	f7ff fde6 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fde3 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001186:	2034      	movs	r0, #52	; 0x34
 8001188:	f7ff fde0 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800118c:	2002      	movs	r0, #2
 800118e:	f7ff fddd 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001192:	20f7      	movs	r0, #247	; 0xf7
 8001194:	f7ff fdca 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001198:	2020      	movs	r0, #32
 800119a:	f7ff fdd7 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800119e:	20ea      	movs	r0, #234	; 0xea
 80011a0:	f7ff fdc4 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff fdd1 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fdce 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80011b0:	20c0      	movs	r0, #192	; 0xc0
 80011b2:	f7ff fdbb 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80011b6:	201b      	movs	r0, #27
 80011b8:	f7ff fdc8 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80011bc:	20c1      	movs	r0, #193	; 0xc1
 80011be:	f7ff fdb5 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fdc2 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80011c8:	20c5      	movs	r0, #197	; 0xc5
 80011ca:	f7ff fdaf 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80011ce:	2030      	movs	r0, #48	; 0x30
 80011d0:	f7ff fdbc 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80011d4:	2030      	movs	r0, #48	; 0x30
 80011d6:	f7ff fdb9 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011da:	20c7      	movs	r0, #199	; 0xc7
 80011dc:	f7ff fda6 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011e0:	20b7      	movs	r0, #183	; 0xb7
 80011e2:	f7ff fdb3 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011e6:	2036      	movs	r0, #54	; 0x36
 80011e8:	f7ff fda0 	bl	8000d2c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80011ec:	2008      	movs	r0, #8
 80011ee:	f7ff fdad 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80011f2:	203a      	movs	r0, #58	; 0x3a
 80011f4:	f7ff fd9a 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80011f8:	2055      	movs	r0, #85	; 0x55
 80011fa:	f7ff fda7 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80011fe:	20b1      	movs	r0, #177	; 0xb1
 8001200:	f7ff fd94 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fda1 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800120a:	201a      	movs	r0, #26
 800120c:	f7ff fd9e 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001210:	20b6      	movs	r0, #182	; 0xb6
 8001212:	f7ff fd8b 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001216:	200a      	movs	r0, #10
 8001218:	f7ff fd98 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800121c:	20a2      	movs	r0, #162	; 0xa2
 800121e:	f7ff fd95 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001222:	20f2      	movs	r0, #242	; 0xf2
 8001224:	f7ff fd82 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fd8f 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800122e:	2026      	movs	r0, #38	; 0x26
 8001230:	f7ff fd7c 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff fd89 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800123a:	20e0      	movs	r0, #224	; 0xe0
 800123c:	f7ff fd76 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001240:	200f      	movs	r0, #15
 8001242:	f7ff fd83 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001246:	202a      	movs	r0, #42	; 0x2a
 8001248:	f7ff fd80 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800124c:	2028      	movs	r0, #40	; 0x28
 800124e:	f7ff fd7d 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001252:	2008      	movs	r0, #8
 8001254:	f7ff fd7a 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001258:	200e      	movs	r0, #14
 800125a:	f7ff fd77 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800125e:	2008      	movs	r0, #8
 8001260:	f7ff fd74 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001264:	2054      	movs	r0, #84	; 0x54
 8001266:	f7ff fd71 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800126a:	20a9      	movs	r0, #169	; 0xa9
 800126c:	f7ff fd6e 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001270:	2043      	movs	r0, #67	; 0x43
 8001272:	f7ff fd6b 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001276:	200a      	movs	r0, #10
 8001278:	f7ff fd68 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800127c:	200f      	movs	r0, #15
 800127e:	f7ff fd65 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff fd62 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fd5f 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fd5c 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fd59 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800129a:	20e1      	movs	r0, #225	; 0xe1
 800129c:	f7ff fd46 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff fd53 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80012a6:	2015      	movs	r0, #21
 80012a8:	f7ff fd50 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80012ac:	2017      	movs	r0, #23
 80012ae:	f7ff fd4d 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80012b2:	2007      	movs	r0, #7
 80012b4:	f7ff fd4a 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80012b8:	2011      	movs	r0, #17
 80012ba:	f7ff fd47 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80012be:	2006      	movs	r0, #6
 80012c0:	f7ff fd44 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80012c4:	202b      	movs	r0, #43	; 0x2b
 80012c6:	f7ff fd41 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80012ca:	2056      	movs	r0, #86	; 0x56
 80012cc:	f7ff fd3e 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80012d0:	203c      	movs	r0, #60	; 0x3c
 80012d2:	f7ff fd3b 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80012d6:	2005      	movs	r0, #5
 80012d8:	f7ff fd38 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012dc:	2010      	movs	r0, #16
 80012de:	f7ff fd35 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012e2:	200f      	movs	r0, #15
 80012e4:	f7ff fd32 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012e8:	203f      	movs	r0, #63	; 0x3f
 80012ea:	f7ff fd2f 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012ee:	203f      	movs	r0, #63	; 0x3f
 80012f0:	f7ff fd2c 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012f4:	200f      	movs	r0, #15
 80012f6:	f7ff fd29 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80012fa:	202b      	movs	r0, #43	; 0x2b
 80012fc:	f7ff fd16 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff fd23 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff fd20 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff fd1d 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001312:	203f      	movs	r0, #63	; 0x3f
 8001314:	f7ff fd1a 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001318:	202a      	movs	r0, #42	; 0x2a
 800131a:	f7ff fd07 	bl	8000d2c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fd14 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff fd11 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fd0e 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001330:	20ef      	movs	r0, #239	; 0xef
 8001332:	f7ff fd0b 	bl	8000d4c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001336:	2011      	movs	r0, #17
 8001338:	f7ff fcf8 	bl	8000d2c <LCD_WR_REG>
	HAL_Delay(120);
 800133c:	2078      	movs	r0, #120	; 0x78
 800133e:	f000 ff03 	bl	8002148 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001342:	2029      	movs	r0, #41	; 0x29
 8001344:	f7ff fcf2 	bl	8000d2c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134e:	4804      	ldr	r0, [pc, #16]	; (8001360 <lcd_init+0x2bc>)
 8001350:	f001 ffaa 	bl	80032a8 <HAL_GPIO_WritePin>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40020800 	.word	0x40020800
 800135c:	200001b4 	.word	0x200001b4
 8001360:	40020000 	.word	0x40020000

08001364 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b08b      	sub	sp, #44	; 0x2c
 8001368:	af04      	add	r7, sp, #16
 800136a:	60ba      	str	r2, [r7, #8]
 800136c:	461a      	mov	r2, r3
 800136e:	4603      	mov	r3, r0
 8001370:	81fb      	strh	r3, [r7, #14]
 8001372:	460b      	mov	r3, r1
 8001374:	81bb      	strh	r3, [r7, #12]
 8001376:	4613      	mov	r3, r2
 8001378:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 800137e:	2300      	movs	r3, #0
 8001380:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001382:	e048      	b.n	8001416 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d145      	bne.n	8001416 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800138a:	89fa      	ldrh	r2, [r7, #14]
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <lcd_ShowStr+0xc4>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001396:	085b      	lsrs	r3, r3, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	1acb      	subs	r3, r1, r3
 800139c:	429a      	cmp	r2, r3
 800139e:	dc3f      	bgt.n	8001420 <lcd_ShowStr+0xbc>
 80013a0:	89ba      	ldrh	r2, [r7, #12]
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <lcd_ShowStr+0xc4>)
 80013a4:	885b      	ldrh	r3, [r3, #2]
 80013a6:	4619      	mov	r1, r3
 80013a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013ac:	1acb      	subs	r3, r1, r3
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dc36      	bgt.n	8001420 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b80      	cmp	r3, #128	; 0x80
 80013b8:	d902      	bls.n	80013c0 <lcd_ShowStr+0x5c>
 80013ba:	2301      	movs	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
 80013be:	e02a      	b.n	8001416 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b0d      	cmp	r3, #13
 80013c6:	d10b      	bne.n	80013e0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80013c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	89bb      	ldrh	r3, [r7, #12]
 80013d0:	4413      	add	r3, r2
 80013d2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80013d4:	8abb      	ldrh	r3, [r7, #20]
 80013d6:	81fb      	strh	r3, [r7, #14]
					str++;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	3301      	adds	r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	e017      	b.n	8001410 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	88fc      	ldrh	r4, [r7, #6]
 80013e6:	89b9      	ldrh	r1, [r7, #12]
 80013e8:	89f8      	ldrh	r0, [r7, #14]
 80013ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4623      	mov	r3, r4
 80013fc:	f7ff fd5e 	bl	8000ebc <lcd_ShowChar>
					x+=sizey/2;
 8001400:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	b29a      	uxth	r2, r3
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	4413      	add	r3, r2
 800140e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	3301      	adds	r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1b2      	bne.n	8001384 <lcd_ShowStr+0x20>
 800141e:	e000      	b.n	8001422 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001420:	bf00      	nop
			}
		}
	}
}
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	200001b4 	.word	0x200001b4

0800142c <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <led7_Scan+0x104>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	b29a      	uxth	r2, r3
 8001438:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <led7_Scan+0x104>)
 800143a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <led7_Scan+0x108>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a3d      	ldr	r2, [pc, #244]	; (8001538 <led7_Scan+0x10c>)
 8001442:	5cd3      	ldrb	r3, [r2, r3]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <led7_Scan+0x104>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b21b      	sxth	r3, r3
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b36      	ldr	r3, [pc, #216]	; (8001530 <led7_Scan+0x104>)
 8001456:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <led7_Scan+0x108>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d847      	bhi.n	80014f0 <led7_Scan+0xc4>
 8001460:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <led7_Scan+0x3c>)
 8001462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001466:	bf00      	nop
 8001468:	08001479 	.word	0x08001479
 800146c:	08001497 	.word	0x08001497
 8001470:	080014b5 	.word	0x080014b5
 8001474:	080014d3 	.word	0x080014d3
	case 0:
		spi_buffer |= 0x00b0;
 8001478:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <led7_Scan+0x104>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <led7_Scan+0x104>)
 8001484:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <led7_Scan+0x104>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <led7_Scan+0x104>)
 8001492:	801a      	strh	r2, [r3, #0]
		break;
 8001494:	e02d      	b.n	80014f2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <led7_Scan+0x104>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <led7_Scan+0x104>)
 80014a2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <led7_Scan+0x104>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	f023 0320 	bic.w	r3, r3, #32
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <led7_Scan+0x104>)
 80014b0:	801a      	strh	r2, [r3, #0]
		break;
 80014b2:	e01e      	b.n	80014f2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <led7_Scan+0x104>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <led7_Scan+0x104>)
 80014c0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <led7_Scan+0x104>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	f023 0310 	bic.w	r3, r3, #16
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <led7_Scan+0x104>)
 80014ce:	801a      	strh	r2, [r3, #0]
		break;
 80014d0:	e00f      	b.n	80014f2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <led7_Scan+0x104>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <led7_Scan+0x104>)
 80014de:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <led7_Scan+0x104>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <led7_Scan+0x104>)
 80014ec:	801a      	strh	r2, [r3, #0]
		break;
 80014ee:	e000      	b.n	80014f2 <led7_Scan+0xc6>
	default:
		break;
 80014f0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <led7_Scan+0x108>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	425a      	negs	r2, r3
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	f002 0203 	and.w	r2, r2, #3
 8001502:	bf58      	it	pl
 8001504:	4253      	negpl	r3, r2
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <led7_Scan+0x108>)
 8001508:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2140      	movs	r1, #64	; 0x40
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <led7_Scan+0x110>)
 8001510:	f001 feca 	bl	80032a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001514:	2301      	movs	r3, #1
 8001516:	2202      	movs	r2, #2
 8001518:	4905      	ldr	r1, [pc, #20]	; (8001530 <led7_Scan+0x104>)
 800151a:	4809      	ldr	r0, [pc, #36]	; (8001540 <led7_Scan+0x114>)
 800151c:	f002 fd39 	bl	8003f92 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001520:	2201      	movs	r2, #1
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <led7_Scan+0x110>)
 8001526:	f001 febf 	bl	80032a8 <HAL_GPIO_WritePin>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000004 	.word	0x20000004
 8001534:	20000038 	.word	0x20000038
 8001538:	20000000 	.word	0x20000000
 800153c:	40021800 	.word	0x40021800
 8001540:	200001f0 	.word	0x200001f0

08001544 <lightProcess>:
 */
#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <lightProcess+0x58>)
 800154a:	8b5b      	ldrh	r3, [r3, #26]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d113      	bne.n	8001578 <lightProcess+0x34>
		light_status = 1 - light_status;
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <lightProcess+0x5c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	f1c3 0301 	rsb	r3, r3, #1
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <lightProcess+0x5c>)
 800155c:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <lightProcess+0x5c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d104      	bne.n	8001570 <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 8001566:	2101      	movs	r1, #1
 8001568:	480e      	ldr	r0, [pc, #56]	; (80015a4 <lightProcess+0x60>)
 800156a:	f000 fc05 	bl	8001d78 <uart_EspSendBytes>
 800156e:	e003      	b.n	8001578 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 8001570:	2101      	movs	r1, #1
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <lightProcess+0x64>)
 8001574:	f000 fc00 	bl	8001d78 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <lightProcess+0x5c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d105      	bne.n	800158c <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8001580:	2201      	movs	r2, #1
 8001582:	2120      	movs	r1, #32
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <lightProcess+0x68>)
 8001586:	f001 fe8f 	bl	80032a8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 800158a:	e004      	b.n	8001596 <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2120      	movs	r1, #32
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <lightProcess+0x68>)
 8001592:	f001 fe89 	bl	80032a8 <HAL_GPIO_WritePin>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200000f0 	.word	0x200000f0
 80015a0:	2000003c 	.word	0x2000003c
 80015a4:	08006b64 	.word	0x08006b64
 80015a8:	08006b68 	.word	0x08006b68
 80015ac:	40021000 	.word	0x40021000

080015b0 <test_Esp>:

void test_Esp(){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0) uart_EspSendBytes("o", 1);
 80015b6:	f000 fc3b 	bl	8001e30 <uart_EspCheck>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d104      	bne.n	80015ca <test_Esp+0x1a>
 80015c0:	2101      	movs	r1, #1
 80015c2:	480a      	ldr	r0, [pc, #40]	; (80015ec <test_Esp+0x3c>)
 80015c4:	f000 fbd8 	bl	8001d78 <uart_EspSendBytes>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 80015c8:	e00c      	b.n	80015e4 <test_Esp+0x34>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 80015ca:	2300      	movs	r3, #0
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2318      	movs	r3, #24
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	2300      	movs	r3, #0
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <test_Esp+0x40>)
 80015dc:	2132      	movs	r1, #50	; 0x32
 80015de:	200a      	movs	r0, #10
 80015e0:	f7ff fec0 	bl	8001364 <lcd_ShowStr>
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	08006b6c 	.word	0x08006b6c
 80015f0:	08006b70 	.word	0x08006b70

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f8:	f000 fd34 	bl	8002064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fc:	f000 f82e 	bl	800165c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001600:	f7ff f9e4 	bl	80009cc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001604:	f000 fa7c 	bl	8001b00 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001608:	f000 f920 	bl	800184c <MX_SPI1_Init>
  MX_FSMC_Init();
 800160c:	f7ff f90e 	bl	800082c <MX_FSMC_Init>
  MX_I2C1_Init();
 8001610:	f7ff fb16 	bl	8000c40 <MX_I2C1_Init>
  MX_TIM13_Init();
 8001614:	f000 fac0 	bl	8001b98 <MX_TIM13_Init>
  MX_DMA_Init();
 8001618:	f7ff f8e8 	bl	80007ec <MX_DMA_Init>
  MX_ADC1_Init();
 800161c:	f7fe ff50 	bl	80004c0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001620:	f000 fa1e 	bl	8001a60 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001624:	f000 fc3e 	bl	8001ea4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001628:	f000 fc12 	bl	8001e50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800162c:	f000 f880 	bl	8001730 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fbf9 	bl	8000e28 <lcd_Clear>
 while (1)
  {
	  // 50ms task
	  if(flag_timer2 == 1){
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <main+0x64>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d1fb      	bne.n	8001636 <main+0x42>
		  flag_timer2 = 0;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <main+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 8001644:	f7ff f866 	bl	8000714 <button_Scan>
		  test_Esp();
 8001648:	f7ff ffb2 	bl	80015b0 <test_Esp>
		  lightProcess();
 800164c:	f7ff ff7a 	bl	8001544 <lightProcess>
		  test_LedDebug();
 8001650:	f000 f87e 	bl	8001750 <test_LedDebug>
	  if(flag_timer2 == 1){
 8001654:	e7ef      	b.n	8001636 <main+0x42>
 8001656:	bf00      	nop
 8001658:	2000003e 	.word	0x2000003e

0800165c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b094      	sub	sp, #80	; 0x50
 8001660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	2230      	movs	r2, #48	; 0x30
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f005 fa66 	bl	8006b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <SystemClock_Config+0xcc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <SystemClock_Config+0xcc>)
 800168a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <SystemClock_Config+0xcc>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <SystemClock_Config+0xd0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <SystemClock_Config+0xd0>)
 80016a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <SystemClock_Config+0xd0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b8:	2302      	movs	r3, #2
 80016ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016bc:	2301      	movs	r3, #1
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c0:	2310      	movs	r3, #16
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c4:	2302      	movs	r3, #2
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016cc:	2308      	movs	r3, #8
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016d0:	23a8      	movs	r3, #168	; 0xa8
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016d8:	2304      	movs	r3, #4
 80016da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 ff59 	bl	8003598 <HAL_RCC_OscConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016ec:	f000 f854 	bl	8001798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f0:	230f      	movs	r3, #15
 80016f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2302      	movs	r3, #2
 80016f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001702:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2105      	movs	r1, #5
 800170e:	4618      	mov	r0, r3
 8001710:	f002 f9ba 	bl	8003a88 <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800171a:	f000 f83d 	bl	8001798 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3750      	adds	r7, #80	; 0x50
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000

08001730 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	  timer_init();
 8001734:	f000 f836 	bl	80017a4 <timer_init>
	  button_init();
 8001738:	f7fe ffe0 	bl	80006fc <button_init>
	  lcd_init();
 800173c:	f7ff fcb2 	bl	80010a4 <lcd_init>
	  uart_init_esp();
 8001740:	f000 fb04 	bl	8001d4c <uart_init_esp>
	  setTimer2(50);
 8001744:	2032      	movs	r0, #50	; 0x32
 8001746:	f000 f83b 	bl	80017c0 <setTimer2>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <test_LedDebug+0x3c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <test_LedDebug+0x40>)
 800175c:	fb83 1302 	smull	r1, r3, r3, r2
 8001760:	10d9      	asrs	r1, r3, #3
 8001762:	17d3      	asrs	r3, r2, #31
 8001764:	1ac9      	subs	r1, r1, r3
 8001766:	460b      	mov	r3, r1
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	1ad1      	subs	r1, r2, r3
 8001770:	b2ca      	uxtb	r2, r1
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <test_LedDebug+0x3c>)
 8001774:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <test_LedDebug+0x3c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d103      	bne.n	8001786 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800177e:	2110      	movs	r1, #16
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <test_LedDebug+0x44>)
 8001782:	f001 fdaa 	bl	80032da <HAL_GPIO_TogglePin>
	}
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000003d 	.word	0x2000003d
 8001790:	66666667 	.word	0x66666667
 8001794:	40021000 	.word	0x40021000

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <Error_Handler+0x8>
	...

080017a4 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <timer_init+0x14>)
 80017aa:	f003 fa0d 	bl	8004bc8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <timer_init+0x18>)
 80017b0:	f003 f9a2 	bl	8004af8 <HAL_TIM_Base_Start>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200002d8 	.word	0x200002d8
 80017bc:	20000290 	.word	0x20000290

080017c0 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <setTimer2+0x2c>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <setTimer2+0x2c>)
 80017d2:	881a      	ldrh	r2, [r3, #0]
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <setTimer2+0x30>)
 80017d6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <setTimer2+0x34>)
 80017da:	2200      	movs	r2, #0
 80017dc:	801a      	strh	r2, [r3, #0]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000042 	.word	0x20000042
 80017f0:	20000040 	.word	0x20000040
 80017f4:	2000003e 	.word	0x2000003e

080017f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001808:	d116      	bne.n	8001838 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d010      	beq.n	8001834 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800181c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001828:	2201      	movs	r2, #1
 800182a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001832:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001834:	f7ff fdfa 	bl	800142c <led7_Scan>
	}
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000040 	.word	0x20000040
 8001844:	2000003e 	.word	0x2000003e
 8001848:	20000042 	.word	0x20000042

0800184c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001852:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <MX_SPI1_Init+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800185c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_SPI1_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_SPI1_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_SPI1_Init+0x64>)
 8001898:	220a      	movs	r2, #10
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_SPI1_Init+0x64>)
 800189e:	f002 faef 	bl	8003e80 <HAL_SPI_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018a8:	f7ff ff76 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200001f0 	.word	0x200001f0
 80018b4:	40013000 	.word	0x40013000

080018b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_SPI_MspInit+0x84>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d12b      	bne.n	8001932 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_SPI_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a10      	ldr	r2, [pc, #64]	; (8001940 <HAL_SPI_MspInit+0x88>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_SPI_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001912:	2338      	movs	r3, #56	; 0x38
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001922:	2305      	movs	r3, #5
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <HAL_SPI_MspInit+0x8c>)
 800192e:	f001 fb1f 	bl	8002f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40013000 	.word	0x40013000
 8001940:	40023800 	.word	0x40023800
 8001944:	40020400 	.word	0x40020400

08001948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_MspInit+0x4c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <HAL_MspInit+0x4c>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_MspInit+0x4c>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800199c:	e7fe      	b.n	800199c <NMI_Handler+0x4>

0800199e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <HardFault_Handler+0x4>

080019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <MemManage_Handler+0x4>

080019aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <BusFault_Handler+0x4>

080019b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <UsageFault_Handler+0x4>

080019b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e4:	f000 fb90 	bl	8002108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <TIM2_IRQHandler+0x10>)
 80019f2:	f003 f9b2 	bl	8004d5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002d8 	.word	0x200002d8

08001a00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <USART1_IRQHandler+0x10>)
 8001a06:	f004 f8ed 	bl	8005be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000320 	.word	0x20000320

08001a14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <USART2_IRQHandler+0x10>)
 8001a1a:	f004 f8e3 	bl	8005be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000364 	.word	0x20000364

08001a28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <DMA2_Stream0_IRQHandler+0x10>)
 8001a2e:	f001 f863 	bl	8002af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000090 	.word	0x20000090

08001a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a7e:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <MX_TIM1_Init+0x9c>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a84:	2253      	movs	r2, #83	; 0x53
 8001a86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aa8:	4813      	ldr	r0, [pc, #76]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001aaa:	f002 ffd5 	bl	8004a58 <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ab4:	f7ff fe70 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001ac6:	f003 fb13 	bl	80050f0 <HAL_TIM_ConfigClockSource>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ad0:	f7ff fe62 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_TIM1_Init+0x98>)
 8001ae2:	f003 fedf 	bl	80058a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001aec:	f7ff fe54 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000290 	.word	0x20000290
 8001afc:	40010000 	.word	0x40010000

08001b00 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b14:	463b      	mov	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <MX_TIM2_Init+0x94>)
 8001b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <MX_TIM2_Init+0x94>)
 8001b26:	f240 3247 	movw	r2, #839	; 0x347
 8001b2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <MX_TIM2_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <MX_TIM2_Init+0x94>)
 8001b34:	2263      	movs	r2, #99	; 0x63
 8001b36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <MX_TIM2_Init+0x94>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_TIM2_Init+0x94>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b44:	4813      	ldr	r0, [pc, #76]	; (8001b94 <MX_TIM2_Init+0x94>)
 8001b46:	f002 ff87 	bl	8004a58 <HAL_TIM_Base_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b50:	f7ff fe22 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480c      	ldr	r0, [pc, #48]	; (8001b94 <MX_TIM2_Init+0x94>)
 8001b62:	f003 fac5 	bl	80050f0 <HAL_TIM_ConfigClockSource>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b6c:	f7ff fe14 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b78:	463b      	mov	r3, r7
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_TIM2_Init+0x94>)
 8001b7e:	f003 fe91 	bl	80058a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b88:	f7ff fe06 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200002d8 	.word	0x200002d8

08001b98 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	615a      	str	r2, [r3, #20]
 8001bae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <MX_TIM13_Init+0x94>)
 8001bb2:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <MX_TIM13_Init+0x98>)
 8001bb4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <MX_TIM13_Init+0x94>)
 8001bb8:	f240 3247 	movw	r2, #839	; 0x347
 8001bbc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <MX_TIM13_Init+0x94>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <MX_TIM13_Init+0x94>)
 8001bc6:	2263      	movs	r2, #99	; 0x63
 8001bc8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <MX_TIM13_Init+0x94>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <MX_TIM13_Init+0x94>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001bd6:	4815      	ldr	r0, [pc, #84]	; (8001c2c <MX_TIM13_Init+0x94>)
 8001bd8:	f002 ff3e 	bl	8004a58 <HAL_TIM_Base_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001be2:	f7ff fdd9 	bl	8001798 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001be6:	4811      	ldr	r0, [pc, #68]	; (8001c2c <MX_TIM13_Init+0x94>)
 8001be8:	f003 f85e 	bl	8004ca8 <HAL_TIM_PWM_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001bf2:	f7ff fdd1 	bl	8001798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf6:	2360      	movs	r3, #96	; 0x60
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4807      	ldr	r0, [pc, #28]	; (8001c2c <MX_TIM13_Init+0x94>)
 8001c0e:	f003 f9ad 	bl	8004f6c <HAL_TIM_PWM_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001c18:	f7ff fdbe 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001c1c:	4803      	ldr	r0, [pc, #12]	; (8001c2c <MX_TIM13_Init+0x94>)
 8001c1e:	f000 f85b 	bl	8001cd8 <HAL_TIM_MspPostInit>

}
 8001c22:	bf00      	nop
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000248 	.word	0x20000248
 8001c30:	40001c00 	.word	0x40001c00

08001c34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_TIM_Base_MspInit+0x98>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d10e      	bne.n	8001c64 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a20      	ldr	r2, [pc, #128]	; (8001cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001c62:	e02e      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6c:	d116      	bne.n	8001c9c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a16      	ldr	r2, [pc, #88]	; (8001cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	201c      	movs	r0, #28
 8001c90:	f000 fdbb 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c94:	201c      	movs	r0, #28
 8001c96:	f000 fdd4 	bl	8002842 <HAL_NVIC_EnableIRQ>
}
 8001c9a:	e012      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_TIM_Base_MspInit+0xa0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10d      	bne.n	8001cc2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40010000 	.word	0x40010000
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40001c00 	.word	0x40001c00

08001cd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_TIM_MspPostInit+0x68>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d11e      	bne.n	8001d38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_TIM_MspPostInit+0x6c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <HAL_TIM_MspPostInit+0x6c>)
 8001d04:	f043 0320 	orr.w	r3, r3, #32
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_TIM_MspPostInit+0x6c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001d28:	2309      	movs	r3, #9
 8001d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	4619      	mov	r1, r3
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_TIM_MspPostInit+0x70>)
 8001d34:	f001 f91c 	bl	8002f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40001c00 	.word	0x40001c00
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40021400 	.word	0x40021400

08001d4c <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001d50:	2201      	movs	r2, #1
 8001d52:	4906      	ldr	r1, [pc, #24]	; (8001d6c <uart_init_esp+0x20>)
 8001d54:	4806      	ldr	r0, [pc, #24]	; (8001d70 <uart_init_esp+0x24>)
 8001d56:	f003 ff14 	bl	8005b82 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d60:	4804      	ldr	r0, [pc, #16]	; (8001d74 <uart_init_esp+0x28>)
 8001d62:	f001 faa1 	bl	80032a8 <HAL_GPIO_WritePin>
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000045 	.word	0x20000045
 8001d70:	20000364 	.word	0x20000364
 8001d74:	40021400 	.word	0x40021400

08001d78 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8001d84:	887a      	ldrh	r2, [r7, #2]
 8001d86:	230a      	movs	r3, #10
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4803      	ldr	r0, [pc, #12]	; (8001d98 <uart_EspSendBytes+0x20>)
 8001d8c:	f003 fe67 	bl	8005a5e <HAL_UART_Transmit>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000364 	.word	0x20000364

08001d9c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_UART_RxCpltCallback+0x74>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10a      	bne.n	8001dc4 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001dae:	230a      	movs	r3, #10
 8001db0:	2201      	movs	r2, #1
 8001db2:	4918      	ldr	r1, [pc, #96]	; (8001e14 <HAL_UART_RxCpltCallback+0x78>)
 8001db4:	4818      	ldr	r0, [pc, #96]	; (8001e18 <HAL_UART_RxCpltCallback+0x7c>)
 8001db6:	f003 fe52 	bl	8005a5e <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4915      	ldr	r1, [pc, #84]	; (8001e14 <HAL_UART_RxCpltCallback+0x78>)
 8001dbe:	4816      	ldr	r0, [pc, #88]	; (8001e18 <HAL_UART_RxCpltCallback+0x7c>)
 8001dc0:	f003 fedf 	bl	8005b82 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_UART_RxCpltCallback+0x80>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d11b      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_UART_RxCpltCallback+0x84>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b4f      	cmp	r3, #79	; 0x4f
 8001dd4:	d103      	bne.n	8001dde <HAL_UART_RxCpltCallback+0x42>
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_UART_RxCpltCallback+0x88>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e00e      	b.n	8001dfc <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_UART_RxCpltCallback+0x84>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b61      	cmp	r3, #97	; 0x61
 8001de4:	d103      	bne.n	8001dee <HAL_UART_RxCpltCallback+0x52>
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_UART_RxCpltCallback+0x8c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e006      	b.n	8001dfc <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_UART_RxCpltCallback+0x84>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b41      	cmp	r3, #65	; 0x41
 8001df4:	d102      	bne.n	8001dfc <HAL_UART_RxCpltCallback+0x60>
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_UART_RxCpltCallback+0x8c>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4908      	ldr	r1, [pc, #32]	; (8001e20 <HAL_UART_RxCpltCallback+0x84>)
 8001e00:	480a      	ldr	r0, [pc, #40]	; (8001e2c <HAL_UART_RxCpltCallback+0x90>)
 8001e02:	f003 febe 	bl	8005b82 <HAL_UART_Receive_IT>
	}
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40011000 	.word	0x40011000
 8001e14:	20000044 	.word	0x20000044
 8001e18:	20000320 	.word	0x20000320
 8001e1c:	40004400 	.word	0x40004400
 8001e20:	20000045 	.word	0x20000045
 8001e24:	20000046 	.word	0x20000046
 8001e28:	2000003c 	.word	0x2000003c
 8001e2c:	20000364 	.word	0x20000364

08001e30 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <uart_EspCheck+0x1c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <uart_EspCheck+0x10>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <uart_EspCheck+0x12>
	return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	20000046 	.word	0x20000046

08001e50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_USART1_UART_Init+0x50>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e88:	f003 fd9c 	bl	80059c4 <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e92:	f7ff fc81 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000320 	.word	0x20000320
 8001ea0:	40011000 	.word	0x40011000

08001ea4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <MX_USART2_UART_Init+0x50>)
 8001eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eca:	220c      	movs	r2, #12
 8001ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001edc:	f003 fd72 	bl	80059c4 <HAL_UART_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ee6:	f7ff fc57 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000364 	.word	0x20000364
 8001ef4:	40004400 	.word	0x40004400

08001ef8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	; 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a3a      	ldr	r2, [pc, #232]	; (8002000 <HAL_UART_MspInit+0x108>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d135      	bne.n	8001f86 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a38      	ldr	r2, [pc, #224]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001f24:	f043 0310 	orr.w	r3, r3, #16
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a31      	ldr	r2, [pc, #196]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f64:	2307      	movs	r3, #7
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4826      	ldr	r0, [pc, #152]	; (8002008 <HAL_UART_MspInit+0x110>)
 8001f70:	f000 fffe 	bl	8002f70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2100      	movs	r1, #0
 8001f78:	2025      	movs	r0, #37	; 0x25
 8001f7a:	f000 fc46 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f7e:	2025      	movs	r0, #37	; 0x25
 8001f80:	f000 fc5f 	bl	8002842 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f84:	e038      	b.n	8001ff8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a20      	ldr	r2, [pc, #128]	; (800200c <HAL_UART_MspInit+0x114>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d133      	bne.n	8001ff8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	4a13      	ldr	r2, [pc, #76]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_UART_MspInit+0x10c>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fc8:	230c      	movs	r3, #12
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fd8:	2307      	movs	r3, #7
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4809      	ldr	r0, [pc, #36]	; (8002008 <HAL_UART_MspInit+0x110>)
 8001fe4:	f000 ffc4 	bl	8002f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	2026      	movs	r0, #38	; 0x26
 8001fee:	f000 fc0c 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ff2:	2026      	movs	r0, #38	; 0x26
 8001ff4:	f000 fc25 	bl	8002842 <HAL_NVIC_EnableIRQ>
}
 8001ff8:	bf00      	nop
 8001ffa:	3730      	adds	r7, #48	; 0x30
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40011000 	.word	0x40011000
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000
 800200c:	40004400 	.word	0x40004400

08002010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002048 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002016:	490e      	ldr	r1, [pc, #56]	; (8002050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002018:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800202c:	4c0b      	ldr	r4, [pc, #44]	; (800205c <LoopFillZerobss+0x26>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800203a:	f7ff fcff 	bl	8001a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203e:	f004 fd59 	bl	8006af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002042:	f7ff fad7 	bl	80015f4 <main>
  bx  lr    
 8002046:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002054:	08009b2c 	.word	0x08009b2c
  ldr r2, =_sbss
 8002058:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800205c:	200003ac 	.word	0x200003ac

08002060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC_IRQHandler>
	...

08002064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_Init+0x40>)
 800206e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_Init+0x40>)
 800207a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800207e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_Init+0x40>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 fbb1 	bl	80027f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002092:	200f      	movs	r0, #15
 8002094:	f000 f808 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002098:	f7ff fc56 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00

080020a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_InitTick+0x54>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x58>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fbc9 	bl	800285e <HAL_SYSTICK_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00e      	b.n	80020f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d80a      	bhi.n	80020f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f000 fb91 	bl	800280a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_InitTick+0x5c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000008 	.word	0x20000008
 8002100:	20000010 	.word	0x20000010
 8002104:	2000000c 	.word	0x2000000c

08002108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_IncTick+0x20>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x24>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_IncTick+0x24>)
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000010 	.word	0x20000010
 800212c:	200003a8 	.word	0x200003a8

08002130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_GetTick+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	200003a8 	.word	0x200003a8

08002148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff ffee 	bl	8002130 <HAL_GetTick>
 8002154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d005      	beq.n	800216e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_Delay+0x44>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800216e:	bf00      	nop
 8002170:	f7ff ffde 	bl	8002130 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d8f7      	bhi.n	8002170 <HAL_Delay+0x28>
  {
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000010 	.word	0x20000010

08002190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e033      	b.n	800220e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe fa10 	bl	80005d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021d6:	f023 0302 	bic.w	r3, r3, #2
 80021da:	f043 0202 	orr.w	r2, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f93a 	bl	800245c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
 80021fe:	e001      	b.n	8002204 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1c>
 8002230:	2302      	movs	r3, #2
 8002232:	e105      	b.n	8002440 <HAL_ADC_ConfigChannel+0x228>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b09      	cmp	r3, #9
 8002242:	d925      	bls.n	8002290 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68d9      	ldr	r1, [r3, #12]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	3b1e      	subs	r3, #30
 800225a:	2207      	movs	r2, #7
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68d9      	ldr	r1, [r3, #12]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	4618      	mov	r0, r3
 800227c:	4603      	mov	r3, r0
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4403      	add	r3, r0
 8002282:	3b1e      	subs	r3, #30
 8002284:	409a      	lsls	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	e022      	b.n	80022d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6919      	ldr	r1, [r3, #16]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	2207      	movs	r2, #7
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	400a      	ands	r2, r1
 80022b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4403      	add	r3, r0
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d824      	bhi.n	8002328 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b05      	subs	r3, #5
 80022f0:	221f      	movs	r2, #31
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b05      	subs	r3, #5
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	635a      	str	r2, [r3, #52]	; 0x34
 8002326:	e04c      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d824      	bhi.n	800237a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b23      	subs	r3, #35	; 0x23
 8002342:	221f      	movs	r2, #31
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43da      	mvns	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	400a      	ands	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b23      	subs	r3, #35	; 0x23
 800236c:	fa00 f203 	lsl.w	r2, r0, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
 8002378:	e023      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b41      	subs	r3, #65	; 0x41
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b41      	subs	r3, #65	; 0x41
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_ADC_ConfigChannel+0x234>)
 80023c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	; (8002450 <HAL_ADC_ConfigChannel+0x238>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d109      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1cc>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <HAL_ADC_ConfigChannel+0x238>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d123      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x21e>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d003      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x1e6>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b11      	cmp	r3, #17
 80023fc:	d11b      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b10      	cmp	r3, #16
 8002410:	d111      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_ADC_ConfigChannel+0x23c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a10      	ldr	r2, [pc, #64]	; (8002458 <HAL_ADC_ConfigChannel+0x240>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	0c9a      	lsrs	r2, r3, #18
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002428:	e002      	b.n	8002430 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3b01      	subs	r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f9      	bne.n	800242a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40012300 	.word	0x40012300
 8002450:	40012000 	.word	0x40012000
 8002454:	20000008 	.word	0x20000008
 8002458:	431bde83 	.word	0x431bde83

0800245c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002464:	4b79      	ldr	r3, [pc, #484]	; (800264c <ADC_Init+0x1f0>)
 8002466:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	431a      	orrs	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002490:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	021a      	lsls	r2, r3, #8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	4a58      	ldr	r2, [pc, #352]	; (8002650 <ADC_Init+0x1f4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d022      	beq.n	800253a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002502:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6899      	ldr	r1, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002524:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	e00f      	b.n	800255a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002558:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0202 	bic.w	r2, r2, #2
 8002568:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6899      	ldr	r1, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e1b      	ldrb	r3, [r3, #24]
 8002574:	005a      	lsls	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002596:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	3b01      	subs	r3, #1
 80025b4:	035a      	lsls	r2, r3, #13
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	e007      	b.n	80025d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	051a      	lsls	r2, r3, #20
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002612:	025a      	lsls	r2, r3, #9
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	029a      	lsls	r2, r3, #10
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	609a      	str	r2, [r3, #8]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40012300 	.word	0x40012300
 8002650:	0f000001 	.word	0x0f000001

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db0b      	blt.n	80026e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4907      	ldr	r1, [pc, #28]	; (80026f0 <__NVIC_EnableIRQ+0x38>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2001      	movs	r0, #1
 80026da:	fa00 f202 	lsl.w	r2, r0, r2
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	490c      	ldr	r1, [pc, #48]	; (8002740 <__NVIC_SetPriority+0x4c>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <__NVIC_SetPriority+0x50>)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3b04      	subs	r3, #4
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b04      	cmp	r3, #4
 8002764:	bf28      	it	cs
 8002766:	2304      	movcs	r3, #4
 8002768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3304      	adds	r3, #4
 800276e:	2b06      	cmp	r3, #6
 8002770:	d902      	bls.n	8002778 <NVIC_EncodePriority+0x30>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b03      	subs	r3, #3
 8002776:	e000      	b.n	800277a <NVIC_EncodePriority+0x32>
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	f04f 32ff 	mov.w	r2, #4294967295
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002790:	f04f 31ff 	mov.w	r1, #4294967295
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43d9      	mvns	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	4313      	orrs	r3, r2
         );
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c0:	d301      	bcc.n	80027c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00f      	b.n	80027e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <SysTick_Config+0x40>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ce:	210f      	movs	r1, #15
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f7ff ff8e 	bl	80026f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <SysTick_Config+0x40>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <SysTick_Config+0x40>)
 80027e0:	2207      	movs	r2, #7
 80027e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000e010 	.word	0xe000e010

080027f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff29 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800281c:	f7ff ff3e 	bl	800269c <__NVIC_GetPriorityGrouping>
 8002820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f7ff ff8e 	bl	8002748 <NVIC_EncodePriority>
 800282c:	4602      	mov	r2, r0
 800282e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff5d 	bl	80026f4 <__NVIC_SetPriority>
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff31 	bl	80026b8 <__NVIC_EnableIRQ>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ffa2 	bl	80027b0 <SysTick_Config>
 800286c:	4603      	mov	r3, r0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002884:	f7ff fc54 	bl	8002130 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e099      	b.n	80029c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b4:	e00f      	b.n	80028d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028b6:	f7ff fc3b 	bl	8002130 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d908      	bls.n	80028d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2203      	movs	r2, #3
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e078      	b.n	80029c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e8      	bne.n	80028b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <HAL_DMA_Init+0x158>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002902:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	2b04      	cmp	r3, #4
 800292e:	d107      	bne.n	8002940 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	4313      	orrs	r3, r2
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f023 0307 	bic.w	r3, r3, #7
 8002956:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b04      	cmp	r3, #4
 8002968:	d117      	bne.n	800299a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fa7b 	bl	8002e78 <DMA_CheckFifoParam>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002996:	2301      	movs	r3, #1
 8002998:	e016      	b.n	80029c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa32 	bl	8002e0c <DMA_CalcBaseAndBitshift>
 80029a8:	4603      	mov	r3, r0
 80029aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	223f      	movs	r2, #63	; 0x3f
 80029b2:	409a      	lsls	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	f010803f 	.word	0xf010803f

080029d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029e2:	f7ff fba5 	bl	8002130 <HAL_GetTick>
 80029e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d008      	beq.n	8002a06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e052      	b.n	8002aac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0216 	bic.w	r2, r2, #22
 8002a14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_DMA_Abort+0x62>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0208 	bic.w	r2, r2, #8
 8002a44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a56:	e013      	b.n	8002a80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a58:	f7ff fb6a 	bl	8002130 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d90c      	bls.n	8002a80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e015      	b.n	8002aac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1e4      	bne.n	8002a58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	223f      	movs	r2, #63	; 0x3f
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00c      	b.n	8002aec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b04:	4b92      	ldr	r3, [pc, #584]	; (8002d50 <HAL_DMA_IRQHandler+0x258>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a92      	ldr	r2, [pc, #584]	; (8002d54 <HAL_DMA_IRQHandler+0x25c>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0a9b      	lsrs	r3, r3, #10
 8002b10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	2208      	movs	r2, #8
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01a      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0204 	bic.w	r2, r2, #4
 8002b4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2208      	movs	r2, #8
 8002b52:	409a      	lsls	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2201      	movs	r2, #1
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d012      	beq.n	8002b9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2201      	movs	r2, #1
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	f043 0202 	orr.w	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0204 	orr.w	r2, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d043      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d03c      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d018      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d108      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d024      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
 8002c26:	e01f      	b.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01b      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4798      	blx	r3
 8002c38:	e016      	b.n	8002c68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0208 	bic.w	r2, r2, #8
 8002c56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 808e 	beq.w	8002d96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8086 	beq.w	8002d96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	2220      	movs	r2, #32
 8002c90:	409a      	lsls	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b05      	cmp	r3, #5
 8002ca0:	d136      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0216 	bic.w	r2, r2, #22
 8002cb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <HAL_DMA_IRQHandler+0x1da>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0208 	bic.w	r2, r2, #8
 8002ce0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	223f      	movs	r2, #63	; 0x3f
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d07d      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
        }
        return;
 8002d0e:	e078      	b.n	8002e02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01c      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d108      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d030      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
 8002d3c:	e02b      	b.n	8002d96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d027      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
 8002d4e:	e022      	b.n	8002d96 <HAL_DMA_IRQHandler+0x29e>
 8002d50:	20000008 	.word	0x20000008
 8002d54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10f      	bne.n	8002d86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0210 	bic.w	r2, r2, #16
 8002d74:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d032      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d022      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2205      	movs	r2, #5
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d307      	bcc.n	8002dde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f2      	bne.n	8002dc2 <HAL_DMA_IRQHandler+0x2ca>
 8002ddc:	e000      	b.n	8002de0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002dde:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
 8002e00:	e000      	b.n	8002e04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e02:	bf00      	nop
    }
  }
}
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop

08002e0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	3b10      	subs	r3, #16
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <DMA_CalcBaseAndBitshift+0x64>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e26:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <DMA_CalcBaseAndBitshift+0x68>)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d909      	bls.n	8002e4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	1d1a      	adds	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e4c:	e007      	b.n	8002e5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	aaaaaaab 	.word	0xaaaaaaab
 8002e74:	08009b14 	.word	0x08009b14

08002e78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11f      	bne.n	8002ed2 <DMA_CheckFifoParam+0x5a>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d856      	bhi.n	8002f46 <DMA_CheckFifoParam+0xce>
 8002e98:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <DMA_CheckFifoParam+0x28>)
 8002e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9e:	bf00      	nop
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002ec3 	.word	0x08002ec3
 8002ea8:	08002eb1 	.word	0x08002eb1
 8002eac:	08002f47 	.word	0x08002f47
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d046      	beq.n	8002f4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec0:	e043      	b.n	8002f4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eca:	d140      	bne.n	8002f4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed0:	e03d      	b.n	8002f4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eda:	d121      	bne.n	8002f20 <DMA_CheckFifoParam+0xa8>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d837      	bhi.n	8002f52 <DMA_CheckFifoParam+0xda>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <DMA_CheckFifoParam+0x70>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002eff 	.word	0x08002eff
 8002ef0:	08002ef9 	.word	0x08002ef9
 8002ef4:	08002f11 	.word	0x08002f11
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      break;
 8002efc:	e030      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d025      	beq.n	8002f56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0e:	e022      	b.n	8002f56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f18:	d11f      	bne.n	8002f5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f1e:	e01c      	b.n	8002f5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d903      	bls.n	8002f2e <DMA_CheckFifoParam+0xb6>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d003      	beq.n	8002f34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f2c:	e018      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
      break;
 8002f32:	e015      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	e00b      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
      break;
 8002f46:	bf00      	nop
 8002f48:	e00a      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e008      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e006      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f52:	bf00      	nop
 8002f54:	e004      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e16b      	b.n	8003264 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	f040 815a 	bne.w	800325e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d005      	beq.n	8002fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d130      	bne.n	8003024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	2203      	movs	r2, #3
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 0201 	and.w	r2, r3, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b03      	cmp	r3, #3
 800302e:	d017      	beq.n	8003060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d123      	bne.n	80030b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	08da      	lsrs	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3208      	adds	r2, #8
 80030ae:	69b9      	ldr	r1, [r7, #24]
 80030b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80b4 	beq.w	800325e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b60      	ldr	r3, [pc, #384]	; (800327c <HAL_GPIO_Init+0x30c>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	4a5f      	ldr	r2, [pc, #380]	; (800327c <HAL_GPIO_Init+0x30c>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	4b5d      	ldr	r3, [pc, #372]	; (800327c <HAL_GPIO_Init+0x30c>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003112:	4a5b      	ldr	r2, [pc, #364]	; (8003280 <HAL_GPIO_Init+0x310>)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	220f      	movs	r2, #15
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a52      	ldr	r2, [pc, #328]	; (8003284 <HAL_GPIO_Init+0x314>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02b      	beq.n	8003196 <HAL_GPIO_Init+0x226>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a51      	ldr	r2, [pc, #324]	; (8003288 <HAL_GPIO_Init+0x318>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d025      	beq.n	8003192 <HAL_GPIO_Init+0x222>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a50      	ldr	r2, [pc, #320]	; (800328c <HAL_GPIO_Init+0x31c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01f      	beq.n	800318e <HAL_GPIO_Init+0x21e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a4f      	ldr	r2, [pc, #316]	; (8003290 <HAL_GPIO_Init+0x320>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d019      	beq.n	800318a <HAL_GPIO_Init+0x21a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a4e      	ldr	r2, [pc, #312]	; (8003294 <HAL_GPIO_Init+0x324>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x216>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a4d      	ldr	r2, [pc, #308]	; (8003298 <HAL_GPIO_Init+0x328>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x212>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a4c      	ldr	r2, [pc, #304]	; (800329c <HAL_GPIO_Init+0x32c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x20e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a4b      	ldr	r2, [pc, #300]	; (80032a0 <HAL_GPIO_Init+0x330>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x20a>
 8003176:	2307      	movs	r3, #7
 8003178:	e00e      	b.n	8003198 <HAL_GPIO_Init+0x228>
 800317a:	2308      	movs	r3, #8
 800317c:	e00c      	b.n	8003198 <HAL_GPIO_Init+0x228>
 800317e:	2306      	movs	r3, #6
 8003180:	e00a      	b.n	8003198 <HAL_GPIO_Init+0x228>
 8003182:	2305      	movs	r3, #5
 8003184:	e008      	b.n	8003198 <HAL_GPIO_Init+0x228>
 8003186:	2304      	movs	r3, #4
 8003188:	e006      	b.n	8003198 <HAL_GPIO_Init+0x228>
 800318a:	2303      	movs	r3, #3
 800318c:	e004      	b.n	8003198 <HAL_GPIO_Init+0x228>
 800318e:	2302      	movs	r3, #2
 8003190:	e002      	b.n	8003198 <HAL_GPIO_Init+0x228>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x228>
 8003196:	2300      	movs	r3, #0
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	f002 0203 	and.w	r2, r2, #3
 800319e:	0092      	lsls	r2, r2, #2
 80031a0:	4093      	lsls	r3, r2
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a8:	4935      	ldr	r1, [pc, #212]	; (8003280 <HAL_GPIO_Init+0x310>)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	3302      	adds	r3, #2
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b6:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <HAL_GPIO_Init+0x334>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031da:	4a32      	ldr	r2, [pc, #200]	; (80032a4 <HAL_GPIO_Init+0x334>)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031e0:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <HAL_GPIO_Init+0x334>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003204:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <HAL_GPIO_Init+0x334>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_GPIO_Init+0x334>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800322e:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <HAL_GPIO_Init+0x334>)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_GPIO_Init+0x334>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003258:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <HAL_GPIO_Init+0x334>)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3301      	adds	r3, #1
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	f67f ae90 	bls.w	8002f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	40013800 	.word	0x40013800
 8003284:	40020000 	.word	0x40020000
 8003288:	40020400 	.word	0x40020400
 800328c:	40020800 	.word	0x40020800
 8003290:	40020c00 	.word	0x40020c00
 8003294:	40021000 	.word	0x40021000
 8003298:	40021400 	.word	0x40021400
 800329c:	40021800 	.word	0x40021800
 80032a0:	40021c00 	.word	0x40021c00
 80032a4:	40013c00 	.word	0x40013c00

080032a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
 80032b4:	4613      	mov	r3, r2
 80032b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b8:	787b      	ldrb	r3, [r7, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032c4:	e003      	b.n	80032ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	041a      	lsls	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	619a      	str	r2, [r3, #24]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032ec:	887a      	ldrh	r2, [r7, #2]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4013      	ands	r3, r2
 80032f2:	041a      	lsls	r2, r3, #16
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	400b      	ands	r3, r1
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	619a      	str	r2, [r3, #24]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e12b      	b.n	800357a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fcb0 	bl	8000c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003362:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003372:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003374:	f000 fd5c 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8003378:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4a81      	ldr	r2, [pc, #516]	; (8003584 <HAL_I2C_Init+0x274>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d807      	bhi.n	8003394 <HAL_I2C_Init+0x84>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a80      	ldr	r2, [pc, #512]	; (8003588 <HAL_I2C_Init+0x278>)
 8003388:	4293      	cmp	r3, r2
 800338a:	bf94      	ite	ls
 800338c:	2301      	movls	r3, #1
 800338e:	2300      	movhi	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e006      	b.n	80033a2 <HAL_I2C_Init+0x92>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a7d      	ldr	r2, [pc, #500]	; (800358c <HAL_I2C_Init+0x27c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	bf94      	ite	ls
 800339c:	2301      	movls	r3, #1
 800339e:	2300      	movhi	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0e7      	b.n	800357a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a78      	ldr	r2, [pc, #480]	; (8003590 <HAL_I2C_Init+0x280>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0c9b      	lsrs	r3, r3, #18
 80033b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a6a      	ldr	r2, [pc, #424]	; (8003584 <HAL_I2C_Init+0x274>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d802      	bhi.n	80033e4 <HAL_I2C_Init+0xd4>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	3301      	adds	r3, #1
 80033e2:	e009      	b.n	80033f8 <HAL_I2C_Init+0xe8>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	4a69      	ldr	r2, [pc, #420]	; (8003594 <HAL_I2C_Init+0x284>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	3301      	adds	r3, #1
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800340a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	495c      	ldr	r1, [pc, #368]	; (8003584 <HAL_I2C_Init+0x274>)
 8003414:	428b      	cmp	r3, r1
 8003416:	d819      	bhi.n	800344c <HAL_I2C_Init+0x13c>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e59      	subs	r1, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fbb1 f3f3 	udiv	r3, r1, r3
 8003426:	1c59      	adds	r1, r3, #1
 8003428:	f640 73fc 	movw	r3, #4092	; 0xffc
 800342c:	400b      	ands	r3, r1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_I2C_Init+0x138>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1e59      	subs	r1, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003440:	3301      	adds	r3, #1
 8003442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003446:	e051      	b.n	80034ec <HAL_I2C_Init+0x1dc>
 8003448:	2304      	movs	r3, #4
 800344a:	e04f      	b.n	80034ec <HAL_I2C_Init+0x1dc>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d111      	bne.n	8003478 <HAL_I2C_Init+0x168>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e58      	subs	r0, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e012      	b.n	800349e <HAL_I2C_Init+0x18e>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e58      	subs	r0, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	0099      	lsls	r1, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	fbb0 f3f3 	udiv	r3, r0, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_Init+0x196>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e022      	b.n	80034ec <HAL_I2C_Init+0x1dc>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10e      	bne.n	80034cc <HAL_I2C_Init+0x1bc>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1e58      	subs	r0, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	460b      	mov	r3, r1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	440b      	add	r3, r1
 80034bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c0:	3301      	adds	r3, #1
 80034c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ca:	e00f      	b.n	80034ec <HAL_I2C_Init+0x1dc>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	0099      	lsls	r1, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	6809      	ldr	r1, [r1, #0]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800351a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6911      	ldr	r1, [r2, #16]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68d2      	ldr	r2, [r2, #12]
 8003526:	4311      	orrs	r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	430b      	orrs	r3, r1
 800352e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	000186a0 	.word	0x000186a0
 8003588:	001e847f 	.word	0x001e847f
 800358c:	003d08ff 	.word	0x003d08ff
 8003590:	431bde83 	.word	0x431bde83
 8003594:	10624dd3 	.word	0x10624dd3

08003598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e264      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d075      	beq.n	80036a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b6:	4ba3      	ldr	r3, [pc, #652]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d00c      	beq.n	80035dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c2:	4ba0      	ldr	r3, [pc, #640]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d112      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ce:	4b9d      	ldr	r3, [pc, #628]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035da:	d10b      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	4b99      	ldr	r3, [pc, #612]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d05b      	beq.n	80036a0 <HAL_RCC_OscConfig+0x108>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d157      	bne.n	80036a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e23f      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fc:	d106      	bne.n	800360c <HAL_RCC_OscConfig+0x74>
 80035fe:	4b91      	ldr	r3, [pc, #580]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a90      	ldr	r2, [pc, #576]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e01d      	b.n	8003648 <HAL_RCC_OscConfig+0xb0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x98>
 8003616:	4b8b      	ldr	r3, [pc, #556]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a8a      	ldr	r2, [pc, #552]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	4b88      	ldr	r3, [pc, #544]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a87      	ldr	r2, [pc, #540]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e00b      	b.n	8003648 <HAL_RCC_OscConfig+0xb0>
 8003630:	4b84      	ldr	r3, [pc, #528]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a83      	ldr	r2, [pc, #524]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b81      	ldr	r3, [pc, #516]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a80      	ldr	r2, [pc, #512]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d013      	beq.n	8003678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe fd6e 	bl	8002130 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003658:	f7fe fd6a 	bl	8002130 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e204      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0xc0>
 8003676:	e014      	b.n	80036a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fe fd5a 	bl	8002130 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003680:	f7fe fd56 	bl	8002130 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	; 0x64
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e1f0      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003692:	4b6c      	ldr	r3, [pc, #432]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0xe8>
 800369e:	e000      	b.n	80036a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d063      	beq.n	8003776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ae:	4b65      	ldr	r3, [pc, #404]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ba:	4b62      	ldr	r3, [pc, #392]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d11c      	bne.n	8003700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c6:	4b5f      	ldr	r3, [pc, #380]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d116      	bne.n	8003700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d2:	4b5c      	ldr	r3, [pc, #368]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_RCC_OscConfig+0x152>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e1c4      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ea:	4b56      	ldr	r3, [pc, #344]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4952      	ldr	r1, [pc, #328]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	e03a      	b.n	8003776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003708:	4b4f      	ldr	r3, [pc, #316]	; (8003848 <HAL_RCC_OscConfig+0x2b0>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fe fd0f 	bl	8002130 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003716:	f7fe fd0b 	bl	8002130 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e1a5      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	4b46      	ldr	r3, [pc, #280]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003734:	4b43      	ldr	r3, [pc, #268]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4940      	ldr	r1, [pc, #256]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
 8003748:	e015      	b.n	8003776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374a:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <HAL_RCC_OscConfig+0x2b0>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe fcee 	bl	8002130 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003758:	f7fe fcea 	bl	8002130 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e184      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	4b36      	ldr	r3, [pc, #216]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d030      	beq.n	80037e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378a:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_RCC_OscConfig+0x2b4>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fe fcce 	bl	8002130 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003798:	f7fe fcca 	bl	8002130 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e164      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	4b26      	ldr	r3, [pc, #152]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x200>
 80037b6:	e015      	b.n	80037e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b8:	4b24      	ldr	r3, [pc, #144]	; (800384c <HAL_RCC_OscConfig+0x2b4>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037be:	f7fe fcb7 	bl	8002130 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fe fcb3 	bl	8002130 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e14d      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80037da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f0      	bne.n	80037c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80a0 	beq.w	8003932 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10f      	bne.n	8003822 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 800380c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381e:	2301      	movs	r3, #1
 8003820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_OscConfig+0x2b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d121      	bne.n	8003872 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382e:	4b08      	ldr	r3, [pc, #32]	; (8003850 <HAL_RCC_OscConfig+0x2b8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a07      	ldr	r2, [pc, #28]	; (8003850 <HAL_RCC_OscConfig+0x2b8>)
 8003834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800383a:	f7fe fc79 	bl	8002130 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003840:	e011      	b.n	8003866 <HAL_RCC_OscConfig+0x2ce>
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	42470000 	.word	0x42470000
 800384c:	42470e80 	.word	0x42470e80
 8003850:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7fe fc6c 	bl	8002130 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e106      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003866:	4b85      	ldr	r3, [pc, #532]	; (8003a7c <HAL_RCC_OscConfig+0x4e4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d106      	bne.n	8003888 <HAL_RCC_OscConfig+0x2f0>
 800387a:	4b81      	ldr	r3, [pc, #516]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a80      	ldr	r2, [pc, #512]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
 8003886:	e01c      	b.n	80038c2 <HAL_RCC_OscConfig+0x32a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b05      	cmp	r3, #5
 800388e:	d10c      	bne.n	80038aa <HAL_RCC_OscConfig+0x312>
 8003890:	4b7b      	ldr	r3, [pc, #492]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	4a7a      	ldr	r2, [pc, #488]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 8003896:	f043 0304 	orr.w	r3, r3, #4
 800389a:	6713      	str	r3, [r2, #112]	; 0x70
 800389c:	4b78      	ldr	r3, [pc, #480]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	4a77      	ldr	r2, [pc, #476]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6713      	str	r3, [r2, #112]	; 0x70
 80038a8:	e00b      	b.n	80038c2 <HAL_RCC_OscConfig+0x32a>
 80038aa:	4b75      	ldr	r3, [pc, #468]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a74      	ldr	r2, [pc, #464]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
 80038b6:	4b72      	ldr	r3, [pc, #456]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a71      	ldr	r2, [pc, #452]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d015      	beq.n	80038f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ca:	f7fe fc31 	bl	8002130 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fe fc2d 	bl	8002130 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e0c5      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e8:	4b65      	ldr	r3, [pc, #404]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ee      	beq.n	80038d2 <HAL_RCC_OscConfig+0x33a>
 80038f4:	e014      	b.n	8003920 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f6:	f7fe fc1b 	bl	8002130 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fe fc17 	bl	8002130 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e0af      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003914:	4b5a      	ldr	r3, [pc, #360]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1ee      	bne.n	80038fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d105      	bne.n	8003932 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003926:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	4a55      	ldr	r2, [pc, #340]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 800392c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003930:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 809b 	beq.w	8003a72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393c:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b08      	cmp	r3, #8
 8003946:	d05c      	beq.n	8003a02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d141      	bne.n	80039d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003950:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <HAL_RCC_OscConfig+0x4ec>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7fe fbeb 	bl	8002130 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395e:	f7fe fbe7 	bl	8002130 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e081      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003970:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f0      	bne.n	800395e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	019b      	lsls	r3, r3, #6
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	3b01      	subs	r3, #1
 8003996:	041b      	lsls	r3, r3, #16
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	061b      	lsls	r3, r3, #24
 80039a0:	4937      	ldr	r1, [pc, #220]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a6:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <HAL_RCC_OscConfig+0x4ec>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fbc0 	bl	8002130 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fe fbbc 	bl	8002130 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e056      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c6:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x41c>
 80039d2:	e04e      	b.n	8003a72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d4:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCC_OscConfig+0x4ec>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fe fba9 	bl	8002130 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fe fba5 	bl	8002130 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e03f      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f4:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f0      	bne.n	80039e2 <HAL_RCC_OscConfig+0x44a>
 8003a00:	e037      	b.n	8003a72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e032      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <HAL_RCC_OscConfig+0x4e8>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d028      	beq.n	8003a6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d121      	bne.n	8003a6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d11a      	bne.n	8003a6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a3e:	4013      	ands	r3, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d111      	bne.n	8003a6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	3b01      	subs	r3, #1
 8003a58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	40023800 	.word	0x40023800
 8003a84:	42470060 	.word	0x42470060

08003a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0cc      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b68      	ldr	r3, [pc, #416]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d90c      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b65      	ldr	r3, [pc, #404]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b63      	ldr	r3, [pc, #396]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0b8      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003adc:	4b59      	ldr	r3, [pc, #356]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a58      	ldr	r2, [pc, #352]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af4:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4a52      	ldr	r2, [pc, #328]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b00:	4b50      	ldr	r3, [pc, #320]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	494d      	ldr	r1, [pc, #308]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d044      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b47      	ldr	r3, [pc, #284]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d119      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e07f      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d003      	beq.n	8003b46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	4b3f      	ldr	r3, [pc, #252]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e06f      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b56:	4b3b      	ldr	r3, [pc, #236]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e067      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f023 0203 	bic.w	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4934      	ldr	r1, [pc, #208]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b78:	f7fe fada 	bl	8002130 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b80:	f7fe fad6 	bl	8002130 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e04f      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	4b2b      	ldr	r3, [pc, #172]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 020c 	and.w	r2, r3, #12
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d1eb      	bne.n	8003b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d20c      	bcs.n	8003bd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e032      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bdc:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4916      	ldr	r1, [pc, #88]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	490e      	ldr	r1, [pc, #56]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c0e:	f000 f821 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8003c12:	4602      	mov	r2, r0
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	490a      	ldr	r1, [pc, #40]	; (8003c48 <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	5ccb      	ldrb	r3, [r1, r3]
 8003c22:	fa22 f303 	lsr.w	r3, r2, r3
 8003c26:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fa3a 	bl	80020a8 <HAL_InitTick>

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023c00 	.word	0x40023c00
 8003c44:	40023800 	.word	0x40023800
 8003c48:	08009afc 	.word	0x08009afc
 8003c4c:	20000008 	.word	0x20000008
 8003c50:	2000000c 	.word	0x2000000c

08003c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	2300      	movs	r3, #0
 8003c66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c6c:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d00d      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0x40>
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	f200 80bd 	bhi.w	8003df8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x34>
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c86:	e0b7      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b61      	ldr	r3, [pc, #388]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c8a:	60bb      	str	r3, [r7, #8]
       break;
 8003c8c:	e0b7      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c8e:	4b61      	ldr	r3, [pc, #388]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c90:	60bb      	str	r3, [r7, #8]
      break;
 8003c92:	e0b4      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c94:	4b5d      	ldr	r3, [pc, #372]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c9e:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d04d      	beq.n	8003d46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003caa:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	099b      	lsrs	r3, r3, #6
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cba:	f04f 0100 	mov.w	r1, #0
 8003cbe:	ea02 0800 	and.w	r8, r2, r0
 8003cc2:	ea03 0901 	and.w	r9, r3, r1
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	4649      	mov	r1, r9
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	014b      	lsls	r3, r1, #5
 8003cd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cd8:	0142      	lsls	r2, r0, #5
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	ebb0 0008 	subs.w	r0, r0, r8
 8003ce2:	eb61 0109 	sbc.w	r1, r1, r9
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	018b      	lsls	r3, r1, #6
 8003cf0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cf4:	0182      	lsls	r2, r0, #6
 8003cf6:	1a12      	subs	r2, r2, r0
 8003cf8:	eb63 0301 	sbc.w	r3, r3, r1
 8003cfc:	f04f 0000 	mov.w	r0, #0
 8003d00:	f04f 0100 	mov.w	r1, #0
 8003d04:	00d9      	lsls	r1, r3, #3
 8003d06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d0a:	00d0      	lsls	r0, r2, #3
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	eb12 0208 	adds.w	r2, r2, r8
 8003d14:	eb43 0309 	adc.w	r3, r3, r9
 8003d18:	f04f 0000 	mov.w	r0, #0
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	0259      	lsls	r1, r3, #9
 8003d22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d26:	0250      	lsls	r0, r2, #9
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	f7fc fa46 	bl	80001c8 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4613      	mov	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e04a      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d46:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	099b      	lsrs	r3, r3, #6
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d56:	f04f 0100 	mov.w	r1, #0
 8003d5a:	ea02 0400 	and.w	r4, r2, r0
 8003d5e:	ea03 0501 	and.w	r5, r3, r1
 8003d62:	4620      	mov	r0, r4
 8003d64:	4629      	mov	r1, r5
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	014b      	lsls	r3, r1, #5
 8003d70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d74:	0142      	lsls	r2, r0, #5
 8003d76:	4610      	mov	r0, r2
 8003d78:	4619      	mov	r1, r3
 8003d7a:	1b00      	subs	r0, r0, r4
 8003d7c:	eb61 0105 	sbc.w	r1, r1, r5
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	018b      	lsls	r3, r1, #6
 8003d8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d8e:	0182      	lsls	r2, r0, #6
 8003d90:	1a12      	subs	r2, r2, r0
 8003d92:	eb63 0301 	sbc.w	r3, r3, r1
 8003d96:	f04f 0000 	mov.w	r0, #0
 8003d9a:	f04f 0100 	mov.w	r1, #0
 8003d9e:	00d9      	lsls	r1, r3, #3
 8003da0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003da4:	00d0      	lsls	r0, r2, #3
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	1912      	adds	r2, r2, r4
 8003dac:	eb45 0303 	adc.w	r3, r5, r3
 8003db0:	f04f 0000 	mov.w	r0, #0
 8003db4:	f04f 0100 	mov.w	r1, #0
 8003db8:	0299      	lsls	r1, r3, #10
 8003dba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003dbe:	0290      	lsls	r0, r2, #10
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	f7fc f9fa 	bl	80001c8 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	3301      	adds	r3, #1
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	60bb      	str	r3, [r7, #8]
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dfa:	60bb      	str	r3, [r7, #8]
      break;
 8003dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	007a1200 	.word	0x007a1200

08003e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000008 	.word	0x20000008

08003e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e34:	f7ff fff0 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0a9b      	lsrs	r3, r3, #10
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	08009b0c 	.word	0x08009b0c

08003e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e5c:	f7ff ffdc 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0b5b      	lsrs	r3, r3, #13
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	08009b0c 	.word	0x08009b0c

08003e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07b      	b.n	8003f8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea2:	d009      	beq.n	8003eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
 8003eaa:	e005      	b.n	8003eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd fcf0 	bl	80018b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	ea42 0103 	orr.w	r1, r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	f003 0104 	and.w	r1, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	f003 0210 	and.w	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b088      	sub	sp, #32
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_SPI_Transmit+0x22>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e126      	b.n	8004202 <HAL_SPI_Transmit+0x270>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fbc:	f7fe f8b8 	bl	8002130 <HAL_GetTick>
 8003fc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fd6:	e10b      	b.n	80041f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_Transmit+0x52>
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fe8:	e102      	b.n	80041f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2203      	movs	r2, #3
 8003fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	88fa      	ldrh	r2, [r7, #6]
 8004002:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004030:	d10f      	bne.n	8004052 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004050:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d007      	beq.n	8004070 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800406e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004078:	d14b      	bne.n	8004112 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_SPI_Transmit+0xf6>
 8004082:	8afb      	ldrh	r3, [r7, #22]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d13e      	bne.n	8004106 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	881a      	ldrh	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	1c9a      	adds	r2, r3, #2
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040ac:	e02b      	b.n	8004106 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d112      	bne.n	80040e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	881a      	ldrh	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	1c9a      	adds	r2, r3, #2
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	86da      	strh	r2, [r3, #54]	; 0x36
 80040e0:	e011      	b.n	8004106 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040e2:	f7fe f825 	bl	8002130 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d803      	bhi.n	80040fa <HAL_SPI_Transmit+0x168>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d102      	bne.n	8004100 <HAL_SPI_Transmit+0x16e>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004104:	e074      	b.n	80041f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ce      	bne.n	80040ae <HAL_SPI_Transmit+0x11c>
 8004110:	e04c      	b.n	80041ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_SPI_Transmit+0x18e>
 800411a:	8afb      	ldrh	r3, [r7, #22]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d140      	bne.n	80041a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	7812      	ldrb	r2, [r2, #0]
 800412c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004146:	e02c      	b.n	80041a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b02      	cmp	r3, #2
 8004154:	d113      	bne.n	800417e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	330c      	adds	r3, #12
 8004160:	7812      	ldrb	r2, [r2, #0]
 8004162:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	86da      	strh	r2, [r3, #54]	; 0x36
 800417c:	e011      	b.n	80041a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800417e:	f7fd ffd7 	bl	8002130 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d803      	bhi.n	8004196 <HAL_SPI_Transmit+0x204>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d102      	bne.n	800419c <HAL_SPI_Transmit+0x20a>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041a0:	e026      	b.n	80041f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1cd      	bne.n	8004148 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	6839      	ldr	r1, [r7, #0]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fbcb 	bl	800494c <SPI_EndRxTxTransaction>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e000      	b.n	80041f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80041ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004200:	7ffb      	ldrb	r3, [r7, #31]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b088      	sub	sp, #32
 800420e:	af02      	add	r7, sp, #8
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004226:	d112      	bne.n	800424e <HAL_SPI_Receive+0x44>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10e      	bne.n	800424e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2204      	movs	r2, #4
 8004234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004238:	88fa      	ldrh	r2, [r7, #6]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	4613      	mov	r3, r2
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f8f1 	bl	800442c <HAL_SPI_TransmitReceive>
 800424a:	4603      	mov	r3, r0
 800424c:	e0ea      	b.n	8004424 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_SPI_Receive+0x52>
 8004258:	2302      	movs	r3, #2
 800425a:	e0e3      	b.n	8004424 <HAL_SPI_Receive+0x21a>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004264:	f7fd ff64 	bl	8002130 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d002      	beq.n	800427c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004276:	2302      	movs	r3, #2
 8004278:	75fb      	strb	r3, [r7, #23]
    goto error;
 800427a:	e0ca      	b.n	8004412 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_SPI_Receive+0x7e>
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800428c:	e0c1      	b.n	8004412 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2204      	movs	r2, #4
 8004292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	88fa      	ldrh	r2, [r7, #6]
 80042a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d4:	d10f      	bne.n	80042f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d007      	beq.n	8004314 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004312:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d162      	bne.n	80043e2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800431c:	e02e      	b.n	800437c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b01      	cmp	r3, #1
 800432a:	d115      	bne.n	8004358 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f103 020c 	add.w	r2, r3, #12
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	7812      	ldrb	r2, [r2, #0]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004356:	e011      	b.n	800437c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004358:	f7fd feea 	bl	8002130 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d803      	bhi.n	8004370 <HAL_SPI_Receive+0x166>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d102      	bne.n	8004376 <HAL_SPI_Receive+0x16c>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	75fb      	strb	r3, [r7, #23]
          goto error;
 800437a:	e04a      	b.n	8004412 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1cb      	bne.n	800431e <HAL_SPI_Receive+0x114>
 8004386:	e031      	b.n	80043ec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d113      	bne.n	80043be <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	b292      	uxth	r2, r2
 80043a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	1c9a      	adds	r2, r3, #2
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043bc:	e011      	b.n	80043e2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043be:	f7fd feb7 	bl	8002130 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d803      	bhi.n	80043d6 <HAL_SPI_Receive+0x1cc>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d102      	bne.n	80043dc <HAL_SPI_Receive+0x1d2>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043e0:	e017      	b.n	8004412 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1cd      	bne.n	8004388 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fa45 	bl	8004880 <SPI_EndRxTransaction>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	75fb      	strb	r3, [r7, #23]
 800440e:	e000      	b.n	8004412 <HAL_SPI_Receive+0x208>
  }

error :
 8004410:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004422:	7dfb      	ldrb	r3, [r7, #23]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08c      	sub	sp, #48	; 0x30
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800443a:	2301      	movs	r3, #1
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_SPI_TransmitReceive+0x26>
 800444e:	2302      	movs	r3, #2
 8004450:	e18a      	b.n	8004768 <HAL_SPI_TransmitReceive+0x33c>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800445a:	f7fd fe69 	bl	8002130 <HAL_GetTick>
 800445e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004470:	887b      	ldrh	r3, [r7, #2]
 8004472:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004474:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004478:	2b01      	cmp	r3, #1
 800447a:	d00f      	beq.n	800449c <HAL_SPI_TransmitReceive+0x70>
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004482:	d107      	bne.n	8004494 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <HAL_SPI_TransmitReceive+0x68>
 800448c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004490:	2b04      	cmp	r3, #4
 8004492:	d003      	beq.n	800449c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004494:	2302      	movs	r3, #2
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800449a:	e15b      	b.n	8004754 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_SPI_TransmitReceive+0x82>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_SPI_TransmitReceive+0x82>
 80044a8:	887b      	ldrh	r3, [r7, #2]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d103      	bne.n	80044b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044b4:	e14e      	b.n	8004754 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d003      	beq.n	80044ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2205      	movs	r2, #5
 80044c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	887a      	ldrh	r2, [r7, #2]
 80044da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	887a      	ldrh	r2, [r7, #2]
 80044e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	887a      	ldrh	r2, [r7, #2]
 80044ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	887a      	ldrh	r2, [r7, #2]
 80044f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d007      	beq.n	800451e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004526:	d178      	bne.n	800461a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_SPI_TransmitReceive+0x10a>
 8004530:	8b7b      	ldrh	r3, [r7, #26]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d166      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	881a      	ldrh	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800455a:	e053      	b.n	8004604 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b02      	cmp	r3, #2
 8004568:	d11b      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x176>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d016      	beq.n	80045a2 <HAL_SPI_TransmitReceive+0x176>
 8004574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d113      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	881a      	ldrh	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	1c9a      	adds	r2, r3, #2
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d119      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x1b8>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d014      	beq.n	80045e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	b292      	uxth	r2, r2
 80045c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	1c9a      	adds	r2, r3, #2
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045e0:	2301      	movs	r3, #1
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045e4:	f7fd fda4 	bl	8002130 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d807      	bhi.n	8004604 <HAL_SPI_TransmitReceive+0x1d8>
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d003      	beq.n	8004604 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004602:	e0a7      	b.n	8004754 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1a6      	bne.n	800455c <HAL_SPI_TransmitReceive+0x130>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1a1      	bne.n	800455c <HAL_SPI_TransmitReceive+0x130>
 8004618:	e07c      	b.n	8004714 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_SPI_TransmitReceive+0x1fc>
 8004622:	8b7b      	ldrh	r3, [r7, #26]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d16b      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	7812      	ldrb	r2, [r2, #0]
 8004634:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800464e:	e057      	b.n	8004700 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d11c      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x26c>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d017      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x26c>
 8004668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d114      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	7812      	ldrb	r2, [r2, #0]
 800467a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d119      	bne.n	80046da <HAL_SPI_TransmitReceive+0x2ae>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d014      	beq.n	80046da <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046d6:	2301      	movs	r3, #1
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046da:	f7fd fd29 	bl	8002130 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d803      	bhi.n	80046f2 <HAL_SPI_TransmitReceive+0x2c6>
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d102      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x2cc>
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046fe:	e029      	b.n	8004754 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1a2      	bne.n	8004650 <HAL_SPI_TransmitReceive+0x224>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d19d      	bne.n	8004650 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004716:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f917 	bl	800494c <SPI_EndRxTxTransaction>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d006      	beq.n	8004732 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004730:	e010      	b.n	8004754 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	e000      	b.n	8004754 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004752:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004764:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004768:	4618      	mov	r0, r3
 800476a:	3730      	adds	r7, #48	; 0x30
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004780:	f7fd fcd6 	bl	8002130 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	4413      	add	r3, r2
 800478e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004790:	f7fd fcce 	bl	8002130 <HAL_GetTick>
 8004794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004796:	4b39      	ldr	r3, [pc, #228]	; (800487c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	015b      	lsls	r3, r3, #5
 800479c:	0d1b      	lsrs	r3, r3, #20
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a6:	e054      	b.n	8004852 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d050      	beq.n	8004852 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047b0:	f7fd fcbe 	bl	8002130 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d902      	bls.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d13d      	bne.n	8004842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047de:	d111      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e8:	d004      	beq.n	80047f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f2:	d107      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480c:	d10f      	bne.n	800482e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800482c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e017      	b.n	8004872 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	3b01      	subs	r3, #1
 8004850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	429a      	cmp	r2, r3
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	429a      	cmp	r2, r3
 800486e:	d19b      	bne.n	80047a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3720      	adds	r7, #32
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000008 	.word	0x20000008

08004880 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004894:	d111      	bne.n	80048ba <SPI_EndRxTransaction+0x3a>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489e:	d004      	beq.n	80048aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a8:	d107      	bne.n	80048ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c2:	d12a      	bne.n	800491a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048cc:	d012      	beq.n	80048f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2200      	movs	r2, #0
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff ff49 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d02d      	beq.n	8004940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	f043 0220 	orr.w	r2, r3, #32
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e026      	b.n	8004942 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	2101      	movs	r1, #1
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff ff36 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d01a      	beq.n	8004940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e013      	b.n	8004942 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2200      	movs	r2, #0
 8004922:	2101      	movs	r1, #1
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7ff ff23 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e000      	b.n	8004942 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004958:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <SPI_EndRxTxTransaction+0x7c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <SPI_EndRxTxTransaction+0x80>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	0d5b      	lsrs	r3, r3, #21
 8004964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004968:	fb02 f303 	mul.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004976:	d112      	bne.n	800499e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	2180      	movs	r1, #128	; 0x80
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7ff fef4 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f043 0220 	orr.w	r2, r3, #32
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e00f      	b.n	80049be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d0f2      	beq.n	800499e <SPI_EndRxTxTransaction+0x52>
 80049b8:	e000      	b.n	80049bc <SPI_EndRxTxTransaction+0x70>
        break;
 80049ba:	bf00      	nop
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000008 	.word	0x20000008
 80049cc:	165e9f81 	.word	0x165e9f81

080049d0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e034      	b.n	8004a50 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7fb ffdc 	bl	80009b8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3308      	adds	r3, #8
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f001 ffa2 	bl	8006954 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	f001 ffec 	bl	80069f8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6858      	ldr	r0, [r3, #4]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	f002 f821 	bl	8006a74 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	6892      	ldr	r2, [r2, #8]
 8004a3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	6892      	ldr	r2, [r2, #8]
 8004a46:	f041 0101 	orr.w	r1, r1, #1
 8004a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e041      	b.n	8004aee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fd f8d8 	bl	8001c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f000 fc1a 	bl	80052d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d001      	beq.n	8004b10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e046      	b.n	8004b9e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a23      	ldr	r2, [pc, #140]	; (8004bac <HAL_TIM_Base_Start+0xb4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d022      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2a:	d01d      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <HAL_TIM_Base_Start+0xb8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d018      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <HAL_TIM_Base_Start+0xbc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d013      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <HAL_TIM_Base_Start+0xc0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00e      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1b      	ldr	r2, [pc, #108]	; (8004bbc <HAL_TIM_Base_Start+0xc4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d009      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <HAL_TIM_Base_Start+0xc8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_TIM_Base_Start+0x70>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <HAL_TIM_Base_Start+0xcc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d111      	bne.n	8004b8c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d010      	beq.n	8004b9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0201 	orr.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8a:	e007      	b.n	8004b9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40010400 	.word	0x40010400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40001800 	.word	0x40001800

08004bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d001      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e04e      	b.n	8004c7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <HAL_TIM_Base_Start_IT+0xc4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d022      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d01d      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1f      	ldr	r2, [pc, #124]	; (8004c90 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d018      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	; (8004c94 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d013      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00e      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d009      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d004      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d111      	bne.n	8004c6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d010      	beq.n	8004c7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0201 	orr.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6a:	e007      	b.n	8004c7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	40010400 	.word	0x40010400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40001800 	.word	0x40001800

08004ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e041      	b.n	8004d3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f839 	bl	8004d46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f000 faf2 	bl	80052d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d122      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d11b      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f06f 0202 	mvn.w	r2, #2
 8004d86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fa78 	bl	8005292 <HAL_TIM_IC_CaptureCallback>
 8004da2:	e005      	b.n	8004db0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fa6a 	bl	800527e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fa7b 	bl	80052a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d122      	bne.n	8004e0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d11b      	bne.n	8004e0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0204 	mvn.w	r2, #4
 8004dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fa4e 	bl	8005292 <HAL_TIM_IC_CaptureCallback>
 8004df6:	e005      	b.n	8004e04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fa40 	bl	800527e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fa51 	bl	80052a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d122      	bne.n	8004e5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d11b      	bne.n	8004e5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0208 	mvn.w	r2, #8
 8004e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2204      	movs	r2, #4
 8004e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fa24 	bl	8005292 <HAL_TIM_IC_CaptureCallback>
 8004e4a:	e005      	b.n	8004e58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fa16 	bl	800527e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fa27 	bl	80052a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d122      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d11b      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f06f 0210 	mvn.w	r2, #16
 8004e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2208      	movs	r2, #8
 8004e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f9fa 	bl	8005292 <HAL_TIM_IC_CaptureCallback>
 8004e9e:	e005      	b.n	8004eac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f9ec 	bl	800527e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f9fd 	bl	80052a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d10e      	bne.n	8004ede <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d107      	bne.n	8004ede <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f06f 0201 	mvn.w	r2, #1
 8004ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fc fc8d 	bl	80017f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee8:	2b80      	cmp	r3, #128	; 0x80
 8004eea:	d10e      	bne.n	8004f0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef6:	2b80      	cmp	r3, #128	; 0x80
 8004ef8:	d107      	bne.n	8004f0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fd53 	bl	80059b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	d10e      	bne.n	8004f36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d107      	bne.n	8004f36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f9c2 	bl	80052ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d10e      	bne.n	8004f62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d107      	bne.n	8004f62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f06f 0220 	mvn.w	r2, #32
 8004f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fd1d 	bl	800599c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e0ae      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b0c      	cmp	r3, #12
 8004f96:	f200 809f 	bhi.w	80050d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f9a:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	08004fd5 	.word	0x08004fd5
 8004fa4:	080050d9 	.word	0x080050d9
 8004fa8:	080050d9 	.word	0x080050d9
 8004fac:	080050d9 	.word	0x080050d9
 8004fb0:	08005015 	.word	0x08005015
 8004fb4:	080050d9 	.word	0x080050d9
 8004fb8:	080050d9 	.word	0x080050d9
 8004fbc:	080050d9 	.word	0x080050d9
 8004fc0:	08005057 	.word	0x08005057
 8004fc4:	080050d9 	.word	0x080050d9
 8004fc8:	080050d9 	.word	0x080050d9
 8004fcc:	080050d9 	.word	0x080050d9
 8004fd0:	08005097 	.word	0x08005097
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fa18 	bl	8005410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0208 	orr.w	r2, r2, #8
 8004fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0204 	bic.w	r2, r2, #4
 8004ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6999      	ldr	r1, [r3, #24]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	619a      	str	r2, [r3, #24]
      break;
 8005012:	e064      	b.n	80050de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fa68 	bl	80054f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6999      	ldr	r1, [r3, #24]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	021a      	lsls	r2, r3, #8
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	619a      	str	r2, [r3, #24]
      break;
 8005054:	e043      	b.n	80050de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fabd 	bl	80055dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0208 	orr.w	r2, r2, #8
 8005070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0204 	bic.w	r2, r2, #4
 8005080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69d9      	ldr	r1, [r3, #28]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	61da      	str	r2, [r3, #28]
      break;
 8005094:	e023      	b.n	80050de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fb11 	bl	80056c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69d9      	ldr	r1, [r3, #28]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	021a      	lsls	r2, r3, #8
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	61da      	str	r2, [r3, #28]
      break;
 80050d6:	e002      	b.n	80050de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	75fb      	strb	r3, [r7, #23]
      break;
 80050dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_TIM_ConfigClockSource+0x1c>
 8005108:	2302      	movs	r3, #2
 800510a:	e0b4      	b.n	8005276 <HAL_TIM_ConfigClockSource+0x186>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800512a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005132:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005144:	d03e      	beq.n	80051c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800514a:	f200 8087 	bhi.w	800525c <HAL_TIM_ConfigClockSource+0x16c>
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005152:	f000 8086 	beq.w	8005262 <HAL_TIM_ConfigClockSource+0x172>
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515a:	d87f      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b70      	cmp	r3, #112	; 0x70
 800515e:	d01a      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0xa6>
 8005160:	2b70      	cmp	r3, #112	; 0x70
 8005162:	d87b      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b60      	cmp	r3, #96	; 0x60
 8005166:	d050      	beq.n	800520a <HAL_TIM_ConfigClockSource+0x11a>
 8005168:	2b60      	cmp	r3, #96	; 0x60
 800516a:	d877      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b50      	cmp	r3, #80	; 0x50
 800516e:	d03c      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0xfa>
 8005170:	2b50      	cmp	r3, #80	; 0x50
 8005172:	d873      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b40      	cmp	r3, #64	; 0x40
 8005176:	d058      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x13a>
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d86f      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 800517c:	2b30      	cmp	r3, #48	; 0x30
 800517e:	d064      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x15a>
 8005180:	2b30      	cmp	r3, #48	; 0x30
 8005182:	d86b      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 8005184:	2b20      	cmp	r3, #32
 8005186:	d060      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x15a>
 8005188:	2b20      	cmp	r3, #32
 800518a:	d867      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 800518c:	2b00      	cmp	r3, #0
 800518e:	d05c      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x15a>
 8005190:	2b10      	cmp	r3, #16
 8005192:	d05a      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x15a>
 8005194:	e062      	b.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6899      	ldr	r1, [r3, #8]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f000 fb5d 	bl	8005864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	609a      	str	r2, [r3, #8]
      break;
 80051c2:	e04f      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6899      	ldr	r1, [r3, #8]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f000 fb46 	bl	8005864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051e6:	609a      	str	r2, [r3, #8]
      break;
 80051e8:	e03c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6859      	ldr	r1, [r3, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f000 faba 	bl	8005770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2150      	movs	r1, #80	; 0x50
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fb13 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 8005208:	e02c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6859      	ldr	r1, [r3, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	461a      	mov	r2, r3
 8005218:	f000 fad9 	bl	80057ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2160      	movs	r1, #96	; 0x60
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fb03 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 8005228:	e01c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6859      	ldr	r1, [r3, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	461a      	mov	r2, r3
 8005238:	f000 fa9a 	bl	8005770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2140      	movs	r1, #64	; 0x40
 8005242:	4618      	mov	r0, r3
 8005244:	f000 faf3 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 8005248:	e00c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f000 faea 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 800525a:	e003      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
      break;
 8005260:	e000      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a40      	ldr	r2, [pc, #256]	; (80053e4 <TIM_Base_SetConfig+0x114>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d013      	beq.n	8005310 <TIM_Base_SetConfig+0x40>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ee:	d00f      	beq.n	8005310 <TIM_Base_SetConfig+0x40>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a3d      	ldr	r2, [pc, #244]	; (80053e8 <TIM_Base_SetConfig+0x118>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00b      	beq.n	8005310 <TIM_Base_SetConfig+0x40>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a3c      	ldr	r2, [pc, #240]	; (80053ec <TIM_Base_SetConfig+0x11c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d007      	beq.n	8005310 <TIM_Base_SetConfig+0x40>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a3b      	ldr	r2, [pc, #236]	; (80053f0 <TIM_Base_SetConfig+0x120>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_Base_SetConfig+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a3a      	ldr	r2, [pc, #232]	; (80053f4 <TIM_Base_SetConfig+0x124>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d108      	bne.n	8005322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <TIM_Base_SetConfig+0x114>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d02b      	beq.n	8005382 <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005330:	d027      	beq.n	8005382 <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a2c      	ldr	r2, [pc, #176]	; (80053e8 <TIM_Base_SetConfig+0x118>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d023      	beq.n	8005382 <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a2b      	ldr	r2, [pc, #172]	; (80053ec <TIM_Base_SetConfig+0x11c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01f      	beq.n	8005382 <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a2a      	ldr	r2, [pc, #168]	; (80053f0 <TIM_Base_SetConfig+0x120>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01b      	beq.n	8005382 <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a29      	ldr	r2, [pc, #164]	; (80053f4 <TIM_Base_SetConfig+0x124>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d017      	beq.n	8005382 <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a28      	ldr	r2, [pc, #160]	; (80053f8 <TIM_Base_SetConfig+0x128>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a27      	ldr	r2, [pc, #156]	; (80053fc <TIM_Base_SetConfig+0x12c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00f      	beq.n	8005382 <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a26      	ldr	r2, [pc, #152]	; (8005400 <TIM_Base_SetConfig+0x130>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00b      	beq.n	8005382 <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a25      	ldr	r2, [pc, #148]	; (8005404 <TIM_Base_SetConfig+0x134>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d007      	beq.n	8005382 <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a24      	ldr	r2, [pc, #144]	; (8005408 <TIM_Base_SetConfig+0x138>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d003      	beq.n	8005382 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a23      	ldr	r2, [pc, #140]	; (800540c <TIM_Base_SetConfig+0x13c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d108      	bne.n	8005394 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a0a      	ldr	r2, [pc, #40]	; (80053e4 <TIM_Base_SetConfig+0x114>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <TIM_Base_SetConfig+0xf8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <TIM_Base_SetConfig+0x124>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d103      	bne.n	80053d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	615a      	str	r2, [r3, #20]
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40000c00 	.word	0x40000c00
 80053f4:	40010400 	.word	0x40010400
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40014400 	.word	0x40014400
 8005400:	40014800 	.word	0x40014800
 8005404:	40001800 	.word	0x40001800
 8005408:	40001c00 	.word	0x40001c00
 800540c:	40002000 	.word	0x40002000

08005410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f023 0201 	bic.w	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0303 	bic.w	r3, r3, #3
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f023 0302 	bic.w	r3, r3, #2
 8005458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <TIM_OC1_SetConfig+0xd8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_OC1_SetConfig+0x64>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a1f      	ldr	r2, [pc, #124]	; (80054ec <TIM_OC1_SetConfig+0xdc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10c      	bne.n	800548e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0308 	bic.w	r3, r3, #8
 800547a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f023 0304 	bic.w	r3, r3, #4
 800548c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <TIM_OC1_SetConfig+0xd8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_OC1_SetConfig+0x8e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a14      	ldr	r2, [pc, #80]	; (80054ec <TIM_OC1_SetConfig+0xdc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d111      	bne.n	80054c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40010000 	.word	0x40010000
 80054ec:	40010400 	.word	0x40010400

080054f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f023 0210 	bic.w	r2, r3, #16
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0320 	bic.w	r3, r3, #32
 800553a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a22      	ldr	r2, [pc, #136]	; (80055d4 <TIM_OC2_SetConfig+0xe4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_OC2_SetConfig+0x68>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a21      	ldr	r2, [pc, #132]	; (80055d8 <TIM_OC2_SetConfig+0xe8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d10d      	bne.n	8005574 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800555e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005572:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a17      	ldr	r2, [pc, #92]	; (80055d4 <TIM_OC2_SetConfig+0xe4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_OC2_SetConfig+0x94>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <TIM_OC2_SetConfig+0xe8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d113      	bne.n	80055ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800558a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40010400 	.word	0x40010400

080055dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a21      	ldr	r2, [pc, #132]	; (80056bc <TIM_OC3_SetConfig+0xe0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <TIM_OC3_SetConfig+0x66>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a20      	ldr	r2, [pc, #128]	; (80056c0 <TIM_OC3_SetConfig+0xe4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d10d      	bne.n	800565e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800565c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a16      	ldr	r2, [pc, #88]	; (80056bc <TIM_OC3_SetConfig+0xe0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <TIM_OC3_SetConfig+0x92>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <TIM_OC3_SetConfig+0xe4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d113      	bne.n	8005696 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800567c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	40010000 	.word	0x40010000
 80056c0:	40010400 	.word	0x40010400

080056c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800570e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	031b      	lsls	r3, r3, #12
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a12      	ldr	r2, [pc, #72]	; (8005768 <TIM_OC4_SetConfig+0xa4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_OC4_SetConfig+0x68>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a11      	ldr	r2, [pc, #68]	; (800576c <TIM_OC4_SetConfig+0xa8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d109      	bne.n	8005740 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	019b      	lsls	r3, r3, #6
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	621a      	str	r2, [r3, #32]
}
 800575a:	bf00      	nop
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000
 800576c:	40010400 	.word	0x40010400

08005770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0201 	bic.w	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f023 030a 	bic.w	r3, r3, #10
 80057ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b087      	sub	sp, #28
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f023 0210 	bic.w	r2, r3, #16
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	031b      	lsls	r3, r3, #12
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800580a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	f043 0307 	orr.w	r3, r3, #7
 8005850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	609a      	str	r2, [r3, #8]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800587e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	021a      	lsls	r2, r3, #8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	431a      	orrs	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4313      	orrs	r3, r2
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	609a      	str	r2, [r3, #8]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e05a      	b.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a21      	ldr	r2, [pc, #132]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d022      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005908:	d01d      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d018      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1b      	ldr	r2, [pc, #108]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d013      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1a      	ldr	r2, [pc, #104]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00e      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a18      	ldr	r2, [pc, #96]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d009      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a17      	ldr	r2, [pc, #92]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d004      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a15      	ldr	r2, [pc, #84]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d10c      	bne.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800594c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	4313      	orrs	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40010000 	.word	0x40010000
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40000c00 	.word	0x40000c00
 8005990:	40010400 	.word	0x40010400
 8005994:	40014000 	.word	0x40014000
 8005998:	40001800 	.word	0x40001800

0800599c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e03f      	b.n	8005a56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fc fa84 	bl	8001ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2224      	movs	r2, #36	; 0x24
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fddb 	bl	80065c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695a      	ldr	r2, [r3, #20]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b08a      	sub	sp, #40	; 0x28
 8005a62:	af02      	add	r7, sp, #8
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	d17c      	bne.n	8005b78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <HAL_UART_Transmit+0x2c>
 8005a84:	88fb      	ldrh	r3, [r7, #6]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e075      	b.n	8005b7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_UART_Transmit+0x3e>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e06e      	b.n	8005b7a <HAL_UART_Transmit+0x11c>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2221      	movs	r2, #33	; 0x21
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ab2:	f7fc fb3d 	bl	8002130 <HAL_GetTick>
 8005ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	88fa      	ldrh	r2, [r7, #6]
 8005ac2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005acc:	d108      	bne.n	8005ae0 <HAL_UART_Transmit+0x82>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d104      	bne.n	8005ae0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e003      	b.n	8005ae8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005af0:	e02a      	b.n	8005b48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2200      	movs	r2, #0
 8005afa:	2180      	movs	r1, #128	; 0x80
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fb1f 	bl	8006140 <UART_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e036      	b.n	8005b7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	3302      	adds	r3, #2
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	e007      	b.n	8005b3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	3301      	adds	r3, #1
 8005b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1cf      	bne.n	8005af2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2140      	movs	r1, #64	; 0x40
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 faef 	bl	8006140 <UART_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e006      	b.n	8005b7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e000      	b.n	8005b7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b78:	2302      	movs	r3, #2
  }
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d11d      	bne.n	8005bd8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_UART_Receive_IT+0x26>
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e016      	b.n	8005bda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Receive_IT+0x38>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e00f      	b.n	8005bda <HAL_UART_Receive_IT+0x58>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fb24 	bl	800621c <UART_Start_Receive_IT>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	e000      	b.n	8005bda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b0ba      	sub	sp, #232	; 0xe8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10f      	bne.n	8005c4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <HAL_UART_IRQHandler+0x66>
 8005c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fc03 	bl	800644e <UART_Receive_IT>
      return;
 8005c48:	e256      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80de 	beq.w	8005e10 <HAL_UART_IRQHandler+0x22c>
 8005c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80d1 	beq.w	8005e10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <HAL_UART_IRQHandler+0xae>
 8005c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f043 0201 	orr.w	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <HAL_UART_IRQHandler+0xd2>
 8005c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f043 0202 	orr.w	r2, r3, #2
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <HAL_UART_IRQHandler+0xf6>
 8005cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f043 0204 	orr.w	r2, r3, #4
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d011      	beq.n	8005d0a <HAL_UART_IRQHandler+0x126>
 8005ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d105      	bne.n	8005cfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f043 0208 	orr.w	r2, r3, #8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 81ed 	beq.w	80060ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_UART_IRQHandler+0x14e>
 8005d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fb8e 	bl	800644e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3c:	2b40      	cmp	r3, #64	; 0x40
 8005d3e:	bf0c      	ite	eq
 8005d40:	2301      	moveq	r3, #1
 8005d42:	2300      	movne	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <HAL_UART_IRQHandler+0x17a>
 8005d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d04f      	beq.n	8005dfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa96 	bl	8006290 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b40      	cmp	r3, #64	; 0x40
 8005d70:	d141      	bne.n	8005df6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3314      	adds	r3, #20
 8005d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3314      	adds	r3, #20
 8005d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1d9      	bne.n	8005d72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d013      	beq.n	8005dee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	4a7d      	ldr	r2, [pc, #500]	; (8005fc0 <HAL_UART_IRQHandler+0x3dc>)
 8005dcc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fc fe6e 	bl	8002ab4 <HAL_DMA_Abort_IT>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005de8:	4610      	mov	r0, r2
 8005dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dec:	e00e      	b.n	8005e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f990 	bl	8006114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df4:	e00a      	b.n	8005e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f98c 	bl	8006114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfc:	e006      	b.n	8005e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f988 	bl	8006114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e0a:	e170      	b.n	80060ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	bf00      	nop
    return;
 8005e0e:	e16e      	b.n	80060ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	f040 814a 	bne.w	80060ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1e:	f003 0310 	and.w	r3, r3, #16
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 8143 	beq.w	80060ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 813c 	beq.w	80060ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e36:	2300      	movs	r3, #0
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e56:	2b40      	cmp	r3, #64	; 0x40
 8005e58:	f040 80b4 	bne.w	8005fc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8140 	beq.w	80060f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	f080 8139 	bcs.w	80060f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e92:	f000 8088 	beq.w	8005fa6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	330c      	adds	r3, #12
 8005ebe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1d9      	bne.n	8005e96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3314      	adds	r3, #20
 8005ee8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3314      	adds	r3, #20
 8005f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e1      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3314      	adds	r3, #20
 8005f24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3314      	adds	r3, #20
 8005f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e3      	bne.n	8005f1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f76:	f023 0310 	bic.w	r3, r3, #16
 8005f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f88:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e3      	bne.n	8005f64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fc fd17 	bl	80029d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f8b6 	bl	8006128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fbc:	e099      	b.n	80060f2 <HAL_UART_IRQHandler+0x50e>
 8005fbe:	bf00      	nop
 8005fc0:	08006357 	.word	0x08006357
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 808b 	beq.w	80060f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8086 	beq.w	80060f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	330c      	adds	r3, #12
 800600a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800600e:	647a      	str	r2, [r7, #68]	; 0x44
 8006010:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006014:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800601c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e3      	bne.n	8005fea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	623b      	str	r3, [r7, #32]
   return(result);
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3314      	adds	r3, #20
 8006042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006046:	633a      	str	r2, [r7, #48]	; 0x30
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800604c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e3      	bne.n	8006022 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	330c      	adds	r3, #12
 800606e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	60fb      	str	r3, [r7, #12]
   return(result);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0310 	bic.w	r3, r3, #16
 800607e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	330c      	adds	r3, #12
 8006088:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800608c:	61fa      	str	r2, [r7, #28]
 800608e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	69b9      	ldr	r1, [r7, #24]
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	617b      	str	r3, [r7, #20]
   return(result);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e3      	bne.n	8006068 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f83e 	bl	8006128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060ac:	e023      	b.n	80060f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_UART_IRQHandler+0x4ea>
 80060ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f959 	bl	800637e <UART_Transmit_IT>
    return;
 80060cc:	e014      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00e      	beq.n	80060f8 <HAL_UART_IRQHandler+0x514>
 80060da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f999 	bl	800641e <UART_EndTransmit_IT>
    return;
 80060ec:	e004      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
    return;
 80060ee:	bf00      	nop
 80060f0:	e002      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
      return;
 80060f2:	bf00      	nop
 80060f4:	e000      	b.n	80060f8 <HAL_UART_IRQHandler+0x514>
      return;
 80060f6:	bf00      	nop
  }
}
 80060f8:	37e8      	adds	r7, #232	; 0xe8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop

08006100 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b090      	sub	sp, #64	; 0x40
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	4613      	mov	r3, r2
 800614e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006150:	e050      	b.n	80061f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006158:	d04c      	beq.n	80061f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800615a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <UART_WaitOnFlagUntilTimeout+0x30>
 8006160:	f7fb ffe6 	bl	8002130 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800616c:	429a      	cmp	r2, r3
 800616e:	d241      	bcs.n	80061f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	330c      	adds	r3, #12
 800618e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006190:	637a      	str	r2, [r7, #52]	; 0x34
 8006192:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e5      	bne.n	8006170 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3314      	adds	r3, #20
 80061aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	613b      	str	r3, [r7, #16]
   return(result);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3314      	adds	r3, #20
 80061c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061c4:	623a      	str	r2, [r7, #32]
 80061c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	69f9      	ldr	r1, [r7, #28]
 80061ca:	6a3a      	ldr	r2, [r7, #32]
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e5      	bne.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e00f      	b.n	8006214 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4013      	ands	r3, r2
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	429a      	cmp	r2, r3
 8006202:	bf0c      	ite	eq
 8006204:	2301      	moveq	r3, #1
 8006206:	2300      	movne	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	429a      	cmp	r2, r3
 8006210:	d09f      	beq.n	8006152 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3740      	adds	r7, #64	; 0x40
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	4613      	mov	r3, r2
 8006228:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	88fa      	ldrh	r2, [r7, #6]
 800623a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2222      	movs	r2, #34	; 0x22
 8006246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006260:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0201 	orr.w	r2, r2, #1
 8006270:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0220 	orr.w	r2, r2, #32
 8006280:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b095      	sub	sp, #84	; 0x54
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	330c      	adds	r3, #12
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a2:	e853 3f00 	ldrex	r3, [r3]
 80062a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	330c      	adds	r3, #12
 80062b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062b8:	643a      	str	r2, [r7, #64]	; 0x40
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062c0:	e841 2300 	strex	r3, r2, [r1]
 80062c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e5      	bne.n	8006298 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3314      	adds	r3, #20
 80062d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	61fb      	str	r3, [r7, #28]
   return(result);
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	f023 0301 	bic.w	r3, r3, #1
 80062e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3314      	adds	r3, #20
 80062ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062f4:	e841 2300 	strex	r3, r2, [r1]
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e5      	bne.n	80062cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	2b01      	cmp	r3, #1
 8006306:	d119      	bne.n	800633c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	330c      	adds	r3, #12
 800630e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	60bb      	str	r3, [r7, #8]
   return(result);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f023 0310 	bic.w	r3, r3, #16
 800631e:	647b      	str	r3, [r7, #68]	; 0x44
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	330c      	adds	r3, #12
 8006326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006328:	61ba      	str	r2, [r7, #24]
 800632a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6979      	ldr	r1, [r7, #20]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	613b      	str	r3, [r7, #16]
   return(result);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e5      	bne.n	8006308 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	631a      	str	r2, [r3, #48]	; 0x30
}
 800634a:	bf00      	nop
 800634c:	3754      	adds	r7, #84	; 0x54
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff fecf 	bl	8006114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006376:	bf00      	nop
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b21      	cmp	r3, #33	; 0x21
 8006390:	d13e      	bne.n	8006410 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639a:	d114      	bne.n	80063c6 <UART_Transmit_IT+0x48>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d110      	bne.n	80063c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	1c9a      	adds	r2, r3, #2
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]
 80063c4:	e008      	b.n	80063d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	1c59      	adds	r1, r3, #1
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6211      	str	r1, [r2, #32]
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	4619      	mov	r1, r3
 80063e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10f      	bne.n	800640c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800640a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	e000      	b.n	8006412 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006410:	2302      	movs	r3, #2
  }
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006434:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff fe5e 	bl	8006100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b08c      	sub	sp, #48	; 0x30
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b22      	cmp	r3, #34	; 0x22
 8006460:	f040 80ab 	bne.w	80065ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646c:	d117      	bne.n	800649e <UART_Receive_IT+0x50>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d113      	bne.n	800649e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648c:	b29a      	uxth	r2, r3
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006496:	1c9a      	adds	r2, r3, #2
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	629a      	str	r2, [r3, #40]	; 0x28
 800649c:	e026      	b.n	80064ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b0:	d007      	beq.n	80064c2 <UART_Receive_IT+0x74>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <UART_Receive_IT+0x82>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e008      	b.n	80064e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	4619      	mov	r1, r3
 80064fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d15a      	bne.n	80065b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0220 	bic.w	r2, r2, #32
 800650e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800651e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695a      	ldr	r2, [r3, #20]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	2b01      	cmp	r3, #1
 800653e:	d135      	bne.n	80065ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	330c      	adds	r3, #12
 800654c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	613b      	str	r3, [r7, #16]
   return(result);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f023 0310 	bic.w	r3, r3, #16
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	330c      	adds	r3, #12
 8006564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006566:	623a      	str	r2, [r7, #32]
 8006568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	69f9      	ldr	r1, [r7, #28]
 800656c:	6a3a      	ldr	r2, [r7, #32]
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	61bb      	str	r3, [r7, #24]
   return(result);
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e5      	bne.n	8006546 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b10      	cmp	r3, #16
 8006586:	d10a      	bne.n	800659e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006588:	2300      	movs	r3, #0
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff fdbf 	bl	8006128 <HAL_UARTEx_RxEventCallback>
 80065aa:	e002      	b.n	80065b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fb fbf5 	bl	8001d9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e002      	b.n	80065bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	e000      	b.n	80065bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80065ba:	2302      	movs	r3, #2
  }
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3730      	adds	r7, #48	; 0x30
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	b09f      	sub	sp, #124	; 0x7c
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065da:	68d9      	ldr	r1, [r3, #12]
 80065dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	ea40 0301 	orr.w	r3, r0, r1
 80065e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80065fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006608:	f021 010c 	bic.w	r1, r1, #12
 800660c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006612:	430b      	orrs	r3, r1
 8006614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006622:	6999      	ldr	r1, [r3, #24]
 8006624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	ea40 0301 	orr.w	r3, r0, r1
 800662c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800662e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4bc5      	ldr	r3, [pc, #788]	; (8006948 <UART_SetConfig+0x384>)
 8006634:	429a      	cmp	r2, r3
 8006636:	d004      	beq.n	8006642 <UART_SetConfig+0x7e>
 8006638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	4bc3      	ldr	r3, [pc, #780]	; (800694c <UART_SetConfig+0x388>)
 800663e:	429a      	cmp	r2, r3
 8006640:	d103      	bne.n	800664a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006642:	f7fd fc09 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 8006646:	6778      	str	r0, [r7, #116]	; 0x74
 8006648:	e002      	b.n	8006650 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800664a:	f7fd fbf1 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 800664e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006658:	f040 80b6 	bne.w	80067c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800665c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800665e:	461c      	mov	r4, r3
 8006660:	f04f 0500 	mov.w	r5, #0
 8006664:	4622      	mov	r2, r4
 8006666:	462b      	mov	r3, r5
 8006668:	1891      	adds	r1, r2, r2
 800666a:	6439      	str	r1, [r7, #64]	; 0x40
 800666c:	415b      	adcs	r3, r3
 800666e:	647b      	str	r3, [r7, #68]	; 0x44
 8006670:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006674:	1912      	adds	r2, r2, r4
 8006676:	eb45 0303 	adc.w	r3, r5, r3
 800667a:	f04f 0000 	mov.w	r0, #0
 800667e:	f04f 0100 	mov.w	r1, #0
 8006682:	00d9      	lsls	r1, r3, #3
 8006684:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006688:	00d0      	lsls	r0, r2, #3
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	1911      	adds	r1, r2, r4
 8006690:	6639      	str	r1, [r7, #96]	; 0x60
 8006692:	416b      	adcs	r3, r5
 8006694:	667b      	str	r3, [r7, #100]	; 0x64
 8006696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	461a      	mov	r2, r3
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	1891      	adds	r1, r2, r2
 80066a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80066a4:	415b      	adcs	r3, r3
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80066b0:	f7f9 fd8a 	bl	80001c8 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4ba5      	ldr	r3, [pc, #660]	; (8006950 <UART_SetConfig+0x38c>)
 80066ba:	fba3 2302 	umull	r2, r3, r3, r2
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	011e      	lsls	r6, r3, #4
 80066c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066c4:	461c      	mov	r4, r3
 80066c6:	f04f 0500 	mov.w	r5, #0
 80066ca:	4622      	mov	r2, r4
 80066cc:	462b      	mov	r3, r5
 80066ce:	1891      	adds	r1, r2, r2
 80066d0:	6339      	str	r1, [r7, #48]	; 0x30
 80066d2:	415b      	adcs	r3, r3
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
 80066d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80066da:	1912      	adds	r2, r2, r4
 80066dc:	eb45 0303 	adc.w	r3, r5, r3
 80066e0:	f04f 0000 	mov.w	r0, #0
 80066e4:	f04f 0100 	mov.w	r1, #0
 80066e8:	00d9      	lsls	r1, r3, #3
 80066ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066ee:	00d0      	lsls	r0, r2, #3
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	1911      	adds	r1, r2, r4
 80066f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80066f8:	416b      	adcs	r3, r5
 80066fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	461a      	mov	r2, r3
 8006702:	f04f 0300 	mov.w	r3, #0
 8006706:	1891      	adds	r1, r2, r2
 8006708:	62b9      	str	r1, [r7, #40]	; 0x28
 800670a:	415b      	adcs	r3, r3
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800670e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006712:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006716:	f7f9 fd57 	bl	80001c8 <__aeabi_uldivmod>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4b8c      	ldr	r3, [pc, #560]	; (8006950 <UART_SetConfig+0x38c>)
 8006720:	fba3 1302 	umull	r1, r3, r3, r2
 8006724:	095b      	lsrs	r3, r3, #5
 8006726:	2164      	movs	r1, #100	; 0x64
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	3332      	adds	r3, #50	; 0x32
 8006732:	4a87      	ldr	r2, [pc, #540]	; (8006950 <UART_SetConfig+0x38c>)
 8006734:	fba2 2303 	umull	r2, r3, r2, r3
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006740:	441e      	add	r6, r3
 8006742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006744:	4618      	mov	r0, r3
 8006746:	f04f 0100 	mov.w	r1, #0
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	1894      	adds	r4, r2, r2
 8006750:	623c      	str	r4, [r7, #32]
 8006752:	415b      	adcs	r3, r3
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
 8006756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800675a:	1812      	adds	r2, r2, r0
 800675c:	eb41 0303 	adc.w	r3, r1, r3
 8006760:	f04f 0400 	mov.w	r4, #0
 8006764:	f04f 0500 	mov.w	r5, #0
 8006768:	00dd      	lsls	r5, r3, #3
 800676a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800676e:	00d4      	lsls	r4, r2, #3
 8006770:	4622      	mov	r2, r4
 8006772:	462b      	mov	r3, r5
 8006774:	1814      	adds	r4, r2, r0
 8006776:	653c      	str	r4, [r7, #80]	; 0x50
 8006778:	414b      	adcs	r3, r1
 800677a:	657b      	str	r3, [r7, #84]	; 0x54
 800677c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	461a      	mov	r2, r3
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	1891      	adds	r1, r2, r2
 8006788:	61b9      	str	r1, [r7, #24]
 800678a:	415b      	adcs	r3, r3
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006792:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006796:	f7f9 fd17 	bl	80001c8 <__aeabi_uldivmod>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4b6c      	ldr	r3, [pc, #432]	; (8006950 <UART_SetConfig+0x38c>)
 80067a0:	fba3 1302 	umull	r1, r3, r3, r2
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	2164      	movs	r1, #100	; 0x64
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	3332      	adds	r3, #50	; 0x32
 80067b2:	4a67      	ldr	r2, [pc, #412]	; (8006950 <UART_SetConfig+0x38c>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	f003 0207 	and.w	r2, r3, #7
 80067be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4432      	add	r2, r6
 80067c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067c6:	e0b9      	b.n	800693c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ca:	461c      	mov	r4, r3
 80067cc:	f04f 0500 	mov.w	r5, #0
 80067d0:	4622      	mov	r2, r4
 80067d2:	462b      	mov	r3, r5
 80067d4:	1891      	adds	r1, r2, r2
 80067d6:	6139      	str	r1, [r7, #16]
 80067d8:	415b      	adcs	r3, r3
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067e0:	1912      	adds	r2, r2, r4
 80067e2:	eb45 0303 	adc.w	r3, r5, r3
 80067e6:	f04f 0000 	mov.w	r0, #0
 80067ea:	f04f 0100 	mov.w	r1, #0
 80067ee:	00d9      	lsls	r1, r3, #3
 80067f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067f4:	00d0      	lsls	r0, r2, #3
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	eb12 0804 	adds.w	r8, r2, r4
 80067fe:	eb43 0905 	adc.w	r9, r3, r5
 8006802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	4618      	mov	r0, r3
 8006808:	f04f 0100 	mov.w	r1, #0
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	008b      	lsls	r3, r1, #2
 8006816:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800681a:	0082      	lsls	r2, r0, #2
 800681c:	4640      	mov	r0, r8
 800681e:	4649      	mov	r1, r9
 8006820:	f7f9 fcd2 	bl	80001c8 <__aeabi_uldivmod>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4b49      	ldr	r3, [pc, #292]	; (8006950 <UART_SetConfig+0x38c>)
 800682a:	fba3 2302 	umull	r2, r3, r3, r2
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	011e      	lsls	r6, r3, #4
 8006832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006834:	4618      	mov	r0, r3
 8006836:	f04f 0100 	mov.w	r1, #0
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	1894      	adds	r4, r2, r2
 8006840:	60bc      	str	r4, [r7, #8]
 8006842:	415b      	adcs	r3, r3
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800684a:	1812      	adds	r2, r2, r0
 800684c:	eb41 0303 	adc.w	r3, r1, r3
 8006850:	f04f 0400 	mov.w	r4, #0
 8006854:	f04f 0500 	mov.w	r5, #0
 8006858:	00dd      	lsls	r5, r3, #3
 800685a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800685e:	00d4      	lsls	r4, r2, #3
 8006860:	4622      	mov	r2, r4
 8006862:	462b      	mov	r3, r5
 8006864:	1814      	adds	r4, r2, r0
 8006866:	64bc      	str	r4, [r7, #72]	; 0x48
 8006868:	414b      	adcs	r3, r1
 800686a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800686c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	4618      	mov	r0, r3
 8006872:	f04f 0100 	mov.w	r1, #0
 8006876:	f04f 0200 	mov.w	r2, #0
 800687a:	f04f 0300 	mov.w	r3, #0
 800687e:	008b      	lsls	r3, r1, #2
 8006880:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006884:	0082      	lsls	r2, r0, #2
 8006886:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800688a:	f7f9 fc9d 	bl	80001c8 <__aeabi_uldivmod>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4b2f      	ldr	r3, [pc, #188]	; (8006950 <UART_SetConfig+0x38c>)
 8006894:	fba3 1302 	umull	r1, r3, r3, r2
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	2164      	movs	r1, #100	; 0x64
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	3332      	adds	r3, #50	; 0x32
 80068a6:	4a2a      	ldr	r2, [pc, #168]	; (8006950 <UART_SetConfig+0x38c>)
 80068a8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068b2:	441e      	add	r6, r3
 80068b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b6:	4618      	mov	r0, r3
 80068b8:	f04f 0100 	mov.w	r1, #0
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	1894      	adds	r4, r2, r2
 80068c2:	603c      	str	r4, [r7, #0]
 80068c4:	415b      	adcs	r3, r3
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068cc:	1812      	adds	r2, r2, r0
 80068ce:	eb41 0303 	adc.w	r3, r1, r3
 80068d2:	f04f 0400 	mov.w	r4, #0
 80068d6:	f04f 0500 	mov.w	r5, #0
 80068da:	00dd      	lsls	r5, r3, #3
 80068dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068e0:	00d4      	lsls	r4, r2, #3
 80068e2:	4622      	mov	r2, r4
 80068e4:	462b      	mov	r3, r5
 80068e6:	eb12 0a00 	adds.w	sl, r2, r0
 80068ea:	eb43 0b01 	adc.w	fp, r3, r1
 80068ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f04f 0100 	mov.w	r1, #0
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	008b      	lsls	r3, r1, #2
 8006902:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006906:	0082      	lsls	r2, r0, #2
 8006908:	4650      	mov	r0, sl
 800690a:	4659      	mov	r1, fp
 800690c:	f7f9 fc5c 	bl	80001c8 <__aeabi_uldivmod>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <UART_SetConfig+0x38c>)
 8006916:	fba3 1302 	umull	r1, r3, r3, r2
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	2164      	movs	r1, #100	; 0x64
 800691e:	fb01 f303 	mul.w	r3, r1, r3
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	3332      	adds	r3, #50	; 0x32
 8006928:	4a09      	ldr	r2, [pc, #36]	; (8006950 <UART_SetConfig+0x38c>)
 800692a:	fba2 2303 	umull	r2, r3, r2, r3
 800692e:	095b      	lsrs	r3, r3, #5
 8006930:	f003 020f 	and.w	r2, r3, #15
 8006934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4432      	add	r2, r6
 800693a:	609a      	str	r2, [r3, #8]
}
 800693c:	bf00      	nop
 800693e:	377c      	adds	r7, #124	; 0x7c
 8006940:	46bd      	mov	sp, r7
 8006942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006946:	bf00      	nop
 8006948:	40011000 	.word	0x40011000
 800694c:	40011400 	.word	0x40011400
 8006950:	51eb851f 	.word	0x51eb851f

08006954 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4b20      	ldr	r3, [pc, #128]	; (80069f4 <FSMC_NORSRAM_Init+0xa0>)
 8006972:	4013      	ands	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800697e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006984:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800698a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006990:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006996:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800699c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80069a2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80069a8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80069ae:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80069b4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80069ba:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80069c0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d103      	bne.n	80069d8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68f9      	ldr	r1, [r7, #12]
 80069e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	fff00080 	.word	0xfff00080

080069f8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a12:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006a1a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006a26:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006a2e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006a36:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006a40:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	3b02      	subs	r3, #2
 8006a48:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006a4a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006a50:	4313      	orrs	r3, r2
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6979      	ldr	r1, [r7, #20]
 8006a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
	...

08006a74 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a8c:	d122      	bne.n	8006ad4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a96:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006aaa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006ab2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006aba:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006ac0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6979      	ldr	r1, [r7, #20]
 8006ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006ad2:	e005      	b.n	8006ae0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	cff00000 	.word	0xcff00000

08006af4 <__libc_init_array>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	4d0d      	ldr	r5, [pc, #52]	; (8006b2c <__libc_init_array+0x38>)
 8006af8:	4c0d      	ldr	r4, [pc, #52]	; (8006b30 <__libc_init_array+0x3c>)
 8006afa:	1b64      	subs	r4, r4, r5
 8006afc:	10a4      	asrs	r4, r4, #2
 8006afe:	2600      	movs	r6, #0
 8006b00:	42a6      	cmp	r6, r4
 8006b02:	d109      	bne.n	8006b18 <__libc_init_array+0x24>
 8006b04:	4d0b      	ldr	r5, [pc, #44]	; (8006b34 <__libc_init_array+0x40>)
 8006b06:	4c0c      	ldr	r4, [pc, #48]	; (8006b38 <__libc_init_array+0x44>)
 8006b08:	f000 f820 	bl	8006b4c <_init>
 8006b0c:	1b64      	subs	r4, r4, r5
 8006b0e:	10a4      	asrs	r4, r4, #2
 8006b10:	2600      	movs	r6, #0
 8006b12:	42a6      	cmp	r6, r4
 8006b14:	d105      	bne.n	8006b22 <__libc_init_array+0x2e>
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1c:	4798      	blx	r3
 8006b1e:	3601      	adds	r6, #1
 8006b20:	e7ee      	b.n	8006b00 <__libc_init_array+0xc>
 8006b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b26:	4798      	blx	r3
 8006b28:	3601      	adds	r6, #1
 8006b2a:	e7f2      	b.n	8006b12 <__libc_init_array+0x1e>
 8006b2c:	08009b24 	.word	0x08009b24
 8006b30:	08009b24 	.word	0x08009b24
 8006b34:	08009b24 	.word	0x08009b24
 8006b38:	08009b28 	.word	0x08009b28

08006b3c <memset>:
 8006b3c:	4402      	add	r2, r0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d100      	bne.n	8006b46 <memset+0xa>
 8006b44:	4770      	bx	lr
 8006b46:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4a:	e7f9      	b.n	8006b40 <memset+0x4>

08006b4c <_init>:
 8006b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4e:	bf00      	nop
 8006b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b52:	bc08      	pop	{r3}
 8006b54:	469e      	mov	lr, r3
 8006b56:	4770      	bx	lr

08006b58 <_fini>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	bf00      	nop
 8006b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5e:	bc08      	pop	{r3}
 8006b60:	469e      	mov	lr, r3
 8006b62:	4770      	bx	lr
